/* eslint-env jest */
/* eslint-disable @typescript-eslint/no-require-imports, no-undef */
const React = require('react');

// Create a mock component factory
const createMockIcon = (name) => {
  // Return a simple function component instead of forwardRef to avoid issues
  function MockIcon(props) {
    // Forward all props (including role, aria-label, className, style, etc.)
    return React.createElement('svg', {
      ...props,
      'data-testid': `icon-${name}`,
      'data-lucide': name,
    });
  }
  MockIcon.displayName = `${name}Icon`;
  return MockIcon;
};

// Create a generic fallback icon for any icons we haven't explicitly defined
const createFallbackIcon = () => createMockIcon('generic');

// All the icons we export
const icons = {
  Play: createMockIcon('play'),
  Pause: createMockIcon('pause'),
  SkipBack: createMockIcon('skip-back'),
  SkipForward: createMockIcon('skip-forward'),
  Volume2: createMockIcon('volume-2'),
  VolumeX: createMockIcon('volume-x'),
  Maximize: createMockIcon('maximize'),
  Minimize: createMockIcon('minimize'),
  Settings: createMockIcon('settings'),
  Download: createMockIcon('download'),
  Upload: createMockIcon('upload'),
  Trash2: createMockIcon('trash-2'),
  Edit: createMockIcon('edit'),
  Save: createMockIcon('save'),
  X: createMockIcon('x'),
  Check: createMockIcon('check'),
  ChevronDown: createMockIcon('chevron-down'),
  ChevronUp: createMockIcon('chevron-up'),
  ChevronLeft: createMockIcon('chevron-left'),
  ChevronRight: createMockIcon('chevron-right'),
  Plus: createMockIcon('plus'),
  Minus: createMockIcon('minus'),
  Search: createMockIcon('search'),
  Filter: createMockIcon('filter'),
  MoreVertical: createMockIcon('more-vertical'),
  MoreHorizontal: createMockIcon('more-horizontal'),
  Copy: createMockIcon('copy'),
  Clipboard: createMockIcon('clipboard'),
  Eye: createMockIcon('eye'),
  EyeOff: createMockIcon('eye-off'),
  Lock: createMockIcon('lock'),
  Unlock: createMockIcon('unlock'),
  User: createMockIcon('user'),
  Users: createMockIcon('users'),
  Bell: createMockIcon('bell'),
  BellOff: createMockIcon('bell-off'),
  Calendar: createMockIcon('calendar'),
  Clock: createMockIcon('clock'),
  Home: createMockIcon('home'),
  Menu: createMockIcon('menu'),
  LogOut: createMockIcon('log-out'),
  LogIn: createMockIcon('log-in'),
  Image: createMockIcon('image'),
  Film: createMockIcon('film'),
  Music: createMockIcon('music'),
  Mic: createMockIcon('mic'),
  Video: createMockIcon('video'),
  Camera: createMockIcon('camera'),
  Folder: createMockIcon('folder'),
  FolderOpen: createMockIcon('folder-open'),
  File: createMockIcon('file'),
  FileText: createMockIcon('file-text'),
  AlertCircle: createMockIcon('alert-circle'),
  AlertTriangle: createMockIcon('alert-triangle'),
  Info: createMockIcon('info'),
  HelpCircle: createMockIcon('help-circle'),
  XCircle: createMockIcon('x-circle'),
  CheckCircle: createMockIcon('check-circle'),
  Loader: createMockIcon('loader'),
  Loader2: createMockIcon('loader-2'),
  RefreshCw: createMockIcon('refresh-cw'),
  RotateCw: createMockIcon('rotate-cw'),
  RotateCcw: createMockIcon('rotate-ccw'),
  ZoomIn: createMockIcon('zoom-in'),
  ZoomOut: createMockIcon('zoom-out'),
  Scissors: createMockIcon('scissors'),
  Layers: createMockIcon('layers'),
  Share2: createMockIcon('share-2'),
  Link: createMockIcon('link'),
  ExternalLink: createMockIcon('external-link'),
  Trash: createMockIcon('trash'),
  Archive: createMockIcon('archive'),
  Send: createMockIcon('send'),
  Mail: createMockIcon('mail'),
  MessageCircle: createMockIcon('message-circle'),
  MessageSquare: createMockIcon('message-square'),
  Star: createMockIcon('star'),
  Heart: createMockIcon('heart'),
  ThumbsUp: createMockIcon('thumbs-up'),
  ThumbsDown: createMockIcon('thumbs-down'),
  Bookmark: createMockIcon('bookmark'),
  Flag: createMockIcon('flag'),
  Tag: createMockIcon('tag'),
  Hash: createMockIcon('hash'),
  AtSign: createMockIcon('at-sign'),
  Grid: createMockIcon('grid'),
  List: createMockIcon('list'),
  BarChart: createMockIcon('bar-chart'),
  PieChart: createMockIcon('pie-chart'),
  TrendingUp: createMockIcon('trending-up'),
  TrendingDown: createMockIcon('trending-down'),
  Activity: createMockIcon('activity'),
  Package: createMockIcon('package'),
  Box: createMockIcon('box'),
  Cpu: createMockIcon('cpu'),
  HardDrive: createMockIcon('hard-drive'),
  Server: createMockIcon('server'),
  Database: createMockIcon('database'),
  Wifi: createMockIcon('wifi'),
  WifiOff: createMockIcon('wifi-off'),
  Bluetooth: createMockIcon('bluetooth'),
  Cast: createMockIcon('cast'),
  Airplay: createMockIcon('airplay'),
  Monitor: createMockIcon('monitor'),
  Smartphone: createMockIcon('smartphone'),
  Tablet: createMockIcon('tablet'),
  Watch: createMockIcon('watch'),
  Printer: createMockIcon('printer'),
  Speaker: createMockIcon('speaker'),
  Headphones: createMockIcon('headphones'),
  Power: createMockIcon('power'),
  BatteryCharging: createMockIcon('battery-charging'),
  Battery: createMockIcon('battery'),
  Zap: createMockIcon('zap'),
  Sun: createMockIcon('sun'),
  Moon: createMockIcon('moon'),
  Cloud: createMockIcon('cloud'),
  CloudRain: createMockIcon('cloud-rain'),
  CloudSnow: createMockIcon('cloud-snow'),
  Umbrella: createMockIcon('umbrella'),
  Wind: createMockIcon('wind'),
  Droplet: createMockIcon('droplet'),
  Thermometer: createMockIcon('thermometer'),
  Compass: createMockIcon('compass'),
  Map: createMockIcon('map'),
  MapPin: createMockIcon('map-pin'),
  Navigation: createMockIcon('navigation'),
  Target: createMockIcon('target'),
  Award: createMockIcon('award'),
  Gift: createMockIcon('gift'),
  ShoppingCart: createMockIcon('shopping-cart'),
  ShoppingBag: createMockIcon('shopping-bag'),
  CreditCard: createMockIcon('credit-card'),
  DollarSign: createMockIcon('dollar-sign'),
  Code: createMockIcon('code'),
  Terminal: createMockIcon('terminal'),
  Command: createMockIcon('command'),
  GitBranch: createMockIcon('git-branch'),
  GitCommit: createMockIcon('git-commit'),
  GitMerge: createMockIcon('git-merge'),
  GitPullRequest: createMockIcon('git-pull-request'),
  Github: createMockIcon('github'),
  Gitlab: createMockIcon('gitlab'),
  Figma: createMockIcon('figma'),
  Slack: createMockIcon('slack'),
  Chrome: createMockIcon('chrome'),
  Twitch: createMockIcon('twitch'),
  Twitter: createMockIcon('twitter'),
  Facebook: createMockIcon('facebook'),
  Instagram: createMockIcon('instagram'),
  Linkedin: createMockIcon('linkedin'),
  Youtube: createMockIcon('youtube'),
  Undo: createMockIcon('undo'),
  Redo: createMockIcon('redo'),
  Repeat: createMockIcon('repeat'),
  Shuffle: createMockIcon('shuffle'),
  FastForward: createMockIcon('fast-forward'),
  Rewind: createMockIcon('rewind'),
  Volume: createMockIcon('volume'),
  Volume1: createMockIcon('volume-1'),
  PlayCircle: createMockIcon('play-circle'),
  PauseCircle: createMockIcon('pause-circle'),
  StopCircle: createMockIcon('stop-circle'),
  SkipBackCircle: createMockIcon('skip-back-circle'),
  SkipForwardCircle: createMockIcon('skip-forward-circle'),
  Move: createMockIcon('move'),
  Crosshair: createMockIcon('crosshair'),
  Sliders: createMockIcon('sliders'),
  Type: createMockIcon('type'),
  Bold: createMockIcon('bold'),
  Italic: createMockIcon('italic'),
  Underline: createMockIcon('underline'),
  AlignLeft: createMockIcon('align-left'),
  AlignCenter: createMockIcon('align-center'),
  AlignRight: createMockIcon('align-right'),
  AlignJustify: createMockIcon('align-justify'),
  Wand2: createMockIcon('wand-2'),
  Sparkles: createMockIcon('sparkles'),
  Clapperboard: createMockIcon('clapperboard'),
  CaseSensitive: createMockIcon('case-sensitive'),
};

// Export all icons as named exports
module.exports = icons;

// Mark as ES module
module.exports.__esModule = true;

// For modularized imports (import Icon from 'lucide-react/dist/esm/icons/icon-name')
// We export a Proxy as default that creates icons on-demand
module.exports.default = new Proxy(createFallbackIcon(), {
  get: (target, prop) => {
    if (prop === '__esModule') return true;
    if (prop === 'default' || prop === 'then') return undefined;
    // Return the icon if it exists in our icons object, otherwise create one on-demand
    return icons[prop] || createMockIcon(String(prop).toLowerCase());
  },
});
