
> nonlinear-editor@0.1.0 test
> NODE_OPTIONS='--max-old-space-size=4096' jest --maxWorkers=3 --workerIdleMemoryLimit=1024MB __tests__/api/

FAIL __tests__/api/export/export.test.ts
  ● POST /api/export › Feature Flag › should return 503 when export is disabled

    expect(received).toBe(expected) // Object.is equality

    Expected: 503
    Received: 500

      105 |
      106 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 107 |       expect(response.status).toBe(503);
          |                               ^
      108 |     });
      109 |   });
      110 |

      at Object.toBe (__tests__/api/export/export.test.ts:107:31)

  ● POST /api/export › Input Validation - Required Fields › should return 400 when projectId is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      128 |
      129 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 130 |       expect(response.status).toBe(400);
          |                               ^
      131 |     });
      132 |
      133 |     it('should return 400 when timeline is missing', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:130:31)

  ● POST /api/export › Input Validation - Required Fields › should return 400 when timeline is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      149 |
      150 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 151 |       expect(response.status).toBe(400);
          |                               ^
      152 |     });
      153 |
      154 |     it('should return 400 when outputSpec is missing', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:151:31)

  ● POST /api/export › Input Validation - Required Fields › should return 400 when outputSpec is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      163 |
      164 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 165 |       expect(response.status).toBe(400);
          |                               ^
      166 |     });
      167 |
      168 |     it('should return 400 when all fields are missing', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:165:31)

  ● POST /api/export › Input Validation - Required Fields › should return 400 when all fields are missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      174 |
      175 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 176 |       expect(response.status).toBe(400);
          |                               ^
      177 |     });
      178 |   });
      179 |

      at Object.toBe (__tests__/api/export/export.test.ts:176:31)

  ● POST /api/export › Timeline Validation › should return 400 when timeline.clips is not an array

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      198 |
      199 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 200 |       expect(response.status).toBe(400);
          |                               ^
      201 |     });
      202 |
      203 |     it('should return 400 when clips is missing', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:200:31)

  ● POST /api/export › Timeline Validation › should return 400 when clips is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      220 |
      221 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 222 |       expect(response.status).toBe(400);
          |                               ^
      223 |     });
      224 |   });
      225 |

      at Object.toBe (__tests__/api/export/export.test.ts:222:31)

  ● POST /api/export › ProjectId Validation › should return 400 for invalid projectId UUID

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      244 |
      245 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 246 |       expect(response.status).toBe(400);
          |                               ^
      247 |     });
      248 |   });
      249 |

      at Object.toBe (__tests__/api/export/export.test.ts:246:31)

  ● POST /api/export › OutputSpec Validation - Format › should return 400 for invalid format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      268 |
      269 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 270 |       expect(response.status).toBe(400);
          |                               ^
      271 |     });
      272 |   });
      273 |

      at Object.toBe (__tests__/api/export/export.test.ts:270:31)

  ● POST /api/export › OutputSpec Validation - Dimensions › should return 400 for width below minimum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      292 |
      293 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 294 |       expect(response.status).toBe(400);
          |                               ^
      295 |     });
      296 |
      297 |     it('should return 400 for width above maximum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:294:31)

  ● POST /api/export › OutputSpec Validation - Dimensions › should return 400 for width above maximum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      314 |
      315 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 316 |       expect(response.status).toBe(400);
          |                               ^
      317 |     });
      318 |
      319 |     it('should return 400 for height below minimum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:316:31)

  ● POST /api/export › OutputSpec Validation - Dimensions › should return 400 for height below minimum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      336 |
      337 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 338 |       expect(response.status).toBe(400);
          |                               ^
      339 |     });
      340 |
      341 |     it('should return 400 for height above maximum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:338:31)

  ● POST /api/export › OutputSpec Validation - Dimensions › should return 400 for height above maximum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      358 |
      359 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 360 |       expect(response.status).toBe(400);
          |                               ^
      361 |     });
      362 |
      363 |     it('should return 400 for negative width', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:360:31)

  ● POST /api/export › OutputSpec Validation - Dimensions › should return 400 for negative width

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      380 |
      381 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 382 |       expect(response.status).toBe(400);
          |                               ^
      383 |     });
      384 |
      385 |     it('should return 400 for negative height', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:382:31)

  ● POST /api/export › OutputSpec Validation - Dimensions › should return 400 for negative height

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      402 |
      403 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 404 |       expect(response.status).toBe(400);
          |                               ^
      405 |     });
      406 |   });
      407 |

      at Object.toBe (__tests__/api/export/export.test.ts:404:31)

  ● POST /api/export › OutputSpec Validation - FPS › should return 400 for fps below minimum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      426 |
      427 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 428 |       expect(response.status).toBe(400);
          |                               ^
      429 |     });
      430 |
      431 |     it('should return 400 for fps above maximum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:428:31)

  ● POST /api/export › OutputSpec Validation - FPS › should return 400 for fps above maximum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      448 |
      449 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 450 |       expect(response.status).toBe(400);
          |                               ^
      451 |     });
      452 |   });
      453 |

      at Object.toBe (__tests__/api/export/export.test.ts:450:31)

  ● POST /api/export › OutputSpec Validation - Bitrates › should return 400 for vBitrateK below minimum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      472 |
      473 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 474 |       expect(response.status).toBe(400);
          |                               ^
      475 |     });
      476 |
      477 |     it('should return 400 for vBitrateK above maximum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:474:31)

  ● POST /api/export › OutputSpec Validation - Bitrates › should return 400 for vBitrateK above maximum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      494 |
      495 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 496 |       expect(response.status).toBe(400);
          |                               ^
      497 |     });
      498 |
      499 |     it('should return 400 for aBitrateK below minimum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:496:31)

  ● POST /api/export › OutputSpec Validation - Bitrates › should return 400 for aBitrateK below minimum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      516 |
      517 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 518 |       expect(response.status).toBe(400);
          |                               ^
      519 |     });
      520 |
      521 |     it('should return 400 for aBitrateK above maximum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:518:31)

  ● POST /api/export › OutputSpec Validation - Bitrates › should return 400 for aBitrateK above maximum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      538 |
      539 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 540 |       expect(response.status).toBe(400);
          |                               ^
      541 |     });
      542 |   });
      543 |

      at Object.toBe (__tests__/api/export/export.test.ts:540:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with invalid id UUID

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      573 |
      574 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 575 |       expect(response.status).toBe(400);
          |                               ^
      576 |     });
      577 |
      578 |     it('should return 400 for clip with invalid assetId UUID', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:575:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with invalid assetId UUID

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      606 |
      607 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 608 |       expect(response.status).toBe(400);
          |                               ^
      609 |     });
      610 |
      611 |     it('should return 400 for clip with negative start time', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:608:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with negative start time

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      639 |
      640 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 641 |       expect(response.status).toBe(400);
          |                               ^
      642 |     });
      643 |
      644 |     it('should return 400 for clip with end <= start', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:641:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with end <= start

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      672 |
      673 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 674 |       expect(response.status).toBe(400);
          |                               ^
      675 |     });
      676 |
      677 |     it('should return 400 for clip with end < start', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:674:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with end < start

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      705 |
      706 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 707 |       expect(response.status).toBe(400);
          |                               ^
      708 |     });
      709 |
      710 |     it('should return 400 for clip with negative timelinePosition', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:707:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with negative timelinePosition

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      738 |
      739 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 740 |       expect(response.status).toBe(400);
          |                               ^
      741 |     });
      742 |
      743 |     it('should return 400 for clip with negative trackIndex', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:740:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with negative trackIndex

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      771 |
      772 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 773 |       expect(response.status).toBe(400);
          |                               ^
      774 |     });
      775 |   });
      776 |

      at Object.toBe (__tests__/api/export/export.test.ts:773:31)

  ● POST /api/export › Clip Optional Fields Validation › should return 400 for invalid volume (above max)

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      807 |
      808 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 809 |       expect(response.status).toBe(400);
          |                               ^
      810 |     });
      811 |
      812 |     it('should return 400 for invalid volume (negative)', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:809:31)

  ● POST /api/export › Clip Optional Fields Validation › should return 400 for invalid volume (negative)

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      841 |
      842 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 843 |       expect(response.status).toBe(400);
          |                               ^
      844 |     });
      845 |
      846 |     it('should return 400 for invalid opacity (above max)', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:843:31)

  ● POST /api/export › Clip Optional Fields Validation › should return 400 for invalid opacity (above max)

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      875 |
      876 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 877 |       expect(response.status).toBe(400);
          |                               ^
      878 |     });
      879 |
      880 |     it('should return 400 for invalid opacity (negative)', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:877:31)

  ● POST /api/export › Clip Optional Fields Validation › should return 400 for invalid opacity (negative)

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      909 |
      910 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 911 |       expect(response.status).toBe(400);
          |                               ^
      912 |     });
      913 |
      914 |     it('should return 400 for invalid speed (below min)', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:911:31)

  ● POST /api/export › Clip Optional Fields Validation › should return 400 for invalid speed (below min)

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      943 |
      944 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 945 |       expect(response.status).toBe(400);
          |                               ^
      946 |     });
      947 |
      948 |     it('should return 400 for invalid speed (above max)', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:945:31)

  ● POST /api/export › Clip Optional Fields Validation › should return 400 for invalid speed (above max)

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      977 |
      978 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 979 |       expect(response.status).toBe(400);
          |                               ^
      980 |     });
      981 |   });
      982 |

      at Object.toBe (__tests__/api/export/export.test.ts:979:31)

  ● POST /api/export › Transition Validation › should return 400 for invalid transition type

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      1016 |
      1017 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1018 |       expect(response.status).toBe(400);
           |                               ^
      1019 |     });
      1020 |
      1021 |     it('should return 400 for negative transition duration', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:1018:31)

  ● POST /api/export › Transition Validation › should return 400 for negative transition duration

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      1053 |
      1054 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1055 |       expect(response.status).toBe(400);
           |                               ^
      1056 |     });
      1057 |   });
      1058 |

      at Object.toBe (__tests__/api/export/export.test.ts:1055:31)

  ● POST /api/export › Project Ownership Verification › should return error when user does not own project

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 429

      1095 |
      1096 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1097 |       expect(response.status).toBe(404);
           |                               ^
      1098 |     });
      1099 |
      1100 |     it('should return 403 when user lacks permission', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:1097:31)

  ● POST /api/export › Project Ownership Verification › should return 403 when user lacks permission

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 429

      1135 |
      1136 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1137 |       expect(response.status).toBe(403);
           |                               ^
      1138 |     });
      1139 |   });
      1140 |

      at Object.toBe (__tests__/api/export/export.test.ts:1137:31)

  ● POST /api/export › Database Errors › should return 500 when job creation fails

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 429

      1175 |
      1176 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1177 |       expect(response.status).toBe(500);
           |                               ^
      1178 |     });
      1179 |   });
      1180 |

      at Object.toBe (__tests__/api/export/export.test.ts:1177:31)

  ● POST /api/export › Success Cases › should create export job successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 202
    Received: 429

      1219 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      1220 |
    > 1221 |       expect(response.status).toBe(202);
           |                               ^
      1222 |       const data = await response.json();
      1223 |       expect(data.jobId).toBe('550e8400-e29b-41d4-a716-446655440000');
      1224 |       expect(data.status).toBe('queued');

      at Object.toBe (__tests__/api/export/export.test.ts:1221:31)

  ● POST /api/export › Success Cases › should accept empty clips array

    expect(received).toBe(expected) // Object.is equality

    Expected: 202
    Received: 429

      1252 |
      1253 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1254 |       expect(response.status).toBe(202);
           |                               ^
      1255 |     });
      1256 |
      1257 |     it('should accept webm format', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:1254:31)

  ● POST /api/export › Success Cases › should accept webm format

    expect(received).toBe(expected) // Object.is equality

    Expected: 202
    Received: 429

      1282 |
      1283 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1284 |       expect(response.status).toBe(202);
           |                               ^
      1285 |     });
      1286 |   });
      1287 | });

      at Object.toBe (__tests__/api/export/export.test.ts:1284:31)

  ● GET /api/export › Input Validation › should return 400 when jobId is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      1322 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1323 |
    > 1324 |       expect(response.status).toBe(400);
           |                               ^
      1325 |     });
      1326 |
      1327 |     it('should return 400 for invalid jobId UUID', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:1324:31)

  ● GET /api/export › Input Validation › should return 400 for invalid jobId UUID

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      1330 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1331 |
    > 1332 |       expect(response.status).toBe(400);
           |                               ^
      1333 |     });
      1334 |
      1335 |     it('should return 400 for empty jobId', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:1332:31)

  ● GET /api/export › Input Validation › should return 400 for empty jobId

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      1338 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1339 |
    > 1340 |       expect(response.status).toBe(400);
           |                               ^
      1341 |     });
      1342 |   });
      1343 |

      at Object.toBe (__tests__/api/export/export.test.ts:1340:31)

  ● GET /api/export › Job Not Found › should return 404 when job does not exist

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      1355 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1356 |
    > 1357 |       expect(response.status).toBe(404);
           |                               ^
      1358 |     });
      1359 |
      1360 |     it('should return 404 when job belongs to different user', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:1357:31)

  ● GET /api/export › Job Not Found › should return 404 when job belongs to different user

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      1370 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1371 |
    > 1372 |       expect(response.status).toBe(404);
           |                               ^
      1373 |     });
      1374 |   });
      1375 |

      at Object.toBe (__tests__/api/export/export.test.ts:1372:31)

  ● GET /api/export › Success Cases - Job Status Mapping › should get export job with pending status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1391 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1392 |
    > 1393 |       expect(response.status).toBe(200);
           |                               ^
      1394 |       const data = await response.json();
      1395 |       expect(data.status).toBe('queued');
      1396 |     });

      at Object.toBe (__tests__/api/export/export.test.ts:1393:31)

  ● GET /api/export › Success Cases - Job Status Mapping › should get export job with processing status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1412 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1413 |
    > 1414 |       expect(response.status).toBe(200);
           |                               ^
      1415 |       const data = await response.json();
      1416 |       expect(data.status).toBe('processing');
      1417 |       expect(data.message).toContain('50%');

      at Object.toBe (__tests__/api/export/export.test.ts:1414:31)

  ● GET /api/export › Success Cases - Job Status Mapping › should get export job with completed status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1434 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1435 |
    > 1436 |       expect(response.status).toBe(200);
           |                               ^
      1437 |       const data = await response.json();
      1438 |       expect(data.status).toBe('completed');
      1439 |       expect(data.message).toContain('completed successfully');

      at Object.toBe (__tests__/api/export/export.test.ts:1436:31)

  ● GET /api/export › Success Cases - Job Status Mapping › should get export job with failed status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1457 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1458 |
    > 1459 |       expect(response.status).toBe(200);
           |                               ^
      1460 |       const data = await response.json();
      1461 |       expect(data.status).toBe('failed');
      1462 |       expect(data.message).toContain('Encoding failed');

      at Object.toBe (__tests__/api/export/export.test.ts:1459:31)

  ● GET /api/export › Success Cases - Job Status Mapping › should get export job with cancelled status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1479 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1480 |
    > 1481 |       expect(response.status).toBe(200);
           |                               ^
      1482 |       const data = await response.json();
      1483 |       expect(data.status).toBe('failed'); // Cancelled maps to failed
      1484 |     });

      at Object.toBe (__tests__/api/export/export.test.ts:1481:31)

  ● GET /api/export › Success Cases - Job Status Mapping › should handle failed job without error message

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1501 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1502 |
    > 1503 |       expect(response.status).toBe(200);
           |                               ^
      1504 |       const data = await response.json();
      1505 |       expect(data.message).toContain('Unknown error');
      1506 |     });

      at Object.toBe (__tests__/api/export/export.test.ts:1503:31)

  ● GET /api/export › Edge Cases › should handle job with unknown status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1524 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1525 |
    > 1526 |       expect(response.status).toBe(200);
           |                               ^
      1527 |       const data = await response.json();
      1528 |       expect(data.status).toBe('queued'); // Default mapping
      1529 |     });

      at Object.toBe (__tests__/api/export/export.test.ts:1526:31)

{"level":30,"time":1761339441757,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":40,"time":1761339441758,"env":"development","service":"genai-video-production","event":"api.unauthorized","route":"/api/video/status","method":"GET","duration":2,"error":"Not authenticated","msg":"GET /api/video/status - Unauthorized (2ms)"}
{"level":40,"time":1761339441761,"env":"development","service":"genai-video-production","event":"audit.log.supabase_unavailable","action":"security.unauthorized_access","userId":null,"msg":"Supabase not configured, audit log not persisted"}
{"level":30,"time":1761339441761,"env":"development","service":"genai-video-production","event":"audit.log.fallback","userId":null,"action":"security.unauthorized_access","metadata":{"securityEvent":true,"route":"/api/video/status","method":"GET","error":"Not authenticated"},"request":{},"statusCode":403,"msg":"Audit: security.unauthorized_access"}
{"level":30,"time":1761339441818,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":40,"time":1761339441818,"env":"development","service":"genai-video-production","event":"api.rate_limited","route":"/api/video/status","method":"GET","userId":"test-user-id","identifier":"user:test-user-id","limit":30,"resetAt":1761339501818,"msg":"GET /api/video/status - Rate limit exceeded"}
{"level":40,"time":1761339441819,"env":"development","service":"genai-video-production","event":"audit.log.supabase_unavailable","action":"rate_limit.exceeded","userId":"test-user-id","msg":"Supabase not configured, audit log not persisted"}
{"level":30,"time":1761339441819,"env":"development","service":"genai-video-production","event":"audit.log.fallback","userId":"test-user-id","action":"rate_limit.exceeded","metadata":{"limitType":"user:test-user-id","route":"/api/video/status","limit":30,"remaining":0,"resetAt":1761339501818},"request":{},"statusCode":429,"msg":"Audit: rate_limit.exceeded"}
{"level":30,"time":1761339441826,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441827,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441827,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":40,"time":1761339441827,"env":"development","service":"genai-video-production","event":"video.status.validation_error","userId":"test-user-id","field":"operationName","error":"operationName is required","msg":"Validation error: operationName is required"}
{"level":40,"time":1761339441828,"env":"development","service":"genai-video-production","event":"api.error_response","statusCode":400,"field":"operationName","msg":"operationName is required"}
{"level":40,"time":1761339441835,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.client_error","status":400,"duration":8,"msg":"GET /api/video/status - Client error 400 (8ms)"}
{"level":30,"time":1761339441841,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441841,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441841,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":40,"time":1761339441842,"env":"development","service":"genai-video-production","event":"video.status.validation_error","userId":"test-user-id","field":"projectId","error":"projectId must be a string","msg":"Validation error: projectId must be a string"}
{"level":40,"time":1761339441842,"env":"development","service":"genai-video-production","event":"api.error_response","statusCode":400,"field":"projectId","msg":"projectId must be a string"}
FAIL __tests__/api/payments/checkout.test.ts
  ● POST /api/stripe/checkout › Authentication › should return 401 when user is not authenticated

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      82 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      83 |
    > 84 |       expect(response.status).toBe(401);
         |                               ^
      85 |       const data = await response.json();
      86 |       expect(data.error).toBe('Unauthorized');
      87 |     });

      at Object.toBe (__tests__/api/payments/checkout.test.ts:84:31)

  ● POST /api/stripe/checkout › Authentication › should return 401 when auth error occurs

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

       99 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      100 |
    > 101 |       expect(response.status).toBe(401);
          |                               ^
      102 |     });
      103 |   });
      104 |

      at Object.toBe (__tests__/api/payments/checkout.test.ts:101:31)

  ● POST /api/stripe/checkout › User Profile Validation › should return 500 when user profile not found

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to fetch user profile"
    Received: "`cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context"

      117 |       expect(response.status).toBe(500);
      118 |       const data = await response.json();
    > 119 |       expect(data.error).toBe('Failed to fetch user profile');
          |                          ^
      120 |     });
      121 |
      122 |     it('should return 400 when user already has active subscription', async () => {

      at Object.toBe (__tests__/api/payments/checkout.test.ts:119:26)

  ● POST /api/stripe/checkout › User Profile Validation › should return 400 when user already has active subscription

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      136 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      137 |
    > 138 |       expect(response.status).toBe(400);
          |                               ^
      139 |       const data = await response.json();
      140 |       expect(data.error).toBe('You already have an active subscription');
      141 |     });

      at Object.toBe (__tests__/api/payments/checkout.test.ts:138:31)

  ● POST /api/stripe/checkout › User Profile Validation › should allow checkout for free tier users

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      161 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      162 |
    > 163 |       expect(response.status).toBe(200);
          |                               ^
      164 |     });
      165 |
      166 |     it('should allow checkout for users with canceled subscriptions', async () => {

      at Object.toBe (__tests__/api/payments/checkout.test.ts:163:31)

  ● POST /api/stripe/checkout › User Profile Validation › should allow checkout for users with canceled subscriptions

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      184 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      185 |
    > 186 |       expect(response.status).toBe(200);
          |                               ^
      187 |     });
      188 |   });
      189 |

      at Object.toBe (__tests__/api/payments/checkout.test.ts:186:31)

  ● POST /api/stripe/checkout › Stripe Customer Creation › should create new Stripe customer when not exists

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"email": "test@example.com", "stripeCustomerId": null, "userId": "test-user-id"}

    Number of calls: 0

      216 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      217 |
    > 218 |       expect(getOrCreateStripeCustomer).toHaveBeenCalledWith({
          |                                         ^
      219 |         userId: mockUser.id,
      220 |         email: mockUser.email,
      221 |         stripeCustomerId: null,

      at Object.toHaveBeenCalledWith (__tests__/api/payments/checkout.test.ts:218:41)

  ● POST /api/stripe/checkout › Stripe Customer Creation › should use existing Stripe customer when available

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"email": "test@example.com", "stripeCustomerId": "cus_existing_123", "userId": "test-user-id"}

    Number of calls: 0

      247 |       await POST(mockRequest, { params: Promise.resolve({}) });
      248 |
    > 249 |       expect(getOrCreateStripeCustomer).toHaveBeenCalledWith({
          |                                         ^
      250 |         userId: mockUser.id,
      251 |         email: mockUser.email,
      252 |         stripeCustomerId: 'cus_existing_123',

      at Object.toHaveBeenCalledWith (__tests__/api/payments/checkout.test.ts:249:41)

  ● POST /api/stripe/checkout › Checkout Session Creation › should create checkout session with default price

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"cancelUrl": StringContaining "/settings", "customerId": "cus_test_123", "priceId": "price_test_premium", "successUrl": StringContaining "/settings?session_id=", "userId": "test-user-id"}

    Number of calls: 0

      277 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      278 |
    > 279 |       expect(createCheckoutSession).toHaveBeenCalledWith({
          |                                     ^
      280 |         customerId: 'cus_test_123',
      281 |         priceId: 'price_test_premium',
      282 |         userId: mockUser.id,

      at Object.toHaveBeenCalledWith (__tests__/api/payments/checkout.test.ts:279:37)

  ● POST /api/stripe/checkout › Checkout Session Creation › should create checkout session with custom price

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"priceId": "price_custom_123"}

    Number of calls: 0

      310 |       await POST(mockRequest, { params: Promise.resolve({}) });
      311 |
    > 312 |       expect(createCheckoutSession).toHaveBeenCalledWith(
          |                                     ^
      313 |         expect.objectContaining({
      314 |           priceId: 'price_custom_123',
      315 |         })

      at Object.toHaveBeenCalledWith (__tests__/api/payments/checkout.test.ts:312:37)

  ● POST /api/stripe/checkout › Checkout Session Creation › should return 500 when price ID not configured

    expect(received).toBe(expected) // Object.is equality

    Expected: "Price ID not configured"
    Received: "`cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context"

      339 |       expect(response.status).toBe(500);
      340 |       const data = await response.json();
    > 341 |       expect(data.error).toBe('Price ID not configured');
          |                          ^
      342 |     });
      343 |   });
      344 |

      at Object.toBe (__tests__/api/payments/checkout.test.ts:341:26)

  ● POST /api/stripe/checkout › Error Handling › should return 500 when Stripe API fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to create checkout session"
    Received: "`cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context"

      365 |       expect(response.status).toBe(500);
      366 |       const data = await response.json();
    > 367 |       expect(data.error).toBe('Failed to create checkout session');
          |                          ^
      368 |     });
      369 |
      370 |     it('should handle malformed JSON body', async () => {

      at Object.toBe (__tests__/api/payments/checkout.test.ts:367:26)

  ● POST /api/stripe/checkout › Response Format › should return sessionId and url

    expect(received).toHaveProperty(path, value)

    Expected path: "sessionId"
    Received path: []

    Expected value: "cs_test_456"
    Received value: {"error": "`cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context"}

      409 |       const data = await response.json();
      410 |
    > 411 |       expect(data).toHaveProperty('sessionId', 'cs_test_456');
          |                    ^
      412 |       expect(data).toHaveProperty('url', 'https://checkout.stripe.com/test456');
      413 |     });
      414 |   });

      at Object.toHaveProperty (__tests__/api/payments/checkout.test.ts:411:20)

  ● POST /api/stripe/checkout › URL Configuration › should use NEXT_PUBLIC_BASE_URL when available

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"cancelUrl": "https://example.com/settings", "successUrl": "https://example.com/settings?session_id={CHECKOUT_SESSION_ID}"}

    Number of calls: 0

      436 |       await POST(mockRequest, { params: Promise.resolve({}) });
      437 |
    > 438 |       expect(createCheckoutSession).toHaveBeenCalledWith(
          |                                     ^
      439 |         expect.objectContaining({
      440 |           successUrl: 'https://example.com/settings?session_id={CHECKOUT_SESSION_ID}',
      441 |           cancelUrl: 'https://example.com/settings',

      at Object.toHaveBeenCalledWith (__tests__/api/payments/checkout.test.ts:438:37)

  ● POST /api/stripe/checkout › URL Configuration › should fallback to request origin when BASE_URL not set

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"cancelUrl": StringContaining "http://localhost:3000/settings", "successUrl": StringContaining "http://localhost:3000/settings"}

    Number of calls: 0

      465 |       await POST(mockRequest, { params: Promise.resolve({}) });
      466 |
    > 467 |       expect(createCheckoutSession).toHaveBeenCalledWith(
          |                                     ^
      468 |         expect.objectContaining({
      469 |           successUrl: expect.stringContaining('http://localhost:3000/settings'),
      470 |           cancelUrl: expect.stringContaining('http://localhost:3000/settings'),

      at Object.toHaveBeenCalledWith (__tests__/api/payments/checkout.test.ts:467:37)

{"level":40,"time":1761339441844,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.client_error","status":400,"duration":4,"msg":"GET /api/video/status - Client error 400 (4ms)"}
{"level":30,"time":1761339441845,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441845,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441845,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":20,"time":1761339441845,"env":"development","service":"genai-video-production","event":"video.status.fal_processing","userId":"test-user-id","projectId":"550e8400-e29b-41d4-a716-446655440000","operationName":"fal:seedance-1.0-pro:request-123","msg":"FAL video still processing"}
{"level":30,"time":1761339441845,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.success","status":200,"duration":0,"msg":"GET /api/video/status - Success 200 (0ms)"}
{"level":30,"time":1761339441847,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441847,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441847,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":30,"time":1761339441847,"env":"development","service":"genai-video-production","event":"video.status.fal_completed","userId":"test-user-id","projectId":"550e8400-e29b-41d4-a716-446655440000","assetId":"asset-123","duration":0,"msg":"FAL video generation completed successfully in 0ms"}
{"level":30,"time":1761339441847,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.success","status":200,"duration":0,"msg":"GET /api/video/status - Success 200 (0ms)"}
{"level":30,"time":1761339441855,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441855,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441855,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441855,"env":"development","service":"genai-video-production","event":"video.status.fal_error","userId":"test-user-id","projectId":"550e8400-e29b-41d4-a716-446655440000","operationName":"fal:seedance-1.0-pro:request-123","error":"Generation failed","msg":"FAL video generation failed"}
{"level":30,"time":1761339441860,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.success","status":200,"duration":5,"msg":"GET /api/video/status - Success 200 (5ms)"}
{"level":30,"time":1761339441860,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441860,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441860,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":40,"time":1761339441860,"env":"development","service":"genai-video-production","event":"api.error_response","statusCode":400,"field":"operationName","msg":"Invalid FAL operation name format"}
{"level":40,"time":1761339441861,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.client_error","status":400,"duration":1,"msg":"GET /api/video/status - Client error 400 (1ms)"}
{"level":30,"time":1761339441887,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441887,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441887,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":20,"time":1761339441887,"env":"development","service":"genai-video-production","event":"video.status.veo_processing","userId":"test-user-id","projectId":"550e8400-e29b-41d4-a716-446655440000","operationName":"operations/veo-123","progress":50,"msg":"Veo video still processing"}
{"level":30,"time":1761339441887,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.success","status":200,"duration":0,"msg":"GET /api/video/status - Success 200 (0ms)"}
{"level":30,"time":1761339441889,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441889,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441889,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":30,"time":1761339441889,"env":"development","service":"genai-video-production","event":"video.status.veo_completed","userId":"test-user-id","projectId":"550e8400-e29b-41d4-a716-446655440000","assetId":"asset-123","duration":0,"msg":"Veo video generation completed successfully in 0ms"}
{"level":30,"time":1761339441890,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.success","status":200,"duration":1,"msg":"GET /api/video/status - Success 200 (1ms)"}
{"level":30,"time":1761339441892,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441892,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441892,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441894,"env":"development","service":"genai-video-production","event":"api.exception","route":"/api/video/status","method":"GET","duration":2,"error":{"type":"Error","message":"error:1E08010C:DECODER routines::unsupported","stack":"Error: error:1E08010C:DECODER routines::unsupported\n    at Sign.sign (node:internal/crypto/sig:128:29)\n    at Object.sign (/Users/davidchen/Projects/non-linear-editor/node_modules/jwa/index.js:166:45)\n    at Object.jwsSign [as sign] (/Users/davidchen/Projects/non-linear-editor/node_modules/jws/lib/sign-stream.js:32:24)\n    at GoogleToken.<anonymous> (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:407:27)\n    at Generator.<anonymous> (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:36:1660)\n    at Generator.next (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:37:362)\n    at asyncGeneratorStep (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:38:70)\n    at _next (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:39:163)\n    at /Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:39:299\n    at new Promise (<anonymous>)\n    at GoogleToken.<anonymous> (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:39:90)\n    at GoogleToken._requestToken2 (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:449:25)\n    at GoogleToken._requestToken (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:389:25)\n    at GoogleToken.<anonymous> (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:315:92)\n    at Generator.<anonymous> (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:36:1660)\n    at Generator.next (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:37:362)\n    at asyncGeneratorStep (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:38:70)\n    at _next (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:39:163)\n    at /Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:39:299\n    at new Promise (<anonymous>)\n    at GoogleToken.<anonymous> (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:39:90)\n    at GoogleToken._getTokenAsyncInner2 (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:319:31)\n    at GoogleToken._getTokenAsyncInner (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:281:31)\n    at GoogleToken.<anonymous> (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:266:129)\n    at Generator.<anonymous> (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:36:1660)\n    at Generator.next (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:37:362)\n    at asyncGeneratorStep (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:38:70)\n    at _next (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:39:163)\n    at /Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:39:299\n    at new Promise (<anonymous>)\n    at GoogleToken.<anonymous> (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:39:90)\n    at GoogleToken._getTokenAsync2 (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:278:26)\n    at GoogleToken._getTokenAsync (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:251:26)\n    at GoogleToken.getToken (/Users/davidchen/Projects/non-linear-editor/node_modules/gtoken/build/cjs/src/index.cjs:177:74)\n    at JWT.refreshTokenNoCache (/Users/davidchen/Projects/non-linear-editor/node_modules/google-auth-library/build/src/auth/jwtclient.js:188:36)\n    at JWT.refreshToken (/Users/davidchen/Projects/non-linear-editor/node_modules/google-auth-library/build/src/auth/oauth2client.js:228:24)\n    at JWT.refreshAccessTokenAsync (/Users/davidchen/Projects/non-linear-editor/node_modules/google-auth-library/build/src/auth/oauth2client.js:288:30)\n    at JWT.getAccessTokenAsync (/Users/davidchen/Projects/non-linear-editor/node_modules/google-auth-library/build/src/auth/oauth2client.js:317:34)\n    at JWT.getAccessToken (/Users/davidchen/Projects/non-linear-editor/node_modules/google-auth-library/build/src/auth/oauth2client.js:299:25)\n    at getAccessToken (/Users/davidchen/Projects/non-linear-editor/app/api/video/status/route.ts:299:38)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at /Users/davidchen/Projects/non-linear-editor/lib/api/withAuth.ts:235:24\n    at Object.<anonymous> (/Users/davidchen/Projects/non-linear-editor/__tests__/api/video/status.test.ts:377:24)","opensslErrorStack":["error:0688010A:asn1 encoding routines::nested asn1 error","error:06800066:asn1 encoding routines::bad object header","error:0680009B:asn1 encoding routines::too long","error:1E08010C:DECODER routines::unsupported"],"library":"DECODER routines","reason":"unsupported","code":"ERR_OSSL_UNSUPPORTED"},"msg":"GET /api/video/status - Exception (2ms)"}
{"level":30,"time":1761339441903,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441903,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441903,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441903,"env":"development","service":"genai-video-production","event":"video.status.veo_error","userId":"test-user-id","projectId":"550e8400-e29b-41d4-a716-446655440000","operationName":"operations/veo-123","error":"Generation failed","msg":"Veo video generation failed"}
{"level":30,"time":1761339441903,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.success","status":200,"duration":0,"msg":"GET /api/video/status - Success 200 (0ms)"}
{"level":30,"time":1761339441904,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441905,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441905,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":30,"time":1761339441905,"env":"development","service":"genai-video-production","event":"video.status.veo_completed","userId":"test-user-id","projectId":"550e8400-e29b-41d4-a716-446655440000","assetId":"asset-123","duration":0,"msg":"Veo video generation completed successfully in 0ms"}
{"level":30,"time":1761339441905,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.success","status":200,"duration":1,"msg":"GET /api/video/status - Success 200 (1ms)"}
{"level":30,"time":1761339441906,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441906,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441906,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441909,"env":"development","service":"genai-video-production","event":"api.exception","route":"/api/video/status","method":"GET","duration":0,"error":{"type":"Object","message":"Asset creation failed: Database error","stack":"Error: Asset creation failed: Database error\n    at createAssetWithCleanup (/Users/davidchen/Projects/non-linear-editor/lib/api/statusCheckHandler.ts:405:11)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at handleVideoStatus (/Users/davidchen/Projects/non-linear-editor/app/api/video/status/route.ts:345:19)\n    at /Users/davidchen/Projects/non-linear-editor/lib/api/withAuth.ts:235:24\n    at Object.<anonymous> (/Users/davidchen/Projects/non-linear-editor/__tests__/api/video/status.test.ts:475:24)","name":"Error"},"msg":"GET /api/video/status - Exception (0ms)"}
{"level":30,"time":1761339441910,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441910,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441910,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":30,"time":1761339441910,"env":"development","service":"genai-video-production","event":"video.status.veo_completed","userId":"test-user-id","projectId":"550e8400-e29b-41d4-a716-446655440000","assetId":"asset-123","duration":0,"msg":"Veo video generation completed successfully in 0ms"}
{"level":30,"time":1761339441910,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.success","status":200,"duration":0,"msg":"GET /api/video/status - Success 200 (0ms)"}
{"level":30,"time":1761339441911,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441911,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441911,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441920,"env":"development","service":"genai-video-production","event":"api.exception","route":"/api/video/status","method":"GET","duration":0,"error":{"type":"Object","message":"API error","stack":"Error: API error\n    at Object.<anonymous> (/Users/davidchen/Projects/non-linear-editor/__tests__/api/video/status.test.ts:516:46)\n    at Promise.finally.completed (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1557:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1497:10)\n    at _callCircusTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1007:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:947:3)\n    at /Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:849:7\n    at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:862:11)\n    at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:857:11)\n    at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:857:11)\n    at run (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:761:3)\n    at runAndTransformResultsToJestFormat (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1918:21)\n    at jestAdapter (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/runner.js:101:19)\n    at runTestInternal (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:275:16)\n    at runTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:343:7)\n    at Object.worker (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:497:12)","name":"Error"},"msg":"GET /api/video/status - Exception (0ms)"}
{"level":30,"time":1761339441930,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441934,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441934,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441934,"env":"development","service":"genai-video-production","event":"api.exception","route":"/api/video/status","method":"GET","duration":4,"error":{"type":"Object","message":"Storage upload failed: Storage error","stack":"HttpError: Storage upload failed: Storage error\n    at handleVideoStatus (/Users/davidchen/Projects/non-linear-editor/app/api/video/status/route.ts:339:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at /Users/davidchen/Projects/non-linear-editor/lib/api/withAuth.ts:235:24\n    at Object.<anonymous> (/Users/davidchen/Projects/non-linear-editor/__tests__/api/video/status.test.ts:553:24)","name":"HttpError"},"msg":"GET /api/video/status - Exception (4ms)"}
{"level":30,"time":1761339441936,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441936,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441936,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441937,"env":"development","service":"genai-video-production","event":"api.exception","route":"/api/video/status","method":"GET","duration":1,"error":{"type":"Object","message":"Quota exceeded","stack":"Error: Quota exceeded\n    at Object.<anonymous> (/Users/davidchen/Projects/non-linear-editor/__tests__/api/video/status.test.ts:561:30)\n    at Promise.finally.completed (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1557:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1497:10)\n    at _callCircusTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1007:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:947:3)\n    at /Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:849:7\n    at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:862:11)\n    at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:857:11)\n    at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:857:11)\n    at run (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:761:3)\n    at runAndTransformResultsToJestFormat (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1918:21)\n    at jestAdapter (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/runner.js:101:19)\n    at runTestInternal (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:275:16)\n    at runTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:343:7)\n    at Object.worker (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:497:12)","name":"Error"},"msg":"GET /api/video/status - Exception (1ms)"}
{"level":30,"time":1761339441938,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441938,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441938,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441938,"env":"development","service":"genai-video-production","event":"api.exception","route":"/api/video/status","method":"GET","duration":0,"error":{"type":"Object","message":"Rate limit exceeded on external service","stack":"Error: Rate limit exceeded on external service\n    at Object.<anonymous> (/Users/davidchen/Projects/non-linear-editor/__tests__/api/video/status.test.ts:579:30)\n    at Promise.finally.completed (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1557:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1497:10)\n    at _callCircusTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1007:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:947:3)\n    at /Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:849:7\n    at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:862:11)\n    at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:857:11)\n    at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:857:11)\n    at run (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:761:3)\n    at runAndTransformResultsToJestFormat (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1918:21)\n    at jestAdapter (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/runner.js:101:19)\n    at runTestInternal (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:275:16)\n    at runTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:343:7)\n    at Object.worker (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:497:12)","name":"Error"},"msg":"GET /api/video/status - Exception (0ms)"}
{"level":30,"time":1761339441939,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441939,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441939,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441939,"env":"development","service":"genai-video-production","event":"api.exception","route":"/api/video/status","method":"GET","duration":0,"error":{"type":"Object","message":"Invalid API key","stack":"Error: Invalid API key\n    at Object.<anonymous> (/Users/davidchen/Projects/non-linear-editor/__tests__/api/video/status.test.ts:597:25)\n    at Promise.finally.completed (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1557:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1497:10)\n    at _callCircusTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1007:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:947:3)\n    at /Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:849:7\n    at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:862:11)\n    at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:857:11)\n    at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:857:11)\n    at run (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:761:3)\n    at runAndTransformResultsToJestFormat (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1918:21)\n    at jestAdapter (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/runner.js:101:19)\n    at runTestInternal (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:275:16)\n    at runTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:343:7)\n    at Object.worker (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:497:12)","name":"Error"},"msg":"GET /api/video/status - Exception (0ms)"}
{"level":30,"time":1761339441940,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441940,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441940,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":40,"time":1761339441940,"env":"development","service":"genai-video-production","event":"video.status.validation_error","userId":"test-user-id","field":"operationName","error":"operationName is required","msg":"Validation error: operationName is required"}
{"level":40,"time":1761339441940,"env":"development","service":"genai-video-production","event":"api.error_response","statusCode":400,"field":"operationName","msg":"operationName is required"}
{"level":40,"time":1761339441940,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.client_error","status":400,"duration":0,"msg":"GET /api/video/status - Client error 400 (0ms)"}
{"level":30,"time":1761339441941,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441941,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441941,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":40,"time":1761339441941,"env":"development","service":"genai-video-production","event":"api.error_response","statusCode":400,"field":"operationName","msg":"Invalid FAL operation name format"}
{"level":40,"time":1761339441941,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.client_error","status":400,"duration":0,"msg":"GET /api/video/status - Client error 400 (0ms)"}
{"level":30,"time":1761339441941,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441941,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441941,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441949,"env":"development","service":"genai-video-production","event":"api.exception","route":"/api/video/status","method":"GET","duration":0,"error":{"type":"Object","message":"Failed to download FAL video: 404","stack":"HttpError: Failed to download FAL video: 404\n    at handleVideoStatus (/Users/davidchen/Projects/non-linear-editor/app/api/video/status/route.ts:150:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at /Users/davidchen/Projects/non-linear-editor/lib/api/withAuth.ts:235:24\n    at Object.<anonymous> (/Users/davidchen/Projects/non-linear-editor/__tests__/api/video/status.test.ts:662:24)","name":"HttpError"},"msg":"GET /api/video/status - Exception (0ms)"}
{"level":30,"time":1761339441950,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441950,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441950,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441950,"env":"development","service":"genai-video-production","event":"api.exception","route":"/api/video/status","method":"GET","duration":0,"error":{"type":"Object","message":"GOOGLE_SERVICE_ACCOUNT environment variable is required to download Veo output","stack":"HttpError: GOOGLE_SERVICE_ACCOUNT environment variable is required to download Veo output\n    at handleVideoStatus (/Users/davidchen/Projects/non-linear-editor/app/api/video/status/route.ts:286:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at /Users/davidchen/Projects/non-linear-editor/lib/api/withAuth.ts:235:24\n    at Object.<anonymous> (/Users/davidchen/Projects/non-linear-editor/__tests__/api/video/status.test.ts:690:24)","name":"HttpError"},"msg":"GET /api/video/status - Exception (0ms)"}
{"level":30,"time":1761339441951,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441951,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441951,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441951,"env":"development","service":"genai-video-production","event":"api.exception","route":"/api/video/status","method":"GET","duration":0,"error":{"type":"Object","message":"Invalid GCS URI returned by Veo","stack":"HttpError: Invalid GCS URI returned by Veo\n    at handleVideoStatus (/Users/davidchen/Projects/non-linear-editor/app/api/video/status/route.ts:281:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at /Users/davidchen/Projects/non-linear-editor/lib/api/withAuth.ts:235:24\n    at Object.<anonymous> (/Users/davidchen/Projects/non-linear-editor/__tests__/api/video/status.test.ts:729:24)","name":"HttpError"},"msg":"GET /api/video/status - Exception (0ms)"}
{"level":30,"time":1761339441951,"env":"development","service":"genai-video-production","event":"api.request","route":"/api/video/status","method":"GET","msg":"GET /api/video/status - Starting"}
{"level":20,"time":1761339441951,"env":"development","service":"genai-video-production","userId":"test-user-id","userEmail":"test@example.com","route":"/api/video/status","event":"api.authenticated","msg":"User authenticated successfully"}
{"level":30,"time":1761339441951,"env":"development","service":"genai-video-production","event":"video.status.request_started","msg":"Video status check request received"}
{"level":50,"time":1761339441952,"env":"development","service":"genai-video-production","event":"api.exception","route":"/api/video/status","method":"GET","duration":0,"error":{"type":"Object","message":"No downloadable video returned by Veo operation","stack":"HttpError: No downloadable video returned by Veo operation\n    at handleVideoStatus (/Users/davidchen/Projects/non-linear-editor/app/api/video/status/route.ts:325:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at /Users/davidchen/Projects/non-linear-editor/lib/api/withAuth.ts:235:24\n    at Object.<anonymous> (/Users/davidchen/Projects/non-linear-editor/__tests__/api/video/status.test.ts:752:24)","name":"HttpError"},"msg":"GET /api/video/status - Exception (0ms)"}
FAIL __tests__/api/video/status.test.ts
  ● Console

    console.error
      Error: Uncaught [TypeError: fastNowTimeout?.unref is not a function]
          at ignore-listed frames {
        detail: TypeError: fastNowTimeout?.unref is not a function
            at refreshTimeout (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/util/timers.js:205:21)
            at FastTimer.refresh (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/util/timers.js:297:7)
            at new FastTimer (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/util/timers.js:274:10)
            at Object.setFastTimeout (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/util/timers.js:376:12)
            at Object.setupConnectTimeout (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/core/util.js:842:32)
            at Client.connect (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/core/connect.js:107:38)
            at connect (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/dispatcher/client.js:419:21)
            at _resume (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/dispatcher/client.js:594:7)
            at resume (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/dispatcher/client.js:528:3)
            at /Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/dispatcher/client.js:307:28
            at invokeTheCallbackFunction (/Users/davidchen/Projects/non-linear-editor/node_modules/jsdom/lib/jsdom/living/generated/Function.js:19:26)
            at /Users/davidchen/Projects/non-linear-editor/node_modules/jsdom/lib/jsdom/browser/Window.js:613:9
            at node:internal/process/task_queues:151:7
            at AsyncResource.runInAsyncScope (node:async_hooks:214:14)
            at AsyncResource.runMicrotask (node:internal/process/task_queues:148:8)
            at processTicksAndRejections (node:internal/process/task_queues:105:5),
        type: 'unhandled exception'
      }

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at VirtualConsole.<anonymous> (node_modules/@jest/environment-jsdom-abstract/build/index.js:87:23)
      at reportException (node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:70:28)
      at node_modules/jsdom/lib/jsdom/browser/Window.js:615:9

    console.log
      NODE_ENV at test time: development

      at Object.log (__tests__/api/video/status.test.ts:178:15)

    console.log
      ✓ Sent 5 logs to Axiom

      at log (lib/axiomTransport.ts:104:21)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.log
      ✓ Sent 4 logs to Axiom

      at log (lib/axiomTransport.ts:104:21)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: response.text is not a function
          at text (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:98:44)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

    console.error
      Axiom transport error: TypeError: Cannot read properties of undefined (reading 'ok')
          at ok (/Users/davidchen/Projects/non-linear-editor/lib/axiomTransport.ts:97:23)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (lib/axiomTransport.ts:110:19)

  ● GET /api/video/status › Authentication › should return 401 when user is not authenticated

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "node" test environment.

    TypeError: fastNowTimeout?.unref is not a function

      at refreshTimeout (node_modules/undici/lib/util/timers.js:205:21)
      at FastTimer.refresh (node_modules/undici/lib/util/timers.js:297:7)
      at new FastTimer (node_modules/undici/lib/util/timers.js:274:10)
      at Object.setFastTimeout (node_modules/undici/lib/util/timers.js:376:12)
      at Object.setupConnectTimeout (node_modules/undici/lib/core/util.js:842:32)
      at Client.connect (node_modules/undici/lib/core/connect.js:107:38)
      at connect (node_modules/undici/lib/dispatcher/client.js:419:21)
      at _resume (node_modules/undici/lib/dispatcher/client.js:594:7)
      at resume (node_modules/undici/lib/dispatcher/client.js:528:3)
      at node_modules/undici/lib/dispatcher/client.js:307:28
      at invokeTheCallbackFunction (node_modules/jsdom/lib/jsdom/living/generated/Function.js:19:26)
      at node_modules/jsdom/lib/jsdom/browser/Window.js:613:9

  ● GET /api/video/status › Veo Video Status › should download Veo video from GCS URI

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      377 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      378 |
    > 379 |       expect(response.status).toBe(200);
          |                               ^
      380 |       const data = await response.json();
      381 |       expect(data.done).toBe(true);
      382 |

      at Object.toBe (__tests__/api/video/status.test.ts:379:31)

FAIL __tests__/api/assets/list.test.ts
  ● GET /api/assets › Successful Retrieval › should return assets for authenticated user

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Successful Retrieval › should filter by project ID

    ReferenceError: createMockRequest is not defined

      130 |       });
      131 |
    > 132 |       const mockRequest = createMockRequest({
          |                           ^
      133 |         url: `/api/assets?projectId=${projectId}`,
      134 |       });
      135 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:132:27)

  ● GET /api/assets › Successful Retrieval › should filter by project ID

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Successful Retrieval › should filter by asset type

    ReferenceError: createMockRequest is not defined

      163 |       });
      164 |
    > 165 |       const mockRequest = createMockRequest({
          |                           ^
      166 |         url: '/api/assets?type=video',
      167 |       });
      168 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:165:27)

  ● GET /api/assets › Successful Retrieval › should filter by asset type

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Pagination › should handle pagination parameters

    ReferenceError: mockUser is not defined

      184 |       const mockAssets = Array.from({ length: 10 }, (_, i) => ({
      185 |         id: `${i + 1}`,
    > 186 |         user_id: mockUser.id,
          |                  ^
      187 |         type: 'image',
      188 |         name: `asset${i + 1}.png`,
      189 |       }));

      at mockUser (__tests__/api/assets/list.test.ts:186:18)
          at Function.from (<anonymous>)
      at Object.from (__tests__/api/assets/list.test.ts:184:32)

  ● GET /api/assets › Pagination › should handle pagination parameters

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Pagination › should handle second page

    ReferenceError: createMockRequest is not defined

      243 |       });
      244 |
    > 245 |       const mockRequest = createMockRequest({
          |                           ^
      246 |         url: '/api/assets?page=1&pageSize=10',
      247 |       });
      248 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:245:27)

  ● GET /api/assets › Pagination › should handle second page

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Pagination › should handle last page

    ReferenceError: createMockRequest is not defined

      282 |       });
      283 |
    > 284 |       const mockRequest = createMockRequest({
          |                           ^
      285 |         url: '/api/assets?page=2&pageSize=10',
      286 |       });
      287 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:284:27)

  ● GET /api/assets › Pagination › should handle last page

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Validation › should reject invalid project ID

    ReferenceError: createMockRequest is not defined

      305 |     it('should reject invalid project ID', async () => {
      306 |       // Arrange
    > 307 |       const mockRequest = createMockRequest({
          |                           ^
      308 |         url: '/api/assets?projectId=invalid-uuid',
      309 |       });
      310 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:307:27)

  ● GET /api/assets › Validation › should reject invalid project ID

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Validation › should reject invalid asset type

    ReferenceError: createMockRequest is not defined

      322 |     it('should reject invalid asset type', async () => {
      323 |       // Arrange
    > 324 |       const mockRequest = createMockRequest({
          |                           ^
      325 |         url: '/api/assets?type=invalid-type',
      326 |       });
      327 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:324:27)

  ● GET /api/assets › Validation › should reject invalid asset type

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Validation › should reject negative page number

    ReferenceError: createMockRequest is not defined

      339 |     it('should reject negative page number', async () => {
      340 |       // Arrange
    > 341 |       const mockRequest = createMockRequest({
          |                           ^
      342 |         url: '/api/assets?page=-1',
      343 |       });
      344 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:341:27)

  ● GET /api/assets › Validation › should reject negative page number

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Validation › should reject invalid page size

    ReferenceError: createMockRequest is not defined

      358 |     it('should reject invalid page size', async () => {
      359 |       // Arrange
    > 360 |       const mockRequest = createMockRequest({
          |                           ^
      361 |         url: '/api/assets?pageSize=0',
      362 |       });
      363 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:360:27)

  ● GET /api/assets › Validation › should reject invalid page size

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Validation › should reject page size over limit

    ReferenceError: createMockRequest is not defined

      375 |     it('should reject page size over limit', async () => {
      376 |       // Arrange
    > 377 |       const mockRequest = createMockRequest({
          |                           ^
      378 |         url: '/api/assets?pageSize=200',
      379 |       });
      380 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:377:27)

  ● GET /api/assets › Validation › should reject page size over limit

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Validation › should reject non-integer page number

    ReferenceError: createMockRequest is not defined

      392 |     it('should reject non-integer page number', async () => {
      393 |       // Arrange
    > 394 |       const mockRequest = createMockRequest({
          |                           ^
      395 |         url: '/api/assets?page=1.5',
      396 |       });
      397 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:394:27)

  ● GET /api/assets › Validation › should reject non-integer page number

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Error Handling › should handle database errors

    ReferenceError: createMockRequest is not defined

      425 |       });
      426 |
    > 427 |       const mockRequest = createMockRequest({ url: '/api/assets' });
          |                           ^
      428 |
      429 |       // Act
      430 |       const response = await GET(mockRequest, {

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:427:27)

  ● GET /api/assets › Error Handling › should handle database errors

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Error Handling › should handle zero count

    ReferenceError: createMockRequest is not defined

      454 |       });
      455 |
    > 456 |       const mockRequest = createMockRequest({ url: '/api/assets' });
          |                           ^
      457 |
      458 |       // Act
      459 |       const response = await GET(mockRequest, {

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:456:27)

  ● GET /api/assets › Error Handling › should handle zero count

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Edge Cases › should handle empty asset list

    ReferenceError: createMockRequest is not defined

      488 |       });
      489 |
    > 490 |       const mockRequest = createMockRequest({ url: '/api/assets' });
          |                           ^
      491 |
      492 |       // Act
      493 |       const response = await GET(mockRequest, {

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:490:27)

  ● GET /api/assets › Edge Cases › should handle empty asset list

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Edge Cases › should handle null count from database

    ReferenceError: createMockRequest is not defined

      519 |       });
      520 |
    > 521 |       const mockRequest = createMockRequest({ url: '/api/assets' });
          |                           ^
      522 |
      523 |       // Act
      524 |       const response = await GET(mockRequest, {

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:521:27)

  ● GET /api/assets › Edge Cases › should handle null count from database

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Edge Cases › should accept all valid asset types

    ReferenceError: createMockRequest is not defined

      555 |         });
      556 |
    > 557 |         const mockRequest = createMockRequest({
          |                             ^
      558 |           url: `/api/assets?type=${type}`,
      559 |         });
      560 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:557:29)

  ● GET /api/assets › Edge Cases › should accept all valid asset types

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)


ReferenceError: You are trying to `import` a file after the Jest environment has been torn down. From __tests__/api/video/status.test.ts.

      at lazyllhttp (node_modules/undici/lib/dispatcher/client-h1.js:64:55)
      at connectH1 (node_modules/undici/lib/dispatcher/client-h1.js:778:22)
      at node_modules/undici/lib/dispatcher/client.js:444:11
      at TLSSocket.<anonymous> (node_modules/undici/lib/core/connect.js:117:11)

ReferenceError: You are trying to `import` a file after the Jest environment has been torn down. From __tests__/api/video/status.test.ts.

      at lazyllhttp (node_modules/undici/lib/dispatcher/client-h1.js:79:36)
      at connectH1 (node_modules/undici/lib/dispatcher/client-h1.js:778:22)
      at node_modules/undici/lib/dispatcher/client.js:444:11
      at TLSSocket.<anonymous> (node_modules/undici/lib/core/connect.js:117:11)
TypeError: Cannot read properties of null (reading '_location')
    at Window.get location [as location] (/Users/davidchen/Projects/non-linear-editor/node_modules/jsdom/lib/jsdom/browser/Window.js:420:79)
    at /Users/davidchen/Projects/non-linear-editor/node_modules/jsdom/lib/jsdom/browser/Window.js:615:43
    at node:internal/process/task_queues:151:7
    at AsyncResource.runInAsyncScope (node:async_hooks:214:14)
    at AsyncResource.runMicrotask (node:internal/process/task_queues:148:8)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
FAIL __tests__/api/projects/project-delete.test.ts
  ● DELETE /api/projects/[projectId] › Input Validation › should return 400 for invalid UUID format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      122 |       });
      123 |
    > 124 |       expect(response.status).toBe(400);
          |                               ^
      125 |       const data = await response.json();
      126 |       expect(data.error).toContain('UUID');
      127 |     });

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:124:31)

  ● DELETE /api/projects/[projectId] › Input Validation › should return 400 for empty projectId

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      135 |       });
      136 |
    > 137 |       expect(response.status).toBe(400);
          |                               ^
      138 |       const data = await response.json();
      139 |       expect(data.error).toContain('UUID');
      140 |     });

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:137:31)

  ● DELETE /api/projects/[projectId] › Input Validation › should return 400 for malformed UUID

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      151 |       });
      152 |
    > 153 |       expect(response.status).toBe(400);
          |                               ^
      154 |     });
      155 |   });
      156 |

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:153:31)

  ● DELETE /api/projects/[projectId] › Success Cases › should delete project successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      171 |       });
      172 |
    > 173 |       expect(response.status).toBe(200);
          |                               ^
      174 |       const data = await response.json();
      175 |       expect(data.success).toBe(true);
      176 |       expect(mockSupabase.from).toHaveBeenCalledWith('projects');

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:173:31)

  ● DELETE /api/projects/[projectId] › Success Cases › should call database methods in correct order

    expect(received).toBeLessThan(expected)

    Matcher error: received value must be a number or bigint

    Received has value: undefined

      198 |       const eqCall = mockSupabase.eq.mock.invocationCallOrder[0];
      199 |
    > 200 |       expect(fromCall).toBeLessThan(deleteCall);
          |                        ^
      201 |       expect(deleteCall).toBeLessThan(eqCall);
      202 |     });
      203 |

      at Object.toBeLessThan (__tests__/api/projects/project-delete.test.ts:200:24)

  ● DELETE /api/projects/[projectId] › Success Cases › should enforce RLS through ownership check

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      222 |
      223 |       // RLS enforcement happens at database level
    > 224 |       expect(mockSupabase.delete).toHaveBeenCalled();
          |                                   ^
      225 |     });
      226 |   });
      227 |

      at Object.toHaveBeenCalled (__tests__/api/projects/project-delete.test.ts:224:35)

  ● DELETE /api/projects/[projectId] › Error Handling › should return 500 when database delete fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to delete project"
    Received: "_serverLogger.serverLogger.child is not a function"

      244 |       expect(response.status).toBe(500);
      245 |       const data = await response.json();
    > 246 |       expect(data.error).toBe('Failed to delete project');
          |                          ^
      247 |     });
      248 |
      249 |     it('should return 500 when unexpected error occurs', async () => {

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:246:26)

  ● DELETE /api/projects/[projectId] › Error Handling › should return 500 when unexpected error occurs

    expect(received).toBe(expected) // Object.is equality

    Expected: "Internal server error"
    Received: "_serverLogger.serverLogger.child is not a function"

      263 |       expect(response.status).toBe(500);
      264 |       const data = await response.json();
    > 265 |       expect(data.error).toBe('Internal server error');
          |                          ^
      266 |     });
      267 |
      268 |     it('should handle database connection errors', async () => {

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:265:26)

  ● DELETE /api/projects/[projectId] › Cascading Deletes › should rely on database CASCADE to delete related resources

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      302 |
      303 |       // Only one delete operation - CASCADE handles related data
    > 304 |       expect(mockSupabase.from).toHaveBeenCalledTimes(1);
          |                                 ^
      305 |       expect(mockSupabase.from).toHaveBeenCalledWith('projects');
      306 |       expect(mockSupabase.delete).toHaveBeenCalledTimes(1);
      307 |     });

      at Object.toHaveBeenCalledTimes (__tests__/api/projects/project-delete.test.ts:304:33)

  ● DELETE /api/projects/[projectId] › Edge Cases › should handle deletion of non-existent project gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 429

      326 |
      327 |       // Should succeed (idempotent operation)
    > 328 |       expect(response.status).toBe(200);
          |                               ^
      329 |       const data = await response.json();
      330 |       expect(data.success).toBe(true);
      331 |     });

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:328:31)

  ● DELETE /api/projects/[projectId] › Edge Cases › should handle concurrent delete requests

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 429

      350 |       });
      351 |
    > 352 |       expect(response1.status).toBe(200);
          |                                ^
      353 |       expect(response2.status).toBe(200);
      354 |     });
      355 |   });

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:352:32)

  ● DELETE /api/projects/[projectId] › Security › should not allow deletion of projects owned by other users

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 429

      375 |
      376 |       // RLS ensures user can't delete other users' projects
    > 377 |       expect(response.status).toBe(200); // Success even if nothing deleted (idempotent)
          |                               ^
      378 |     });
      379 |   });
      380 | });

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:377:31)

FAIL __tests__/api/health.test.ts
  ● GET /api/health › Error Handling › should handle Date constructor errors gracefully

    Date constructor failed

      70 |       (global.Date as any) = class extends originalDate {
      71 |         constructor() {
    > 72 |           throw new Error('Date constructor failed');
         |                 ^
      73 |         }
      74 |       };
      75 |

      at new global.Date (__tests__/api/health.test.ts:72:17)
      at GET (app/api/health/route.ts:25:20)
      at Object.<anonymous> (__tests__/api/health.test.ts:77:35)

  ● GET /api/health › Non-Error Type Handling › should handle non-Error thrown values

    thrown: "String error"

      314 |
      315 |   describe('Non-Error Type Handling', () => {
    > 316 |     it('should handle non-Error thrown values', async () => {
          |     ^
      317 |       const originalDate = global.Date;
      318 |       (global.Date as any) = class {
      319 |         constructor() {

      at it (__tests__/api/health.test.ts:316:5)
      at describe (__tests__/api/health.test.ts:315:3)
      at Object.describe (__tests__/api/health.test.ts:7:1)

  ● GET /api/health › Non-Error Type Handling › should handle null thrown value

    thrown: null

      333 |     });
      334 |
    > 335 |     it('should handle null thrown value', async () => {
          |     ^
      336 |       const originalDate = global.Date;
      337 |       (global.Date as any) = class {
      338 |         constructor() {

      at it (__tests__/api/health.test.ts:335:5)
      at describe (__tests__/api/health.test.ts:315:3)
      at Object.describe (__tests__/api/health.test.ts:7:1)

  ● GET /api/health › Non-Error Type Handling › should handle undefined thrown value

    thrown: undefined

      351 |     });
      352 |
    > 353 |     it('should handle undefined thrown value', async () => {
          |     ^
      354 |       const originalDate = global.Date;
      355 |       (global.Date as any) = class {
      356 |         constructor() {

      at it (__tests__/api/health.test.ts:353:5)
      at describe (__tests__/api/health.test.ts:315:3)
      at Object.describe (__tests__/api/health.test.ts:7:1)

  ● GET /api/health › Non-Error Type Handling › should handle number thrown value

    thrown: 42

      369 |     });
      370 |
    > 371 |     it('should handle number thrown value', async () => {
          |     ^
      372 |       const originalDate = global.Date;
      373 |       (global.Date as any) = class {
      374 |         constructor() {

      at it (__tests__/api/health.test.ts:371:5)
      at describe (__tests__/api/health.test.ts:315:3)
      at Object.describe (__tests__/api/health.test.ts:7:1)

  ● GET /api/health › Non-Error Type Handling › should handle object thrown value

    thrown: Object {
      "code": 500,
      "msg": "Server error",
    }

      387 |     });
      388 |
    > 389 |     it('should handle object thrown value', async () => {
          |     ^
      390 |       const originalDate = global.Date;
      391 |       (global.Date as any) = class {
      392 |         constructor() {

      at it (__tests__/api/health.test.ts:389:5)
      at describe (__tests__/api/health.test.ts:315:3)
      at Object.describe (__tests__/api/health.test.ts:7:1)

FAIL __tests__/api/logs/logs.test.ts
  ● POST /api/logs › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:90:34)

  ● POST /api/logs › Authentication › should proceed when user is authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:115:34)

  ● POST /api/logs › Rate Limiting › should enforce tier4 rate limiting (60/min)

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:146:34)

  ● POST /api/logs › Input Validation › should reject non-array logs

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:165:34)

  ● POST /api/logs › Input Validation › should reject empty logs array

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:183:34)

  ● POST /api/logs › Input Validation › should reject more than 100 logs per request

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:206:34)

  ● POST /api/logs › Input Validation › should accept 1 to 100 logs

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:234:36)

  ● POST /api/logs › Size Limits › should reject log entry exceeding 10KB

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:259:34)

  ● POST /api/logs › Size Limits › should reject total request exceeding 100KB

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:285:34)

  ● POST /api/logs › Size Limits › should accept logs under size limits

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:313:34)

  ● POST /api/logs › Axiom Integration › should send logs to Axiom when configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:339:17)

  ● POST /api/logs › Axiom Integration › should enrich logs with userId

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:371:17)

  ● POST /api/logs › Axiom Integration › should add _time field for Axiom

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:403:17)

  ● POST /api/logs › Axiom Integration › should handle Axiom API failure gracefully

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:434:34)

  ● POST /api/logs › Axiom Integration › should return success when Axiom succeeds

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:460:34)

  ● POST /api/logs › Development Mode › should log to server logger in development when Axiom not configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:507:17)

  ● POST /api/logs › Development Mode › should return success in development mode without Axiom

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:561:34)

  ● POST /api/logs › Development Mode › should not call fetch when Axiom not configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:587:17)

  ● POST /api/logs › Log Fields › should accept logs with all optional fields

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:615:34)

  ● POST /api/logs › Log Fields › should handle different log levels

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:649:34)

  ● POST /api/logs › Error Handling › should return 500 on unexpected errors

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:664:34)

FAIL __tests__/api/audio/elevenlabs-voices.test.ts
  ● GET /api/audio/elevenlabs/voices › API Key Configuration › should return 500 when ELEVENLABS_API_KEY is not configured

    expect(received).toContain(expected) // indexOf

    Expected substring: "API key"
    Received string:    "_serverLogger.serverLogger.child is not a function"

       98 |       expect(response.status).toBe(500);
       99 |       const data = await response.json();
    > 100 |       expect(data.error).toContain('API key');
          |                          ^
      101 |     });
      102 |   });
      103 |

      at Object.toContain (__tests__/api/audio/elevenlabs-voices.test.ts:100:26)

  ● GET /api/audio/elevenlabs/voices › ElevenLabs API Integration › should call ElevenLabs API with correct headers

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "https://api.elevenlabs.io/v1/voices", ObjectContaining {"headers": ObjectContaining {"xi-api-key": "test-elevenlabs-key"}, "method": "GET"}

    Number of calls: 0

      112 |       } as any);
      113 |
    > 114 |       expect(global.fetch).toHaveBeenCalledWith(
          |                            ^
      115 |         'https://api.elevenlabs.io/v1/voices',
      116 |         expect.objectContaining({
      117 |           method: 'GET',

      at Object.toHaveBeenCalledWith (__tests__/api/audio/elevenlabs-voices.test.ts:114:28)

  ● GET /api/audio/elevenlabs/voices › ElevenLabs API Integration › should handle ElevenLabs API errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      138 |       } as any);
      139 |
    > 140 |       expect(response.status).toBe(401);
          |                               ^
      141 |       const data = await response.json();
      142 |       expect(data.error).toContain('Failed to fetch voices');
      143 |     });

      at Object.toBe (__tests__/api/audio/elevenlabs-voices.test.ts:140:31)

  ● GET /api/audio/elevenlabs/voices › ElevenLabs API Integration › should handle API timeout

    expect(received).toBe(expected) // Object.is equality

    Expected: 504
    Received: 500

      158 |       } as any);
      159 |
    > 160 |       expect(response.status).toBe(504);
          |                               ^
      161 |       const data = await response.json();
      162 |       expect(data.error).toContain('timeout');
      163 |     });

      at Object.toBe (__tests__/api/audio/elevenlabs-voices.test.ts:160:31)

  ● GET /api/audio/elevenlabs/voices › ElevenLabs API Integration › should handle network errors

    expect(received).toBe(expected) // Object.is equality

    Expected: "Internal server error"
    Received: "_serverLogger.serverLogger.child is not a function"

      176 |       expect(response.status).toBe(500);
      177 |       const data = await response.json();
    > 178 |       expect(data.error).toBe('Internal server error');
          |                          ^
      179 |     });
      180 |   });
      181 |

      at Object.toBe (__tests__/api/audio/elevenlabs-voices.test.ts:178:26)

  ● GET /api/audio/elevenlabs/voices › Success Cases › should return list of voices successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      190 |       } as any);
      191 |
    > 192 |       expect(response.status).toBe(200);
          |                               ^
      193 |       const data = await response.json();
      194 |       expect(data.voices).toBeDefined();
      195 |       expect(data.voices).toHaveLength(2);

      at Object.toBe (__tests__/api/audio/elevenlabs-voices.test.ts:192:31)

  ● GET /api/audio/elevenlabs/voices › Success Cases › should handle voices with optional fields

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      222 |       } as any);
      223 |
    > 224 |       expect(response.status).toBe(200);
          |                               ^
      225 |       const data = await response.json();
      226 |       expect(data.voices).toHaveLength(1);
      227 |       expect(data.voices[0].description).toBeUndefined();

      at Object.toBe (__tests__/api/audio/elevenlabs-voices.test.ts:224:31)

  ● GET /api/audio/elevenlabs/voices › Success Cases › should handle empty voices array

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      245 |       } as any);
      246 |
    > 247 |       expect(response.status).toBe(200);
          |                               ^
      248 |       const data = await response.json();
      249 |       expect(data.voices).toEqual([]);
      250 |     });

      at Object.toBe (__tests__/api/audio/elevenlabs-voices.test.ts:247:31)

  ● GET /api/audio/elevenlabs/voices › Response Format › should include all voice fields

    TypeError: Cannot read properties of undefined (reading '0')

      262 |
      263 |       const data = await response.json();
    > 264 |       const voice = data.voices[0];
          |                                ^
      265 |
      266 |       expect(voice).toHaveProperty('voice_id');
      267 |       expect(voice).toHaveProperty('name');

      at Object.<anonymous> (__tests__/api/audio/elevenlabs-voices.test.ts:264:32)

FAIL __tests__/api/projects/chat-messages.test.ts
  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 for invalid UUID format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      117 |       });
      118 |
    > 119 |       expect(response.status).toBe(400);
          |                               ^
      120 |       const data = await response.json();
      121 |       expect(data.error).toContain('UUID');
      122 |     });

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:119:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 when role is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      136 |       });
      137 |
    > 138 |       expect(response.status).toBe(400);
          |                               ^
      139 |       const data = await response.json();
      140 |       expect(data.error).toContain('Missing required fields');
      141 |     });

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:138:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 when content is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      155 |       });
      156 |
    > 157 |       expect(response.status).toBe(400);
          |                               ^
      158 |       const data = await response.json();
      159 |       expect(data.error).toContain('Missing required fields');
      160 |     });

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:157:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 when role is empty string

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      174 |       });
      175 |
    > 176 |       expect(response.status).toBe(400);
          |                               ^
      177 |       const data = await response.json();
      178 |       expect(data.error).toContain('Missing required fields');
      179 |     });

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:176:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 when content is empty string

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      193 |       });
      194 |
    > 195 |       expect(response.status).toBe(400);
          |                               ^
      196 |       const data = await response.json();
      197 |       expect(data.error).toContain('Missing required fields');
      198 |     });

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:195:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 for invalid role value

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      212 |       });
      213 |
    > 214 |       expect(response.status).toBe(400);
          |                               ^
      215 |       const data = await response.json();
      216 |       expect(data.error).toContain('Invalid role');
      217 |       expect(data.error).toContain('user');

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:214:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 when role is not a string

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      233 |       });
      234 |
    > 235 |       expect(response.status).toBe(400);
          |                               ^
      236 |     });
      237 |
      238 |     it('should return 400 when content is not a string', async () => {

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:235:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 when content is not a string

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      250 |       });
      251 |
    > 252 |       expect(response.status).toBe(400);
          |                               ^
      253 |     });
      254 |   });
      255 |

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:252:31)

  ● POST /api/projects/[projectId]/chat/messages › Success Cases › should create a user message successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      284 |       });
      285 |
    > 286 |       expect(response.status).toBe(201);
          |                               ^
      287 |       const data = await response.json();
      288 |       expect(data.message).toEqual(mockMessage);
      289 |       expect(mockSupabase.from).toHaveBeenCalledWith('chat_messages');

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:286:31)

  ● POST /api/projects/[projectId]/chat/messages › Success Cases › should create an assistant message successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      330 |       });
      331 |
    > 332 |       expect(response.status).toBe(201);
          |                               ^
      333 |       const data = await response.json();
      334 |       expect(data.message.role).toBe('assistant');
      335 |       expect(data.message.model).toBe('gemini-pro');

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:332:31)

  ● POST /api/projects/[projectId]/chat/messages › Success Cases › should handle optional model field

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      362 |       });
      363 |
    > 364 |       expect(response.status).toBe(201);
          |                               ^
      365 |       expect(mockSupabase.insert).toHaveBeenCalledWith(
      366 |         expect.objectContaining({
      367 |           model: null,

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:364:31)

  ● POST /api/projects/[projectId]/chat/messages › Success Cases › should handle optional attachments field

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      390 |       });
      391 |
    > 392 |       expect(response.status).toBe(201);
          |                               ^
      393 |       expect(mockSupabase.insert).toHaveBeenCalledWith(
      394 |         expect.objectContaining({
      395 |           attachments,

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:392:31)

  ● POST /api/projects/[projectId]/chat/messages › Success Cases › should use select().single() chain

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      417 |       });
      418 |
    > 419 |       expect(mockSupabase.select).toHaveBeenCalled();
          |                                   ^
      420 |       expect(mockSupabase.single).toHaveBeenCalled();
      421 |     });
      422 |   });

      at Object.toHaveBeenCalled (__tests__/api/projects/chat-messages.test.ts:419:35)

  ● POST /api/projects/[projectId]/chat/messages › Error Handling › should return 500 when database insert fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to save chat message"
    Received: "_serverLogger.serverLogger.child is not a function"

      444 |       expect(response.status).toBe(500);
      445 |       const data = await response.json();
    > 446 |       expect(data.error).toBe('Failed to save chat message');
          |                          ^
      447 |     });
      448 |
      449 |     it('should return 500 when unexpected error occurs', async () => {

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:446:26)

  ● POST /api/projects/[projectId]/chat/messages › Error Handling › should return 500 when unexpected error occurs

    expect(received).toBe(expected) // Object.is equality

    Expected: "Internal server error"
    Received: "_serverLogger.serverLogger.child is not a function"

      467 |       expect(response.status).toBe(500);
      468 |       const data = await response.json();
    > 469 |       expect(data.error).toBe('Internal server error');
          |                          ^
      470 |     });
      471 |
      472 |     it('should handle malformed JSON body', async () => {

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:469:26)

  ● POST /api/projects/[projectId]/chat/messages › Error Handling › should handle malformed JSON body

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {Symbol(internal response): {"cookies": {"_headers": {}, "_parsed": Map {}}, "url": undefined}}

      481 |       );
      482 |
    > 483 |       await expect(
          |             ^
      484 |         POST(mockRequest, {
      485 |           params: Promise.resolve({ projectId: validProjectId }),
      486 |         })

      at expect (node_modules/expect/build/index.js:2116:15)
      at Object.expect (__tests__/api/projects/chat-messages.test.ts:483:13)

  ● POST /api/projects/[projectId]/chat/messages › RLS Enforcement › should rely on RLS to prevent unauthorized access

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"project_id": "550e8400-e29b-41d4-a716-446655440000"}

    Number of calls: 0

      514 |
      515 |       // RLS enforcement happens at database level via insert operation
    > 516 |       expect(mockSupabase.insert).toHaveBeenCalledWith(
          |                                   ^
      517 |         expect.objectContaining({
      518 |           project_id: validProjectId,
      519 |         })

      at Object.toHaveBeenCalledWith (__tests__/api/projects/chat-messages.test.ts:516:35)

FAIL __tests__/api/projects/delete.test.ts
  ● DELETE /api/projects/[projectId] › Validation › should return 400 for invalid UUID format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      106 |       });
      107 |
    > 108 |       expect(response.status).toBe(400);
          |                               ^
      109 |       const data = await response.json();
      110 |       expect(data.error).toContain('Invalid UUID');
      111 |     });

      at Object.toBe (__tests__/api/projects/delete.test.ts:108:31)

  ● DELETE /api/projects/[projectId] › Validation › should return 400 for empty projectId

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      121 |       });
      122 |
    > 123 |       expect(response.status).toBe(400);
          |                               ^
      124 |     });
      125 |   });
      126 |

      at Object.toBe (__tests__/api/projects/delete.test.ts:123:31)

  ● DELETE /api/projects/[projectId] › Success Cases › should delete project successfully with valid ID

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      142 |       });
      143 |
    > 144 |       expect(response.status).toBe(200);
          |                               ^
      145 |       const data = await response.json();
      146 |       expect(data.success).toBe(true);
      147 |       expect(mockSupabase.from).toHaveBeenCalledWith('projects');

      at Object.toBe (__tests__/api/projects/delete.test.ts:144:31)

  ● DELETE /api/projects/[projectId] › Success Cases › should delete project and cascade delete related resources

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      165 |       });
      166 |
    > 167 |       expect(response.status).toBe(200);
          |                               ^
      168 |       const data = await response.json();
      169 |       expect(data.success).toBe(true);
      170 |     });

      at Object.toBe (__tests__/api/projects/delete.test.ts:167:31)

  ● DELETE /api/projects/[projectId] › Error Handling › should return 500 when database delete fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to delete project"
    Received: "_serverLogger.serverLogger.child is not a function"

      189 |       expect(response.status).toBe(500);
      190 |       const data = await response.json();
    > 191 |       expect(data.error).toBe('Failed to delete project');
          |                          ^
      192 |     });
      193 |
      194 |     it('should return 500 when unexpected error occurs', async () => {

      at Object.toBe (__tests__/api/projects/delete.test.ts:191:26)

  ● DELETE /api/projects/[projectId] › Error Handling › should return 500 when unexpected error occurs

    expect(received).toBe(expected) // Object.is equality

    Expected: "Internal server error"
    Received: "_serverLogger.serverLogger.child is not a function"

      208 |       expect(response.status).toBe(500);
      209 |       const data = await response.json();
    > 210 |       expect(data.error).toBe('Internal server error');
          |                          ^
      211 |     });
      212 |   });
      213 |

      at Object.toBe (__tests__/api/projects/delete.test.ts:210:26)

  ● DELETE /api/projects/[projectId] › Authorization › should respect RLS and only delete projects owned by user

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      228 |       });
      229 |
    > 230 |       expect(response.status).toBe(200);
          |                               ^
      231 |       expect(mockSupabase.from).toHaveBeenCalledWith('projects');
      232 |     });
      233 |   });

      at Object.toBe (__tests__/api/projects/delete.test.ts:230:31)

  ● DELETE /api/projects/[projectId] › Database Interactions › should call database methods in correct order

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "projects"

    Number of calls: 0

      249 |       });
      250 |
    > 251 |       expect(mockSupabase.from).toHaveBeenCalledWith('projects');
          |                                 ^
      252 |       expect(mockSupabase.delete).toHaveBeenCalled();
      253 |       expect(mockSupabase.eq).toHaveBeenCalledWith('id', 'test-project-id');
      254 |     });

      at Object.toHaveBeenCalledWith (__tests__/api/projects/delete.test.ts:251:33)

  ● DELETE /api/projects/[projectId] › Response Format › should return success boolean on successful deletion

    expect(received).toHaveProperty(path)

    Expected path: "success"
    Received path: []

    Received value: {"error": "_serverLogger.serverLogger.child is not a function"}

      272 |       const data = await response.json();
      273 |
    > 274 |       expect(data).toHaveProperty('success');
          |                    ^
      275 |       expect(data.success).toBe(true);
      276 |     });
      277 |

      at Object.toHaveProperty (__tests__/api/projects/delete.test.ts:274:20)

FAIL __tests__/api/admin/delete-user.test.ts
  ● POST /api/admin/delete-user › Input Validation › should return 400 for invalid UUID format

    expect(received).toContain(expected) // indexOf

    Expected substring: "UUID"
    Received string:    "Invalid userId format"

      88 |       expect(response.status).toBe(400);
      89 |       const data = await response.json();
    > 90 |       expect(data.error).toContain('UUID');
         |                          ^
      91 |     });
      92 |
      93 |     it('should return 400 when admin tries to delete themselves', async () => {

      at Object.toContain (__tests__/api/admin/delete-user.test.ts:90:26)

  ● POST /api/admin/delete-user › Input Validation › should return 400 when admin tries to delete themselves

    expect(received).toContain(expected) // indexOf

    Expected substring: "Cannot delete your own account"
    Received string:    "Invalid userId format"

      101 |       expect(response.status).toBe(400);
      102 |       const data = await response.json();
    > 103 |       expect(data.error).toContain('Cannot delete your own account');
          |                          ^
      104 |     });
      105 |   });
      106 |

      at Object.toContain (__tests__/api/admin/delete-user.test.ts:103:26)

  ● POST /api/admin/delete-user › Success Cases › should delete user successfully

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      108 |     it('should delete user successfully', async () => {
      109 |       // Mock getUserById response
    > 110 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      111 |         data: {
      112 |           user: {
      113 |             id: validUserId,

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:110:42)

  ● POST /api/admin/delete-user › Success Cases › should log admin action after successful deletion

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      141 |       const { logAdminAction } = require('@/lib/api/withAuth');
      142 |
    > 143 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      144 |         data: {
      145 |           user: {
      146 |             id: validUserId,

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:143:42)

  ● POST /api/admin/delete-user › Success Cases › should get user info before deletion for audit

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      176 |
      177 |     it('should get user info before deletion for audit', async () => {
    > 178 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      179 |         data: {
      180 |           user: {
      181 |             id: validUserId,

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:178:42)

  ● POST /api/admin/delete-user › Error Handling › should return 500 when deletion fails

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      206 |   describe('Error Handling', () => {
      207 |     it('should return 500 when deletion fails', async () => {
    > 208 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      209 |         data: {
      210 |           user: {
      211 |             id: validUserId,

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:208:42)

  ● POST /api/admin/delete-user › Error Handling › should handle unexpected errors gracefully

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      234 |
      235 |     it('should handle unexpected errors gracefully', async () => {
    > 236 |       mockSupabase.auth.admin.getUserById = jest
          |                                          ^
      237 |         .fn()
      238 |         .mockRejectedValue(new Error('Unexpected error'));
      239 |

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:236:42)

  ● POST /api/admin/delete-user › Error Handling › should handle malformed JSON body

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {Symbol(internal response): {"cookies": {"_headers": {}, "_parsed": Map {}}, "url": undefined}}

      255 |       });
      256 |
    > 257 |       await expect(POST(mockRequest, { params: Promise.resolve({}) })).rejects.toThrow();
          |             ^
      258 |     });
      259 |   });
      260 |

      at expect (node_modules/expect/build/index.js:2116:15)
      at Object.expect (__tests__/api/admin/delete-user.test.ts:257:13)

  ● POST /api/admin/delete-user › Security › should prevent self-deletion

    TypeError: Cannot read properties of undefined (reading 'deleteUser')

      269 |
      270 |       expect(response.status).toBe(400);
    > 271 |       expect(mockSupabase.auth.admin.deleteUser).not.toHaveBeenCalled();
          |                                      ^
      272 |     });
      273 |
      274 |     it('should use service role client for admin operations', async () => {

      at Object.deleteUser (__tests__/api/admin/delete-user.test.ts:271:38)

  ● POST /api/admin/delete-user › Security › should use service role client for admin operations

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      275 |       const { createServiceSupabaseClient } = require('@/lib/supabase');
      276 |
    > 277 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      278 |         data: { user: { id: validUserId } },
      279 |         error: null,
      280 |       });

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:277:42)

  ● POST /api/admin/delete-user › Cascading Deletes › should cascade delete user_profiles and related data

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      299 |     it('should cascade delete user_profiles and related data', async () => {
      300 |       // This is handled at the database level, but we verify the deletion happens
    > 301 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      302 |         data: {
      303 |           user: {
      304 |             id: validUserId,

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:301:42)

  ● POST /api/admin/delete-user › Edge Cases › should handle deletion of non-existent user

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      329 |   describe('Edge Cases', () => {
      330 |     it('should handle deletion of non-existent user', async () => {
    > 331 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      332 |         data: { user: null },
      333 |         error: null,
      334 |       });

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:331:42)

FAIL __tests__/api/history/history.test.ts
  ● GET /api/history › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:75:33)

  ● GET /api/history › Authentication › should proceed when user is authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:89:33)

  ● GET /api/history › Rate Limiting › should enforce tier3 rate limiting (30/min)

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:107:33)

  ● GET /api/history › Rate Limiting › should use user-specific rate limit identifier

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:123:16)

  ● GET /api/history › Pagination › should use default pagination (limit: 50, offset: 0)

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:137:16)

  ● GET /api/history › Pagination › should accept custom limit parameter

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:153:16)

  ● GET /api/history › Pagination › should accept custom offset parameter

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:169:16)

  ● GET /api/history › Pagination › should accept both limit and offset parameters

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:185:16)

  ● GET /api/history › Pagination › should enforce maximum limit of 100

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:201:33)

  ● GET /api/history › Pagination › should enforce minimum limit of 1

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:215:33)

  ● GET /api/history › Pagination › should enforce minimum offset of 0

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:229:33)

  ● GET /api/history › Pagination › should reject invalid limit format

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:246:33)

  ● GET /api/history › Query Execution › should query user_activity_history table

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:260:16)

  ● GET /api/history › Query Execution › should order results by created_at descending

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:274:16)

  ● GET /api/history › Query Execution › should return history data with count

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:304:33)

  ● GET /api/history › Error Handling › should return 500 when database query fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:322:33)

  ● GET /api/history › Error Handling › should handle empty results gracefully

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:337:33)

  ● DELETE /api/history › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:370:36)

  ● DELETE /api/history › Authentication › should proceed when user is authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:381:36)

  ● DELETE /api/history › Deletion › should delete all activity history for the user

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:392:19)

  ● DELETE /api/history › Deletion › should return success message

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:403:36)

  ● DELETE /api/history › Error Handling › should return 500 when deletion fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:419:36)

  ● POST /api/history › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:455:34)

  ● POST /api/history › Authentication › should proceed when user is authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:483:34)

  ● POST /api/history › Input Validation › should validate activity_type is required

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:500:34)

  ● POST /api/history › Input Validation › should validate activity_type is a valid enum value

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:518:34)

  ● POST /api/history › Input Validation › should accept valid activity types

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:557:36)

  ● POST /api/history › Activity Entry Creation › should insert activity with all fields

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:591:17)

  ● POST /api/history › Activity Entry Creation › should use empty object for metadata if not provided

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:629:17)

  ● POST /api/history › Activity Entry Creation › should return created activity in response

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:662:34)

  ● POST /api/history › Error Handling › should return 500 when database insert fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:688:34)

FAIL __tests__/api/video/upscale.test.ts
  ● POST /api/video/upscale › Validation › should return 400 for invalid assetId

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      124 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      125 |
    > 126 |       expect(response.status).toBe(400);
          |                               ^
      127 |     });
      128 |
      129 |     it('should return 400 for invalid projectId', async () => {

      at Object.toBe (__tests__/api/video/upscale.test.ts:126:31)

  ● POST /api/video/upscale › Validation › should return 400 for invalid projectId

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      139 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      140 |
    > 141 |       expect(response.status).toBe(400);
          |                               ^
      142 |     });
      143 |   });
      144 |

      at Object.toBe (__tests__/api/video/upscale.test.ts:141:31)

  ● POST /api/video/upscale › Success Cases › should submit upscale request successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      188 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      189 |
    > 190 |       expect(response.status).toBe(200);
          |                               ^
      191 |       const data = await response.json();
      192 |       expect(data.requestId).toBe('upscale-request-123');
      193 |       expect(data.message).toContain('successfully');

      at Object.toBe (__tests__/api/video/upscale.test.ts:190:31)

  ● POST /api/video/upscale › Error Handling › should handle timeout errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 504
    Received: 500

      250 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      251 |
    > 252 |       expect(response.status).toBe(504);
          |                               ^
      253 |     });
      254 |   });
      255 | });

      at Object.toBe (__tests__/api/video/upscale.test.ts:252:31)

FAIL __tests__/api/video/generate-audio.test.ts
  ● POST /api/video/generate-audio › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:78:34)

  ● POST /api/video/generate-audio › Authentication › should return 401 when auth error occurs

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:98:34)

  ● POST /api/video/generate-audio › Input Validation - Required Fields › should return 400 when assetId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:113:34)

  ● POST /api/video/generate-audio › Input Validation - Required Fields › should return 400 when projectId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:128:34)

  ● POST /api/video/generate-audio › Input Validation - Required Fields › should return 400 when both assetId and projectId are missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:141:34)

  ● POST /api/video/generate-audio › Model Validation › should return 400 for invalid model

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:158:34)

  ● POST /api/video/generate-audio › Model Validation › should accept minimax model

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:190:34)

  ● POST /api/video/generate-audio › Model Validation › should accept mureka-1.5 model

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:219:34)

  ● POST /api/video/generate-audio › Model Validation › should accept kling-turbo-2.5 model

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:248:34)

  ● POST /api/video/generate-audio › Model Validation › should default to minimax model when not specified

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:276:34)

  ● POST /api/video/generate-audio › Asset Verification › should return 404 when asset not found

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:299:34)

  ● POST /api/video/generate-audio › Asset Verification › should verify asset belongs to user

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:324:17)

  ● POST /api/video/generate-audio › API Key Configuration › should return 500 when FAL_API_KEY is not configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:352:34)

  ● POST /api/video/generate-audio › Storage URL Handling › should convert storage URL to public URL

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:391:34)

  ● POST /api/video/generate-audio › Storage URL Handling › should return 500 when video URL cannot be obtained

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:415:34)

  ● POST /api/video/generate-audio › FAL.ai API Integration › should call FAL.ai API with correct parameters

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:449:17)

  ● POST /api/video/generate-audio › FAL.ai API Integration › should handle FAL.ai API errors

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:488:34)

  ● POST /api/video/generate-audio › FAL.ai API Integration › should handle API timeout

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:519:34)

  ● POST /api/video/generate-audio › FAL.ai API Integration › should return 500 when request_id is missing from response

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:549:34)

  ● POST /api/video/generate-audio › Database Job Tracking › should create job record in database

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:583:17)

  ● POST /api/video/generate-audio › Database Job Tracking › should continue when job database insert fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:622:34)

  ● POST /api/video/generate-audio › Success Cases › should successfully start video-to-audio generation

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:654:34)

  ● POST /api/video/generate-audio › Success Cases › should accept optional prompt parameter

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:688:34)

FAIL __tests__/api/audio/elevenlabs-sfx.test.ts
  ● POST /api/audio/elevenlabs/sfx › Input Validation › should return 400 for duration less than 0.5 seconds

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      219 |       const response = await POST(mockRequest);
      220 |
    > 221 |       expect(response.status).toBe(400);
          |                               ^
      222 |       const data = await response.json();
      223 |       expect(data.error).toContain('between 0.5 and 22 seconds');
      224 |     });

      at Object.toBe (__tests__/api/audio/elevenlabs-sfx.test.ts:221:31)

  ● POST /api/audio/elevenlabs/sfx › Input Validation › should return 400 for duration greater than 22 seconds

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      238 |       const response = await POST(mockRequest);
      239 |
    > 240 |       expect(response.status).toBe(400);
          |                               ^
      241 |     });
      242 |
      243 |     it('should use default duration of 5.0 when not provided', async () => {

      at Object.toBe (__tests__/api/audio/elevenlabs-sfx.test.ts:240:31)

  ● POST /api/audio/elevenlabs/sfx › Success Cases › should generate SFX successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      375 |       expect(response.status).toBe(200);
      376 |       const data = await response.json();
    > 377 |       expect(data.success).toBe(true);
          |                            ^
      378 |       expect(data.asset).toBeTruthy();
      379 |       expect(data.url).toBe('https://example.com/sfx.mp3');
      380 |     });

      at Object.toBe (__tests__/api/audio/elevenlabs-sfx.test.ts:377:28)

  ● POST /api/audio/elevenlabs/sfx › Error Handling › should return error when ElevenLabs API fails

    expect(received).toBe(expected) // Object.is equality

    Expected: 402
    Received: 500

      523 |       const response = await POST(mockRequest);
      524 |
    > 525 |       expect(response.status).toBe(402);
          |                               ^
      526 |     });
      527 |
      528 |     it('should return 504 when API times out', async () => {

      at Object.toBe (__tests__/api/audio/elevenlabs-sfx.test.ts:525:31)

  ● POST /api/audio/elevenlabs/sfx › Error Handling › should return 504 when API times out

    expect(received).toBe(expected) // Object.is equality

    Expected: 504
    Received: 500

      542 |       const response = await POST(mockRequest);
      543 |
    > 544 |       expect(response.status).toBe(504);
          |                               ^
      545 |       const data = await response.json();
      546 |       expect(data.error).toContain('timeout');
      547 |     });

      at Object.toBe (__tests__/api/audio/elevenlabs-sfx.test.ts:544:31)

FAIL __tests__/api/stripe/portal.test.ts
  ● POST /api/stripe/portal › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/stripe/portal.test.ts:83:34)

  ● POST /api/stripe/portal › Authentication › should proceed when user is authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/stripe/portal.test.ts:108:34)

  ● POST /api/stripe/portal › Rate Limiting › should enforce tier1 rate limiting (5/min)

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/stripe/portal.test.ts:126:34)

  ● POST /api/stripe/portal › Rate Limiting › should use correct rate limit tier for payment operations

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      137 |       const mockUserService = new UserService(mockSupabase);
      138 |
    > 139 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      140 |         createMockUserProfile({
      141 |           id: mockUser.id,
      142 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:139:38)

  ● POST /api/stripe/portal › User Profile Verification › should retrieve user profile using UserService

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      165 |       const mockUserService = new UserService(mockSupabase);
      166 |
    > 167 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      168 |         createMockUserProfile({
      169 |           id: mockUser.id,
      170 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:167:38)

  ● POST /api/stripe/portal › User Profile Verification › should return 400 when user profile not found

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      188 |       const mockUserService = new UserService(mockSupabase);
      189 |
    > 190 |       mockUserService.getUserProfile.mockResolvedValue(null);
          |                                      ^
      191 |
      192 |       const response = await POST(mockRequest);
      193 |

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:190:38)

  ● POST /api/stripe/portal › User Profile Verification › should return 400 when Stripe customer ID not found

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      203 |       const mockUserService = new UserService(mockSupabase);
      204 |
    > 205 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      206 |         createMockUserProfile({
      207 |           id: mockUser.id,
      208 |           stripe_customer_id: null,

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:205:38)

  ● POST /api/stripe/portal › Billing Portal Session Creation › should create billing portal session with Stripe

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      230 |       });
      231 |
    > 232 |       mockUserService.getUserProfile.mockResolvedValue(mockProfile);
          |                                      ^
      233 |
      234 |       const { createBillingPortalSession } = require('@/lib/stripe');
      235 |       createBillingPortalSession.mockResolvedValue({

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:232:38)

  ● POST /api/stripe/portal › Billing Portal Session Creation › should use NEXT_PUBLIC_BASE_URL for return URL

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      251 |       const mockUserService = new UserService(mockSupabase);
      252 |
    > 253 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      254 |         createMockUserProfile({
      255 |           id: mockUser.id,
      256 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:253:38)

  ● POST /api/stripe/portal › Billing Portal Session Creation › should fall back to request origin if NEXT_PUBLIC_BASE_URL not set

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      280 |       const mockUserService = new UserService(mockSupabase);
      281 |
    > 282 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      283 |         createMockUserProfile({
      284 |           id: mockUser.id,
      285 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:282:38)

  ● POST /api/stripe/portal › Billing Portal Session Creation › should return portal URL in response

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      309 |       const mockUserService = new UserService(mockSupabase);
      310 |
    > 311 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      312 |         createMockUserProfile({
      313 |           id: mockUser.id,
      314 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:311:38)

  ● POST /api/stripe/portal › Error Handling › should return 500 when Stripe API fails

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      338 |       const mockUserService = new UserService(mockSupabase);
      339 |
    > 340 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      341 |         createMockUserProfile({
      342 |           id: mockUser.id,
      343 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:340:38)

  ● POST /api/stripe/portal › Error Handling › should log error when portal creation fails

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      361 |       const { serverLogger } = require('@/lib/serverLogger');
      362 |
    > 363 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      364 |         createMockUserProfile({
      365 |           id: mockUser.id,
      366 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:363:38)

  ● POST /api/stripe/portal › Error Handling › should handle unexpected errors gracefully

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      388 |       const mockUserService = new UserService(mockSupabase);
      389 |
    > 390 |       mockUserService.getUserProfile.mockImplementation(() => {
          |                                      ^
      391 |         throw new Error('Unexpected error');
      392 |       });
      393 |

      at Object.mockImplementation (__tests__/api/stripe/portal.test.ts:390:38)

  ● POST /api/stripe/portal › Logging › should log request start

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      407 |       const { serverLogger } = require('@/lib/serverLogger');
      408 |
    > 409 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      410 |         createMockUserProfile({
      411 |           id: mockUser.id,
      412 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:409:38)

  ● POST /api/stripe/portal › Logging › should log when customer is found

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      443 |       });
      444 |
    > 445 |       mockUserService.getUserProfile.mockResolvedValue(mockProfile);
          |                                      ^
      446 |
      447 |       const { createBillingPortalSession } = require('@/lib/stripe');
      448 |       createBillingPortalSession.mockResolvedValue({

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:445:38)

  ● POST /api/stripe/portal › Logging › should log session creation success with duration

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      470 |       const { serverLogger } = require('@/lib/serverLogger');
      471 |
    > 472 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      473 |         createMockUserProfile({
      474 |           id: mockUser.id,
      475 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:472:38)

  ● POST /api/stripe/portal › Logging › should log warning when no profile found

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      503 |       const { serverLogger } = require('@/lib/serverLogger');
      504 |
    > 505 |       mockUserService.getUserProfile.mockResolvedValue(null);
          |                                      ^
      506 |
      507 |       await POST(mockRequest);
      508 |

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:505:38)

  ● POST /api/stripe/portal › Logging › should log warning when no customer ID found

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      521 |       const { serverLogger } = require('@/lib/serverLogger');
      522 |
    > 523 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      524 |         createMockUserProfile({
      525 |           id: mockUser.id,
      526 |           stripe_customer_id: null,

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:523:38)

  ● POST /api/stripe/portal › Security › should verify user owns the profile being accessed

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      553 |       const mockUserService = new UserService(mockSupabase);
      554 |
    > 555 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      556 |         createMockUserProfile({
      557 |           id: mockUser.id,
      558 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:555:38)

FAIL __tests__/api/payments/webhook.test.ts
  ● POST /api/stripe/webhook › Webhook Verification › should return 400 when signature is missing

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › Webhook Verification › should return 503 when webhook secret not configured

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › Webhook Verification › should return 400 when signature verification fails

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › Webhook Verification › should verify webhook signature correctly

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › checkout.session.completed Event › should upgrade user to premium on successful checkout

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › checkout.session.completed Event › should preserve admin tier on checkout

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › checkout.session.completed Event › should return 500 when userId missing in metadata

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › checkout.session.completed Event › should return 500 when user profile not found

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › checkout.session.completed Event › should return 500 when database update fails

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › customer.subscription.updated Event › should update subscription status

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › customer.subscription.updated Event › should downgrade to free when subscription becomes inactive

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › customer.subscription.updated Event › should preserve admin tier on subscription update

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › customer.subscription.deleted Event › should downgrade user to free tier

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › customer.subscription.deleted Event › should preserve admin tier on subscription deletion

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › Unhandled Events › should log warning for unhandled event types

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › Error Recovery › should return 400 on signature verification error

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

FAIL __tests__/api/frames/frameId-edit.test.ts
  ● POST /api/frames/[frameId]/edit › Frame ID Validation › should return 400 when frameId is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      106 |         params: Promise.resolve({ frameId: undefined as unknown as string }),
      107 |       });
    > 108 |       expect(response.status).toBe(400);
          |                               ^
      109 |     });
      110 |   });
      111 |

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:108:31)

  ● POST /api/frames/[frameId]/edit › Input Validation › should return 400 when prompt is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      124 |         params: Promise.resolve({ frameId: validFrameId }),
      125 |       });
    > 126 |       expect(response.status).toBe(400);
          |                               ^
      127 |     });
      128 |
      129 |     it('should return 400 when prompt is not a string', async () => {

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:126:31)

  ● POST /api/frames/[frameId]/edit › Input Validation › should return 400 when prompt is not a string

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      140 |         params: Promise.resolve({ frameId: validFrameId }),
      141 |       });
    > 142 |       expect(response.status).toBe(400);
          |                               ^
      143 |     });
      144 |
      145 |     it('should limit numVariations between 1 and 8', async () => {

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:142:31)

  ● POST /api/frames/[frameId]/edit › Input Validation › should limit numVariations between 1 and 8

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      179 |         params: Promise.resolve({ frameId: validFrameId }),
      180 |       });
    > 181 |       expect(response.status).toBe(200);
          |                               ^
      182 |       const data = await response.json();
      183 |       expect(data.count).toBeLessThanOrEqual(8);
      184 |     });

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:181:31)

  ● POST /api/frames/[frameId]/edit › Frame Ownership Verification › should return 404 when frame not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      204 |         params: Promise.resolve({ frameId: validFrameId }),
      205 |       });
    > 206 |       expect(response.status).toBe(404);
          |                               ^
      207 |     });
      208 |
      209 |     it('should return 403 when user does not own project', async () => {

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:206:31)

  ● POST /api/frames/[frameId]/edit › Frame Ownership Verification › should return 403 when user does not own project

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      230 |         params: Promise.resolve({ frameId: validFrameId }),
      231 |       });
    > 232 |       expect(response.status).toBe(403);
          |                               ^
      233 |     });
      234 |
      235 |     it('should return 403 when user does not own asset', async () => {

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:232:31)

  ● POST /api/frames/[frameId]/edit › Frame Ownership Verification › should return 403 when user does not own asset

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      257 |         params: Promise.resolve({ frameId: validFrameId }),
      258 |       });
    > 259 |       expect(response.status).toBe(403);
          |                               ^
      260 |     });
      261 |   });
      262 |

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:259:31)

  ● POST /api/frames/[frameId]/edit › API Key Configuration › should return 503 when API key not configured

    expect(received).toBe(expected) // Object.is equality

    Expected: 503
    Received: 500

      289 |         params: Promise.resolve({ frameId: validFrameId }),
      290 |       });
    > 291 |       expect(response.status).toBe(503);
          |                               ^
      292 |     });
      293 |
      294 |     it('should accept GEMINI_API_KEY as alternative', async () => {

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:291:31)

  ● POST /api/frames/[frameId]/edit › API Key Configuration › should accept GEMINI_API_KEY as alternative

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      331 |         params: Promise.resolve({ frameId: validFrameId }),
      332 |       });
    > 333 |       expect(response.status).toBe(200);
          |                               ^
      334 |     });
      335 |   });
      336 |

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:333:31)

  ● POST /api/frames/[frameId]/edit › Edit Modes › should support global mode (default)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      373 |         params: Promise.resolve({ frameId: validFrameId }),
      374 |       });
    > 375 |       expect(response.status).toBe(200);
          |                               ^
      376 |     });
      377 |
      378 |     it('should support crop mode with parameters', async () => {

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:375:31)

  ● POST /api/frames/[frameId]/edit › Edit Modes › should support crop mode with parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      420 |         params: Promise.resolve({ frameId: validFrameId }),
      421 |       });
    > 422 |       expect(response.status).toBe(200);
          |                               ^
      423 |     });
      424 |   });
      425 |

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:422:31)

  ● POST /api/frames/[frameId]/edit › Success Cases › should successfully create frame edits

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      467 |         params: Promise.resolve({ frameId: validFrameId }),
      468 |       });
    > 469 |       expect(response.status).toBe(200);
          |                               ^
      470 |       const data = await response.json();
      471 |       expect(data.success).toBe(true);
      472 |       expect(data.edits).toBeDefined();

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:469:31)

FAIL __tests__/api/assets/sign.test.ts
  ● GET /api/assets/sign › Input Validation › should return 400 when neither storageUrl nor assetId provided

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      81 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      82 |
    > 83 |       expect(response.status).toBe(400);
         |                               ^
      84 |       const data = await response.json();
      85 |       expect(data.error).toContain('required');
      86 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:83:31)

  ● GET /api/assets/sign › Input Validation › should return 400 when storageUrl is invalid

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      92 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      93 |
    > 94 |       expect(response.status).toBe(400);
         |                               ^
      95 |       const data = await response.json();
      96 |       expect(data.error).toBe('Invalid storage URL format. Must start with supabase://');
      97 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:94:31)

  ● GET /api/assets/sign › Input Validation › should accept valid supabase:// storage URLs

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      105 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      106 |
    > 107 |       expect(response.status).toBe(200);
          |                               ^
      108 |     });
      109 |   });
      110 |

      at Object.toBe (__tests__/api/assets/sign.test.ts:107:31)

  ● GET /api/assets/sign › Asset Lookup by assetId › should fetch storageUrl from database when assetId provided

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      127 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      128 |
    > 129 |       expect(response.status).toBe(200);
          |                               ^
      130 |       expect(mockSupabase.select).toHaveBeenCalledWith('storage_url, user_id');
      131 |       expect(mockSupabase.eq).toHaveBeenCalledWith('id', VALID_ASSET_ID);
      132 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:129:31)

  ● GET /api/assets/sign › Asset Lookup by assetId › should return 404 when asset not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      145 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      146 |
    > 147 |       expect(response.status).toBe(404);
          |                               ^
      148 |       const data = await response.json();
      149 |       expect(data.error).toBe('Asset not found');
      150 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:147:31)

  ● GET /api/assets/sign › Asset Lookup by assetId › should return 403 when asset belongs to different user

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      166 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      167 |
    > 168 |       expect(response.status).toBe(403);
          |                               ^
      169 |       const data = await response.json();
      170 |       expect(data.error).toBe('Asset does not belong to user');
      171 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:168:31)

  ● GET /api/assets/sign › Asset Authorization by storageUrl › should verify user owns asset by checking folder structure

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      181 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      182 |
    > 183 |       expect(response.status).toBe(200);
          |                               ^
      184 |     });
      185 |
      186 |     it('should return 403 when storageUrl does not match user', async () => {

      at Object.toBe (__tests__/api/assets/sign.test.ts:183:31)

  ● GET /api/assets/sign › Asset Authorization by storageUrl › should return 403 when storageUrl does not match user

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      192 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      193 |
    > 194 |       expect(response.status).toBe(403);
          |                               ^
      195 |       const data = await response.json();
      196 |       expect(data.error).toContain('does not belong to user');
      197 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:194:31)

  ● GET /api/assets/sign › Asset Authorization by storageUrl › should skip folder check when assetId was used for lookup

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      214 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      215 |
    > 216 |       expect(response.status).toBe(200);
          |                               ^
      217 |     });
      218 |   });
      219 |

      at Object.toBe (__tests__/api/assets/sign.test.ts:216:31)

  ● GET /api/assets/sign › Signed URL Generation › should create signed URL with default TTL

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      227 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      228 |
    > 229 |       expect(response.status).toBe(200);
          |                               ^
      230 |       expect(mockSupabase.storage.createSignedUrl).toHaveBeenCalledWith(
      231 |         expect.stringContaining('test.jpg'),
      232 |         3600

      at Object.toBe (__tests__/api/assets/sign.test.ts:229:31)

  ● GET /api/assets/sign › Signed URL Generation › should create signed URL with custom TTL

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      242 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      243 |
    > 244 |       expect(response.status).toBe(200);
          |                               ^
      245 |       expect(mockSupabase.storage.createSignedUrl).toHaveBeenCalledWith(expect.any(String), 7200);
      246 |     });
      247 |

      at Object.toBe (__tests__/api/assets/sign.test.ts:244:31)

  ● GET /api/assets/sign › Signed URL Generation › should parse storage URL correctly

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "assets"

    Number of calls: 0

      254 |       await GET(mockRequest, { params: Promise.resolve({}) });
      255 |
    > 256 |       expect(mockSupabase.storage.from).toHaveBeenCalledWith('assets');
          |                                         ^
      257 |       expect(mockSupabase.storage.createSignedUrl).toHaveBeenCalledWith(
      258 |         `${mockUser.id}/project-id/image/test.jpg`,
      259 |         expect.any(Number)

      at Object.toHaveBeenCalledWith (__tests__/api/assets/sign.test.ts:256:41)

  ● GET /api/assets/sign › Signed URL Generation › should return signed URL and expiration

    expect(received).toHaveProperty(path, value)

    Expected path: "signedUrl"
    Received path: []

    Expected value: "https://example.com/signed-url-12345"
    Received value: {"error": "_serverLogger.serverLogger.child is not a function"}

      275 |       const data = await response.json();
      276 |
    > 277 |       expect(data).toHaveProperty('signedUrl', 'https://example.com/signed-url-12345');
          |                    ^
      278 |       expect(data).toHaveProperty('expiresIn', 1800);
      279 |     });
      280 |   });

      at Object.toHaveProperty (__tests__/api/assets/sign.test.ts:277:20)

  ● GET /api/assets/sign › Storage Bucket Handling › should handle different storage buckets

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "custom-bucket"

    Number of calls: 0

      297 |       await GET(mockRequest, { params: Promise.resolve({}) });
      298 |
    > 299 |       expect(mockSupabase.storage.from).toHaveBeenCalledWith('custom-bucket');
          |                                         ^
      300 |     });
      301 |
      302 |     it('should handle paths with multiple slashes', async () => {

      at Object.toHaveBeenCalledWith (__tests__/api/assets/sign.test.ts:299:41)

  ● GET /api/assets/sign › Storage Bucket Handling › should handle paths with multiple slashes

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-user-id/a/b/c/test.jpg", Any<Number>

    Number of calls: 0

      308 |       await GET(mockRequest, { params: Promise.resolve({}) });
      309 |
    > 310 |       expect(mockSupabase.storage.createSignedUrl).toHaveBeenCalledWith(
          |                                                    ^
      311 |         `${mockUser.id}/a/b/c/test.jpg`,
      312 |         expect.any(Number)
      313 |       );

      at Object.toHaveBeenCalledWith (__tests__/api/assets/sign.test.ts:310:52)

  ● GET /api/assets/sign › Error Handling › should return 500 when storage signing fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Storage error"
    Received: "_serverLogger.serverLogger.child is not a function"

      331 |       expect(response.status).toBe(500);
      332 |       const data = await response.json();
    > 333 |       expect(data.error).toBe('Storage error');
          |                          ^
      334 |     });
      335 |
      336 |     it('should return 500 when database query fails', async () => {

      at Object.toBe (__tests__/api/assets/sign.test.ts:333:26)

  ● GET /api/assets/sign › Error Handling › should return 500 when database query fails

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      345 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      346 |
    > 347 |       expect(response.status).toBe(404);
          |                               ^
      348 |     });
      349 |
      350 |     it('should handle unexpected errors gracefully', async () => {

      at Object.toBe (__tests__/api/assets/sign.test.ts:347:31)

  ● GET /api/assets/sign › Error Handling › should handle unexpected errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Unexpected error"
    Received: "_serverLogger.serverLogger.child is not a function"

      362 |       expect(response.status).toBe(500);
      363 |       const data = await response.json();
    > 364 |       expect(data.error).toBe('Unexpected error');
          |                          ^
      365 |     });
      366 |   });
      367 |

      at Object.toBe (__tests__/api/assets/sign.test.ts:364:26)

  ● GET /api/assets/sign › URL Format Handling › should strip supabase:// protocol

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "assets"

    Number of calls: 0

      376 |
      377 |       // Verify protocol was stripped
    > 378 |       expect(mockSupabase.storage.from).toHaveBeenCalledWith('assets');
          |                                         ^
      379 |       expect(mockSupabase.storage.createSignedUrl).not.toHaveBeenCalledWith(
      380 |         expect.stringContaining('supabase://'),
      381 |         expect.any(Number)

      at Object.toHaveBeenCalledWith (__tests__/api/assets/sign.test.ts:378:41)

  ● GET /api/assets/sign › URL Format Handling › should handle URLs with special characters

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      391 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      392 |
    > 393 |       expect(response.status).toBe(200);
          |                               ^
      394 |     });
      395 |
      396 |     it('should validate bucket name is not empty', async () => {

      at Object.toBe (__tests__/api/assets/sign.test.ts:393:31)

  ● GET /api/assets/sign › URL Format Handling › should validate bucket name is not empty

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      402 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      403 |
    > 404 |       expect(response.status).toBe(400);
          |                               ^
      405 |       const data = await response.json();
      406 |       expect(data.error).toBe('Invalid storage URL');
      407 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:404:31)

  ● GET /api/assets/sign › URL Format Handling › should validate path is not empty

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      415 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      416 |
    > 417 |       expect(response.status).toBe(400);
          |                               ^
      418 |       const data = await response.json();
      419 |       expect(data.error).toBe('Invalid storage URL');
      420 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:417:31)

FAIL __tests__/api/assets/upload.test.ts
  ● POST /api/assets/upload › Input Validation › should return 400 when no file provided

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      124 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      125 |
    > 126 |       expect(response.status).toBe(400);
          |                               ^
      127 |       const data = await response.json();
      128 |       expect(data.error).toBe('No file provided');
      129 |     });

      at Object.toBe (__tests__/api/assets/upload.test.ts:126:31)

  ● POST /api/assets/upload › Input Validation › should return 400 when no projectId provided

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      142 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      143 |
    > 144 |       expect(response.status).toBe(400);
          |                               ^
      145 |       const data = await response.json();
      146 |       expect(data.error).toBe('Project ID required');
      147 |     });

      at Object.toBe (__tests__/api/assets/upload.test.ts:144:31)

  ● POST /api/assets/upload › Input Validation › should return 400 when file exceeds size limit

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      171 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      172 |
    > 173 |       expect(response.status).toBe(400);
          |                               ^
      174 |       const data = await response.json();
      175 |       expect(data.error).toBe('File too large');
      176 |       expect(data.details).toContain('100MB');

      at Object.toBe (__tests__/api/assets/upload.test.ts:173:31)

  ● POST /api/assets/upload › Input Validation › should return 400 for invalid image MIME type

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      193 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      194 |
    > 195 |       expect(response.status).toBe(400);
          |                               ^
      196 |       const data = await response.json();
      197 |       expect(data.error).toBe('Invalid file type');
      198 |     });

      at Object.toBe (__tests__/api/assets/upload.test.ts:195:31)

  ● POST /api/assets/upload › Input Validation › should accept valid image MIME types

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      224 |
      225 |         const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 226 |         expect(response.status).toBe(200);
          |                                 ^
      227 |       }
      228 |     });
      229 |

      at Object.toBe (__tests__/api/assets/upload.test.ts:226:33)

  ● POST /api/assets/upload › Input Validation › should accept valid video MIME types

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      255 |
      256 |         const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 257 |         expect(response.status).toBe(200);
          |                                 ^
      258 |       }
      259 |     });
      260 |   });

      at Object.toBe (__tests__/api/assets/upload.test.ts:257:33)

  ● POST /api/assets/upload › Project Authorization › should return 404 when project not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      290 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      291 |
    > 292 |       expect(response.status).toBe(404);
          |                               ^
      293 |       const data = await response.json();
      294 |       expect(data.error).toContain('not found');
      295 |     });

      at Object.toBe (__tests__/api/assets/upload.test.ts:292:31)

  ● POST /api/assets/upload › Project Authorization › should return 404 when user does not own project

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      327 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      328 |
    > 329 |       expect(response.status).toBe(404);
          |                               ^
      330 |     });
      331 |
      332 |     it('should verify project ownership with user_id', async () => {

      at Object.toBe (__tests__/api/assets/upload.test.ts:329:31)

  ● POST /api/assets/upload › Project Authorization › should verify project ownership with user_id

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "id", "123e4567-e89b-12d3-a456-426614174000"

    Number of calls: 0

      354 |       await POST(mockRequest, { params: Promise.resolve({}) });
      355 |
    > 356 |       expect(mockSupabase.eq).toHaveBeenCalledWith('id', '123e4567-e89b-12d3-a456-426614174000');
          |                               ^
      357 |       expect(mockSupabase.eq).toHaveBeenCalledWith('user_id', mockUser.id);
      358 |     });
      359 |   });

      at Object.toHaveBeenCalledWith (__tests__/api/assets/upload.test.ts:356:31)

  ● POST /api/assets/upload › File Upload Success › should upload file and create asset record

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      384 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      385 |
    > 386 |       expect(response.status).toBe(200);
          |                               ^
      387 |       expect(mockSupabase.storage.upload).toHaveBeenCalled();
      388 |       expect(mockSupabase.insert).toHaveBeenCalledWith(
      389 |         expect.objectContaining({

      at Object.toBe (__tests__/api/assets/upload.test.ts:386:31)

  ● POST /api/assets/upload › File Upload Success › should generate unique filename with UUID

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringMatching /mock-uuid-123\./, Any<Buffer>, Any<Object>

    Number of calls: 0

      421 |       await POST(mockRequest, { params: Promise.resolve({}) });
      422 |
    > 423 |       expect(mockSupabase.storage.upload).toHaveBeenCalledWith(
          |                                           ^
      424 |         expect.stringMatching(/mock-uuid-123\./),
      425 |         expect.any(Buffer),
      426 |         expect.any(Object)

      at Object.toHaveBeenCalledWith (__tests__/api/assets/upload.test.ts:423:43)

  ● POST /api/assets/upload › File Upload Success › should organize files in correct folder structure

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "test-user-id/test-project-id/image/", Any<Buffer>, Any<Object>

    Number of calls: 0

      453 |       await POST(mockRequest, { params: Promise.resolve({}) });
      454 |
    > 455 |       expect(mockSupabase.storage.upload).toHaveBeenCalledWith(
          |                                           ^
      456 |         expect.stringContaining(`${mockUser.id}/test-project-id/image/`),
      457 |         expect.any(Buffer),
      458 |         expect.any(Object)

      at Object.toHaveBeenCalledWith (__tests__/api/assets/upload.test.ts:455:43)

  ● POST /api/assets/upload › File Upload Success › should return asset information in response

    expect(received).toHaveProperty(path)

    Expected path: "assetId"
    Received path: []

    Received value: {"error": "Cannot read properties of undefined (reading 'success')"}

      485 |       const data = await response.json();
      486 |
    > 487 |       expect(data).toHaveProperty('assetId');
          |                    ^
      488 |       expect(data).toHaveProperty('storageUrl');
      489 |       expect(data).toHaveProperty('publicUrl');
      490 |       expect(data).toHaveProperty('success', true);

      at Object.toHaveProperty (__tests__/api/assets/upload.test.ts:487:20)

  ● POST /api/assets/upload › Error Handling › should return 500 when storage upload fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Storage quota exceeded"
    Received: "Cannot read properties of undefined (reading 'success')"

      517 |       expect(response.status).toBe(500);
      518 |       const data = await response.json();
    > 519 |       expect(data.error).toBe('Storage quota exceeded');
          |                          ^
      520 |     });
      521 |
      522 |     it('should delete uploaded file when database insert fails', async () => {

      at Object.toBe (__tests__/api/assets/upload.test.ts:519:26)

  ● POST /api/assets/upload › Error Handling › should delete uploaded file when database insert fails

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      551 |
      552 |       expect(response.status).toBe(500);
    > 553 |       expect(mockSupabase.storage.remove).toHaveBeenCalled();
          |                                           ^
      554 |     });
      555 |
      556 |     it('should handle unexpected errors', async () => {

      at Object.toHaveBeenCalled (__tests__/api/assets/upload.test.ts:553:43)

  ● POST /api/assets/upload › Error Handling › should handle unexpected errors

    expect(received).toBe(expected) // Object.is equality

    Expected: "Internal server error"
    Received: "Cannot read properties of undefined (reading 'success')"

      579 |       expect(response.status).toBe(500);
      580 |       const data = await response.json();
    > 581 |       expect(data.error).toBe('Internal server error');
          |                          ^
      582 |     });
      583 |   });
      584 |

      at Object.toBe (__tests__/api/assets/upload.test.ts:581:26)

  ● POST /api/assets/upload › Activity History › should log upload to activity history

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"activity_type": "image_upload", "project_id": "123e4567-e89b-12d3-a456-426614174000", "user_id": "test-user-id"}

    Number of calls: 0

      608 |       await POST(mockRequest, { params: Promise.resolve({}) });
      609 |
    > 610 |       expect(mockSupabase.insert).toHaveBeenCalledWith(
          |                                   ^
      611 |         expect.objectContaining({
      612 |           activity_type: 'image_upload',
      613 |           user_id: mockUser.id,

      at Object.toHaveBeenCalledWith (__tests__/api/assets/upload.test.ts:610:35)

{"level":20,"time":1761339442855,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":20,"time":1761339442856,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":20,"time":1761339442857,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":20,"time":1761339442857,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":20,"time":1761339442859,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":20,"time":1761339442905,"env":"development","service":"genai-video-production","event":"docs.request","format":"yaml","msg":"API documentation requested"}
{"level":20,"time":1761339442905,"env":"development","service":"genai-video-production","event":"docs.request","format":"yaml","msg":"API documentation requested"}
{"level":20,"time":1761339442906,"env":"development","service":"genai-video-production","event":"docs.request","format":"yaml","msg":"API documentation requested"}
{"level":20,"time":1761339442917,"env":"development","service":"genai-video-production","event":"docs.request","format":"yaml","msg":"API documentation requested"}
{"level":20,"time":1761339442918,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":20,"time":1761339442919,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":20,"time":1761339442919,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":50,"time":1761339442919,"env":"development","service":"genai-video-production","event":"docs.file_read_error","error":"File not found","specPath":"/Users/davidchen/Projects/non-linear-editor/docs/api/openapi.yaml","msg":"Failed to read OpenAPI spec file"}
{"level":50,"time":1761339442919,"env":"development","service":"genai-video-production","event":"api.error_response","statusCode":500,"details":{"error":"File not found"},"msg":"Failed to load API documentation"}
{"level":20,"time":1761339442938,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":50,"time":1761339442938,"env":"development","service":"genai-video-production","event":"docs.yaml_parse_error","error":"Invalid YAML","msg":"Failed to parse YAML spec"}
{"level":50,"time":1761339442938,"env":"development","service":"genai-video-production","event":"api.error_response","statusCode":500,"details":{"error":"Invalid YAML"},"msg":"Failed to parse API documentation"}
{"level":20,"time":1761339442940,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":50,"time":1761339442940,"env":"development","service":"genai-video-production","event":"docs.file_read_error","error":"Unknown error","specPath":"/Users/davidchen/Projects/non-linear-editor/docs/api/openapi.yaml","msg":"Failed to read OpenAPI spec file"}
{"level":50,"time":1761339442941,"env":"development","service":"genai-video-production","event":"api.error_response","statusCode":500,"details":{"error":"Unknown error"},"msg":"Failed to load API documentation"}
{"level":20,"time":1761339442942,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":20,"time":1761339442944,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":20,"time":1761339442944,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":20,"time":1761339442946,"env":"development","service":"genai-video-production","event":"docs.request","format":"YAML","msg":"API documentation requested"}
{"level":20,"time":1761339442951,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":20,"time":1761339442953,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":20,"time":1761339442953,"env":"development","service":"genai-video-production","event":"docs.request","format":"json","msg":"API documentation requested"}
{"level":50,"time":1761339442953,"env":"development","service":"genai-video-production","event":"docs.file_read_error","error":"Test error","specPath":"/Users/davidchen/Projects/non-linear-editor/docs/api/openapi.yaml","msg":"Failed to read OpenAPI spec file"}
{"level":50,"time":1761339442954,"env":"development","service":"genai-video-production","event":"api.error_response","statusCode":500,"details":{"error":"Test error"},"msg":"Failed to load API documentation"}
FAIL __tests__/api/docs/docs.test.ts
  ● Console

    console.error
      Error: Uncaught [TypeError: fastNowTimeout?.unref is not a function]
          at ignore-listed frames {
        detail: TypeError: fastNowTimeout?.unref is not a function
            at refreshTimeout (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/util/timers.js:205:21)
            at FastTimer.refresh (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/util/timers.js:297:7)
            at new FastTimer (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/util/timers.js:274:10)
            at Object.setFastTimeout (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/util/timers.js:376:12)
            at Object.setupConnectTimeout (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/core/util.js:842:32)
            at Client.connect (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/core/connect.js:107:38)
            at connect (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/dispatcher/client.js:419:21)
            at _resume (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/dispatcher/client.js:594:7)
            at resume (/Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/dispatcher/client.js:528:3)
            at /Users/davidchen/Projects/non-linear-editor/node_modules/undici/lib/dispatcher/client.js:307:28
            at invokeTheCallbackFunction (/Users/davidchen/Projects/non-linear-editor/node_modules/jsdom/lib/jsdom/living/generated/Function.js:19:26)
            at /Users/davidchen/Projects/non-linear-editor/node_modules/jsdom/lib/jsdom/browser/Window.js:613:9
            at node:internal/process/task_queues:151:7
            at AsyncResource.runInAsyncScope (node:async_hooks:214:14)
            at AsyncResource.runMicrotask (node:internal/process/task_queues:148:8)
            at processTicksAndRejections (node:internal/process/task_queues:105:5),
        type: 'unhandled exception'
      }

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at VirtualConsole.<anonymous> (node_modules/@jest/environment-jsdom-abstract/build/index.js:87:23)
      at reportException (node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:70:28)
      at node_modules/jsdom/lib/jsdom/browser/Window.js:615:9

  ● GET /api/docs › JSON Format › should set cache-control header for JSON

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "node" test environment.

    TypeError: fastNowTimeout?.unref is not a function

      at refreshTimeout (node_modules/undici/lib/util/timers.js:205:21)
      at FastTimer.refresh (node_modules/undici/lib/util/timers.js:297:7)
      at new FastTimer (node_modules/undici/lib/util/timers.js:274:10)
      at Object.setFastTimeout (node_modules/undici/lib/util/timers.js:376:12)
      at Object.setupConnectTimeout (node_modules/undici/lib/core/util.js:842:32)
      at Client.connect (node_modules/undici/lib/core/connect.js:107:38)
      at connect (node_modules/undici/lib/dispatcher/client.js:419:21)
      at _resume (node_modules/undici/lib/dispatcher/client.js:594:7)
      at resume (node_modules/undici/lib/dispatcher/client.js:528:3)
      at node_modules/undici/lib/dispatcher/client.js:307:28
      at invokeTheCallbackFunction (node_modules/jsdom/lib/jsdom/living/generated/Function.js:19:26)
      at node_modules/jsdom/lib/jsdom/browser/Window.js:613:9

  ● GET /api/docs › Error Handling › should return 500 when file read fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "File not found"
    Received: undefined

      182 |       const data = await response.json();
      183 |       expect(data.error).toBe('Failed to load API documentation');
    > 184 |       expect(data.message).toBe('File not found');
          |                            ^
      185 |     });
      186 |
      187 |     it('should return 500 when YAML parsing fails', async () => {

      at Object.toBe (__tests__/api/docs/docs.test.ts:184:28)

  ● GET /api/docs › Error Handling › should return 500 when YAML parsing fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to load API documentation"
    Received: "Failed to parse API documentation"

      196 |       expect(response.status).toBe(500);
      197 |       const data = await response.json();
    > 198 |       expect(data.error).toBe('Failed to load API documentation');
          |                          ^
      199 |       expect(data.message).toBe('Invalid YAML');
      200 |     });
      201 |

      at Object.toBe (__tests__/api/docs/docs.test.ts:198:26)

  ● GET /api/docs › Error Handling › should handle unknown errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Unknown error"
    Received: undefined

      211 |       const data = await response.json();
      212 |       expect(data.error).toBe('Failed to load API documentation');
    > 213 |       expect(data.message).toBe('Unknown error');
          |                            ^
      214 |     });
      215 |   });
      216 |

      at Object.toBe (__tests__/api/docs/docs.test.ts:213:28)

  ● GET /api/docs › Response Structure › should return valid error structure on failure

    expect(received).toHaveProperty(path)

    Expected path: "message"
    Received path: []

    Received value: {"details": {"error": "Test error"}, "error": "Failed to load API documentation"}

      304 |       const data = await response.json();
      305 |       expect(data).toHaveProperty('error');
    > 306 |       expect(data).toHaveProperty('message');
          |                    ^
      307 |       expect(data.error).toBe('Failed to load API documentation');
      308 |       expect(data.message).toBe('Test error');
      309 |     });

      at Object.toHaveProperty (__tests__/api/docs/docs.test.ts:306:20)

FAIL __tests__/api/user/delete-account.test.ts
  ● DELETE /api/user/delete-account › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:105:36)

  ● DELETE /api/user/delete-account › Authentication › should proceed when user is authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:126:36)

  ● DELETE /api/user/delete-account › Rate Limiting › should enforce tier1 rate limiting (5/min)

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:144:36)

  ● DELETE /api/user/delete-account › Rate Limiting › should use user ID for rate limit identifier when authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:166:19)

  ● DELETE /api/user/delete-account › Data Deletion Flow › should delete user projects first (cascade deletion)

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:189:19)

  ● DELETE /api/user/delete-account › Data Deletion Flow › should delete user subscription data

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:209:19)

  ● DELETE /api/user/delete-account › Data Deletion Flow › should delete user activity history

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:229:19)

  ● DELETE /api/user/delete-account › Data Deletion Flow › should delete user roles

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:247:19)

  ● DELETE /api/user/delete-account › Data Deletion Flow › should delete user account using service role client

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:265:19)

  ● DELETE /api/user/delete-account › Storage Cleanup › should delete assets from storage bucket

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:296:19)

  ● DELETE /api/user/delete-account › Storage Cleanup › should delete frames from storage bucket

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:330:19)

  ● DELETE /api/user/delete-account › Storage Cleanup › should continue deletion even if storage cleanup fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:352:36)

  ● DELETE /api/user/delete-account › Error Handling › should return 500 when project deletion fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:368:36)

  ● DELETE /api/user/delete-account › Error Handling › should return 500 when user account deletion fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:390:36)

  ● DELETE /api/user/delete-account › Error Handling › should continue if subscription deletion fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:416:36)

  ● DELETE /api/user/delete-account › Error Handling › should continue if activity history deletion fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:443:36)

  ● DELETE /api/user/delete-account › Error Handling › should continue if roles deletion fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:469:36)

  ● DELETE /api/user/delete-account › Error Handling › should handle unexpected errors gracefully

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:481:36)

  ● DELETE /api/user/delete-account › Success Response › should return 200 with success message on complete deletion

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:503:36)

  ● DELETE /api/user/delete-account › Audit Logging › should log account deletion to activity history

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:526:19)

  ● DELETE /api/user/delete-account › GDPR Compliance › should delete all personal data in correct order

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:558:19)

  ● DELETE /api/user/delete-account › GDPR Compliance › should use service role client for privileged operations

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:584:19)

FAIL __tests__/api/video/upscale-status.test.ts
  ● GET /api/video/upscale-status › API Key Configuration › should return 500 when FAL_API_KEY not configured

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:102:24)

  ● GET /api/video/upscale-status › Status Polling › should return in progress status

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:119:24)

  ● GET /api/video/upscale-status › Status Polling › should return in queue status

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:137:24)

  ● GET /api/video/upscale-status › Status Polling › should return failed status

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:153:24)

  ● GET /api/video/upscale-status › Completed Status › should download and save upscaled video

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:196:24)

  ● GET /api/video/upscale-status › Completed Status › should handle missing video URL

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:220:24)

  ● GET /api/video/upscale-status › Completed Status › should handle upload errors with cleanup

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:249:24)

  ● GET /api/video/upscale-status › Completed Status › should cleanup storage on database error

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:288:24)

FAIL __tests__/api/audio/suno-status.test.ts
  ● GET /api/audio/suno/status › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:69:33)

  ● GET /api/audio/suno/status › Input Validation › should return 400 when taskId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:86:33)

  ● GET /api/audio/suno/status › Input Validation › should return 400 when projectId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:101:33)

  ● GET /api/audio/suno/status › Input Validation › should return 400 when both parameters are missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:115:33)

  ● GET /api/audio/suno/status › Project Ownership › should return 403 when user does not own project

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:136:33)

  ● GET /api/audio/suno/status › Success Cases › should return status for a pending task

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:166:33)

  ● GET /api/audio/suno/status › Success Cases › should return status for a completed task with audio URL

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:204:33)

  ● GET /api/audio/suno/status › Success Cases › should call Comet API with correct parameters

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:232:16)

  ● GET /api/audio/suno/status › Success Cases › should handle multiple tasks in response

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:266:33)

  ● GET /api/audio/suno/status › Error Handling › should return 500 when API key is not configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:284:33)

  ● GET /api/audio/suno/status › Error Handling › should return error when Comet API fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:305:33)

  ● GET /api/audio/suno/status › Error Handling › should handle API response with error code

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:330:33)

  ● GET /api/audio/suno/status › Error Handling › should handle network errors

    expect(received).rejects.toThrow(expected)

    Expected substring: "Network error"
    Received message:   "Cannot read properties of undefined (reading 'params')"

           97 |     // Handle Next.js 16's async params
           98 |     let params: TParams = {} as TParams;
        >  99 |     const rawParams = context.params;
              |                               ^
          100 |
          101 |     try {
          102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:347:23)
      at Object.toThrow (node_modules/expect/build/index.js:2155:20)
      at Object.toThrow (__tests__/api/audio/suno-status.test.ts:347:46)

  ● GET /api/audio/suno/status › Task Status Values › should handle pending status

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:373:35)

  ● GET /api/audio/suno/status › Task Status Values › should handle processing status

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:373:35)

  ● GET /api/audio/suno/status › Task Status Values › should handle completed status

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:373:35)

  ● GET /api/audio/suno/status › Task Status Values › should handle failed status

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:373:35)

FAIL __tests__/api/video/split-audio.test.ts
  ● POST /api/video/split-audio › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:62:34)

  ● POST /api/video/split-audio › Authentication › should return 401 when auth error occurs

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:82:34)

  ● POST /api/video/split-audio › Input Validation › should return 400 when assetId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:97:34)

  ● POST /api/video/split-audio › Input Validation › should return 400 when projectId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:112:34)

  ● POST /api/video/split-audio › Input Validation › should return 400 when both fields are missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:125:34)

  ● POST /api/video/split-audio › Asset Verification › should return 403 when asset not found

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:146:34)

  ● POST /api/video/split-audio › Asset Verification › should verify asset belongs to authenticated user

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:172:17)

  ● POST /api/video/split-audio › Asset Verification › should return 400 when asset type is not video

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:197:34)

  ● POST /api/video/split-audio › Storage Download › should handle storage download errors

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:232:34)

  ● POST /api/video/split-audio › Success Cases › should return client-side processing recommendation

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:268:34)

  ● POST /api/video/split-audio › Success Cases › should include video URL in response

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:305:34)

  ● POST /api/video/split-audio › Success Cases › should fallback to storage_url when sourceUrl not in metadata

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:339:34)

  ● POST /api/video/split-audio › Logging › should log processing events

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:374:17)

  ● POST /api/video/split-audio › Logging › should log warnings for missing fields

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:398:17)

  ● POST /api/video/split-audio › Logging › should log errors for asset not found

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:419:17)

FAIL __tests__/api/video/split-scenes.test.ts
  ● POST /api/video/split-scenes › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:107:34)

  ● POST /api/video/split-scenes › Input Validation › should return 400 when assetId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:120:34)

  ● POST /api/video/split-scenes › Input Validation › should return 400 when projectId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:131:34)

  ● POST /api/video/split-scenes › Input Validation › should return 400 for invalid assetId UUID format

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:142:34)

  ● POST /api/video/split-scenes › Input Validation › should return 400 for invalid projectId UUID format

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:153:34)

  ● POST /api/video/split-scenes › Configuration Validation › should return 503 when GOOGLE_SERVICE_ACCOUNT is not configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:179:34)

  ● POST /api/video/split-scenes › Configuration Validation › should return 503 when GCS_BUCKET_NAME is not configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:205:34)

  ● POST /api/video/split-scenes › Configuration Validation › should return 503 when GCS bucket does not exist

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:237:34)

  ● POST /api/video/split-scenes › Asset Verification › should return 403 when asset not found

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:252:34)

  ● POST /api/video/split-scenes › Asset Verification › should return 400 when asset type is not video

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:268:34)

  ● POST /api/video/split-scenes › Existing Scenes › should return existing scenes if already detected

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:296:34)

  ● POST /api/video/split-scenes › Success Cases › should successfully detect scenes

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:368:34)

FAIL __tests__/api/image/generate.test.ts
  ● POST /api/image/generate › Success Cases › should generate images successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      143 |
      144 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 145 |       expect(response.status).toBe(200);
          |                               ^
      146 |       const data = await response.json();
      147 |       expect(data.assets).toHaveLength(1);
      148 |       expect(data.message).toContain('Generated 1 image(s) successfully');

      at Object.toBe (__tests__/api/image/generate.test.ts:145:31)


ReferenceError: You are trying to `import` a file after the Jest environment has been torn down. From __tests__/api/docs/docs.test.ts.

      at lazyllhttp (node_modules/undici/lib/dispatcher/client-h1.js:64:55)
      at connectH1 (node_modules/undici/lib/dispatcher/client-h1.js:778:22)
      at node_modules/undici/lib/dispatcher/client.js:444:11
      at TLSSocket.<anonymous> (node_modules/undici/lib/core/connect.js:117:11)

ReferenceError: You are trying to `import` a file after the Jest environment has been torn down. From __tests__/api/docs/docs.test.ts.

      at lazyllhttp (node_modules/undici/lib/dispatcher/client-h1.js:79:36)
      at connectH1 (node_modules/undici/lib/dispatcher/client-h1.js:778:22)
      at node_modules/undici/lib/dispatcher/client.js:444:11
      at TLSSocket.<anonymous> (node_modules/undici/lib/core/connect.js:117:11)
TypeError: Cannot read properties of null (reading '_location')
    at Window.get location [as location] (/Users/davidchen/Projects/non-linear-editor/node_modules/jsdom/lib/jsdom/browser/Window.js:420:79)
    at /Users/davidchen/Projects/non-linear-editor/node_modules/jsdom/lib/jsdom/browser/Window.js:615:43
    at node:internal/process/task_queues:151:7
    at AsyncResource.runInAsyncScope (node:async_hooks:214:14)
    at AsyncResource.runMicrotask (node:internal/process/task_queues:148:8)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
FAIL __tests__/api/video/generate.test.ts
  ● POST /api/video/generate › Rate Limiting › should apply expensive rate limit for video generation

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - "video-gen:550e8400-e29b-41d4-a716-446655440000",
    + "user:550e8400-e29b-41d4-a716-446655440000",
      {"max": 10, "windowMs": 60000},

    Number of calls: 1

      174 |       await POST(mockRequest, { params: Promise.resolve({}) });
      175 |
    > 176 |       expect(checkRateLimit).toHaveBeenCalledWith(
          |                              ^
      177 |         `video-gen:${mockUser.id}`,
      178 |         RATE_LIMITS.tier2_resource_creation
      179 |       );

      at Object.toHaveBeenCalledWith (__tests__/api/video/generate.test.ts:176:30)

  ● POST /api/video/generate › Input Validation › should return 400 when validation fails

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      200 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      201 |
    > 202 |       expect(response.status).toBe(400);
          |                               ^
      203 |     });
      204 |
      205 |     it('should validate all required fields', async () => {

      at Object.toBe (__tests__/api/video/generate.test.ts:202:31)

  ● POST /api/video/generate › Input Validation › should validate all required fields

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      225 |       await POST(mockRequest, { params: Promise.resolve({}) });
      226 |
    > 227 |       expect(validateAll).toHaveBeenCalled();
          |                           ^
      228 |     });
      229 |   });
      230 |

      at Object.toHaveBeenCalled (__tests__/api/video/generate.test.ts:227:27)

  ● POST /api/video/generate › Project Ownership Verification › should return 404 when project not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      249 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      250 |
    > 251 |       expect(response.status).toBe(404);
          |                               ^
      252 |     });
      253 |
      254 |     it('should return 403 when user does not own project', async () => {

      at Object.toBe (__tests__/api/video/generate.test.ts:251:31)

  ● POST /api/video/generate › Project Ownership Verification › should return 403 when user does not own project

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      271 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      272 |
    > 273 |       expect(response.status).toBe(403);
          |                               ^
      274 |     });
      275 |   });
      276 |

      at Object.toBe (__tests__/api/video/generate.test.ts:273:31)

  ● POST /api/video/generate › Video Generation - Google Veo › should generate video with Veo for Google models

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      297 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      298 |
    > 299 |       expect(response.status).toBe(200);
          |                               ^
      300 |       const data = await response.json();
      301 |       expect(data.operationName).toBe('operations/veo-123');
      302 |       expect(data.status).toBe('processing');

      at Object.toBe (__tests__/api/video/generate.test.ts:299:31)

  ● POST /api/video/generate › Video Generation - Google Veo › should pass all Veo parameters correctly

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"compressionQuality": "high", "enhancePrompt": true, "generateAudio": true, "model": "veo-3.1-generate-preview", "negativePrompt": "blurry, low quality", "personGeneration": true, "prompt": "Test video", "sampleCount": 2, "seed": 12345}

    Number of calls: 0

      340 |       await POST(mockRequest, { params: Promise.resolve({}) });
      341 |
    > 342 |       expect(generateVideo).toHaveBeenCalledWith(
          |                             ^
      343 |         expect.objectContaining({
      344 |           prompt: 'Test video',
      345 |           model: 'veo-3.1-generate-preview',

      at Object.toHaveBeenCalledWith (__tests__/api/video/generate.test.ts:342:29)

  ● POST /api/video/generate › Video Generation - FAL Models › should use FAL for Seedance model

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      379 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      380 |
    > 381 |       expect(response.status).toBe(200);
          |                               ^
      382 |       const data = await response.json();
      383 |       expect(data.operationName).toBe('fal:seedance-1.0-pro:fal-request-123');
      384 |       expect(generateFalVideo).toHaveBeenCalled();

      at Object.toBe (__tests__/api/video/generate.test.ts:381:31)

  ● POST /api/video/generate › Video Generation - FAL Models › should use FAL for MiniMax model

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      407 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      408 |
    > 409 |       expect(response.status).toBe(200);
          |                               ^
      410 |       const data = await response.json();
      411 |       expect(data.operationName).toContain('minimax-hailuo-02-pro');
      412 |     });

      at Object.toBe (__tests__/api/video/generate.test.ts:409:31)

  ● POST /api/video/generate › Image-to-Video Generation › should generate video from image asset

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"auth": {"getSession": [Function mockConstructor], "getUser": [Function mockConstructor], "resetPasswordForEmail": [Function mockConstructor], "signInWithPassword": [Function mockConstructor], "signOut": [Function mockConstructor], "signUp": [Function mockConstructor], "updateUser": [Function mockConstructor]}, "channel": [Function mockConstructor], "delete": [Function mockConstructor], "eq": [Function mockConstructor], "from": [Function mockConstructor], "gt": [Function mockConstructor], "gte": [Function mockConstructor], "ilike": [Function mockConstructor], "in": [Function mockConstructor], "insert": [Function mockConstructor], "is": [Function mockConstructor], "like": [Function mockConstructor], "limit": [Function mockConstructor], "lt": [Function mockConstructor], "lte": [Function mockConstructor], "maybeSingle": [Function mockConstructor], "mockRejectedValue": [Function anonymous], "mockResolvedValue": [Function anonymous], "neq": [Function mockConstructor], "order": [Function mockConstructor], "range": [Function mockConstructor], "removeChannel": [Function mockConstructor], "select": [Function mockConstructor], "single": [Function mockConstructor], "storage": {"copy": [Function mockConstructor], "createSignedUrl": [Function mockConstructor], "createSignedUrls": [Function mockConstructor], "from": [Function mockConstructor], "getPublicUrl": [Function mockConstructor], "list": [Function mockConstructor], "move": [Function mockConstructor], "remove": [Function mockConstructor], "upload": [Function mockConstructor]}, "update": [Function mockConstructor], "upsert": [Function mockConstructor]}, "image-asset-id", Any<String>

    Number of calls: 0

      452 |       await POST(mockRequest, { params: Promise.resolve({}) });
      453 |
    > 454 |       expect(verifyAssetOwnership).toHaveBeenCalledWith(
          |                                    ^
      455 |         mockSupabase,
      456 |         'image-asset-id',
      457 |         expect.any(String)

      at Object.toHaveBeenCalledWith (__tests__/api/video/generate.test.ts:454:36)

  ● POST /api/video/generate › Image-to-Video Generation › should return 404 when image asset not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      488 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      489 |
    > 490 |       expect(response.status).toBe(404);
          |                               ^
      491 |     });
      492 |   });
      493 |

      at Object.toBe (__tests__/api/video/generate.test.ts:490:31)

  ● POST /api/video/generate › Error Handling › should return 500 when video generation fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "API error"
    Received: "_serverLogger.serverLogger.child is not a function"

      514 |       expect(response.status).toBe(500);
      515 |       const data = await response.json();
    > 516 |       expect(data.error).toBe('API error');
          |                          ^
      517 |     });
      518 |
      519 |     it('should handle malformed JSON body', async () => {

      at Object.toBe (__tests__/api/video/generate.test.ts:516:26)

  ● POST /api/video/generate › Error Handling › should handle malformed JSON body

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      527 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      528 |
    > 529 |       expect(response.status).toBe(400);
          |                               ^
      530 |       const data = await response.json();
      531 |       expect(data.error).toBe('Invalid JSON body');
      532 |     });

      at Object.toBe (__tests__/api/video/generate.test.ts:529:31)

  ● POST /api/video/generate › Response Format › should return operationName and status

    expect(received).toHaveProperty(path)

    Expected path: "operationName"
    Received path: []

    Received value: {"error": "_serverLogger.serverLogger.child is not a function"}

      554 |       const data = await response.json();
      555 |
    > 556 |       expect(data).toHaveProperty('operationName');
          |                    ^
      557 |       expect(data).toHaveProperty('status', 'processing');
      558 |       expect(data).toHaveProperty('message');
      559 |     });

      at Object.toHaveProperty (__tests__/api/video/generate.test.ts:556:20)

FAIL __tests__/api/ai/chat.test.ts
  ● Console

    console.error
      Error in withAuth mock: Error: Some other error
          at Object.<anonymous> (/Users/davidchen/Projects/non-linear-editor/__tests__/api/ai/chat.test.ts:541:30)
          at Promise.finally.completed (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1557:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1497:10)
          at _callCircusTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1007:40)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at _runTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:947:3)
          at /Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:849:7
          at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:862:11)
          at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:857:11)
          at _runTestsForDescribeBlock (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:857:11)
          at run (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:761:3)
          at runAndTransformResultsToJestFormat (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/jestAdapterInit.js:1918:21)
          at jestAdapter (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-circus/build/runner.js:101:19)
          at runTestInternal (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:275:16)
          at runTest (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:343:7)
          at Object.worker (/Users/davidchen/Projects/non-linear-editor/node_modules/jest-runner/build/testWorker.js:497:12)

      35 |       return;
      36 |     }
    > 37 |     originalError.call(console, ...args);
         |                   ^
      38 |   };
      39 |
      40 |   console.warn = (...args) => {

      at console.call [as error] (jest.setup-after-env.js:37:19)
      at error (__tests__/api/ai/chat.test.ts:51:17)
      at Object.<anonymous> (__tests__/api/ai/chat.test.ts:553:24)

  ● POST /api/ai/chat › Input Validation › should return 400 when projectId is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: "projectId is required"
    Received: "projectId must be a string"

      203 |       expect(response.status).toBe(400);
      204 |       const data = await response.json();
    > 205 |       expect(data.error).toBe('projectId is required');
          |                          ^
      206 |       expect(data.field).toBe('projectId');
      207 |     });
      208 |

      at Object.toBe (__tests__/api/ai/chat.test.ts:205:26)

FAIL __tests__/api/projects/chat.test.ts
  ● GET /api/projects/[projectId]/chat › Input Validation › should return 400 for invalid UUID format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 200

      126 |       });
      127 |
    > 128 |       expect(response.status).toBe(400);
          |                               ^
      129 |       const data = await response.json();
      130 |       expect(data.error).toContain('UUID');
      131 |     });

      at Object.toBe (__tests__/api/projects/chat.test.ts:128:31)

  ● GET /api/projects/[projectId]/chat › Input Validation › should return 400 for empty projectId

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 200

      139 |       });
      140 |
    > 141 |       expect(response.status).toBe(400);
          |                               ^
      142 |     });
      143 |   });
      144 |

      at Object.toBe (__tests__/api/projects/chat.test.ts:141:31)

  ● DELETE /api/projects/[projectId]/chat › Input Validation › should return 400 for invalid UUID format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 200

      332 |       });
      333 |
    > 334 |       expect(response.status).toBe(400);
          |                               ^
      335 |       const data = await response.json();
      336 |       expect(data.error).toContain('UUID');
      337 |     });

      at Object.toBe (__tests__/api/projects/chat.test.ts:334:31)

FAIL __tests__/api/frames/edit.test.ts
  ● POST /api/frames/[frameId]/edit › Authorization › should return 403 when user does not own the asset

    expect(received).toContain(expected) // indexOf

    Expected substring: "do not own this asset"
    Received string:    "Unauthorized - you do not own this project"

      420 |       expect(response.status).toBe(403);
      421 |       const data = await response.json();
    > 422 |       expect(data.error).toContain('do not own this asset');
          |                          ^
      423 |       expect(auditSecurityEvent).toHaveBeenCalled();
      424 |     });
      425 |   });

      at Object.toContain (__tests__/api/frames/edit.test.ts:422:26)

  ● POST /api/frames/[frameId]/edit › API Configuration › should return 503 when API key is not configured

    expect(received).toBe(expected) // Object.is equality

    Expected: 503
    Received: 403

      449 |       });
      450 |
    > 451 |       expect(response.status).toBe(503);
          |                               ^
      452 |       const data = await response.json();
      453 |       expect(data.error).toContain('API key not configured');
      454 |     });

      at Object.toBe (__tests__/api/frames/edit.test.ts:451:31)

  ● POST /api/frames/[frameId]/edit › API Configuration › should accept GEMINI_API_KEY as fallback

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      507 |       });
      508 |
    > 509 |       expect(response.status).toBe(200);
          |                               ^
      510 |     });
      511 |   });
      512 |

      at Object.toBe (__tests__/api/frames/edit.test.ts:509:31)

  ● POST /api/frames/[frameId]/edit › Success Cases - Global Mode › should successfully edit frame in global mode

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      567 |       });
      568 |
    > 569 |       expect(response.status).toBe(200);
          |                               ^
      570 |       const data = await response.json();
      571 |       expect(data.success).toBe(true);
      572 |       expect(data.edits).toHaveLength(4); // Default numVariations

      at Object.toBe (__tests__/api/frames/edit.test.ts:569:31)

  ● POST /api/frames/[frameId]/edit › Success Cases - Global Mode › should generate single variation when numVariations is 1

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      587 |       });
      588 |
    > 589 |       expect(response.status).toBe(200);
          |                               ^
      590 |       const data = await response.json();
      591 |       expect(data.edits).toHaveLength(1);
      592 |       expect(mockGenerateContent).toHaveBeenCalledTimes(1);

      at Object.toBe (__tests__/api/frames/edit.test.ts:589:31)

  ● POST /api/frames/[frameId]/edit › Success Cases - Global Mode › should increment version numbers correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      667 |       });
      668 |
    > 669 |       expect(response.status).toBe(200);
          |                               ^
      670 |       const data = await response.json();
      671 |       expect(data.edits).toHaveLength(2);
      672 |       expect(data.edits[0].version).toBe(6);

      at Object.toBe (__tests__/api/frames/edit.test.ts:669:31)

  ● POST /api/frames/[frameId]/edit › Success Cases - Crop Mode › should edit with crop parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      740 |       });
      741 |
    > 742 |       expect(response.status).toBe(200);
          |                               ^
      743 |       expect(insertData).toMatchObject({
      744 |         mode: 'crop',
      745 |         crop_x: 100,

      at Object.toBe (__tests__/api/frames/edit.test.ts:742:31)

  ● POST /api/frames/[frameId]/edit › Success Cases - Crop Mode › should include crop coordinates in prompt

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ArrayContaining [ObjectContaining {"text": StringContaining "coordinates (50, 75)"}]

    Number of calls: 0

      802 |       await POST(mockRequest, { params: Promise.resolve({ frameId: validFrameId }) });
      803 |
    > 804 |       expect(mockGenerateContent).toHaveBeenCalledWith(
          |                                   ^
      805 |         expect.arrayContaining([
      806 |           expect.objectContaining({
      807 |             text: expect.stringContaining('coordinates (50, 75)'),

      at Object.toHaveBeenCalledWith (__tests__/api/frames/edit.test.ts:804:35)

  ● POST /api/frames/[frameId]/edit › Reference Images › should fetch and include reference images

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "https://example.com/ref1.jpg"

    Number of calls: 0

      866 |       await POST(mockRequest, { params: Promise.resolve({ frameId: validFrameId }) });
      867 |
    > 868 |       expect(global.fetch).toHaveBeenCalledWith('https://example.com/ref1.jpg');
          |                            ^
      869 |       expect(global.fetch).toHaveBeenCalledWith('https://example.com/ref2.jpg');
      870 |       expect(mockGenerateContent).toHaveBeenCalledWith(
      871 |         expect.arrayContaining([

      at Object.toHaveBeenCalledWith (__tests__/api/frames/edit.test.ts:868:28)

  ● POST /api/frames/[frameId]/edit › Reference Images › should include reference image count in metadata

    expect(received).toMatchObject(expected)

    Matcher error: received value must be a non-null object

    Received has value: null

      931 |       await POST(mockRequest, { params: Promise.resolve({ frameId: validFrameId }) });
      932 |
    > 933 |       expect(insertData).toMatchObject({
          |                          ^
      934 |         metadata: expect.objectContaining({
      935 |           referenceImages: 1,
      936 |         }),

      at Object.toMatchObject (__tests__/api/frames/edit.test.ts:933:26)

  ● POST /api/frames/[frameId]/edit › Error Handling › should continue with other variations if one fails

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      988 |       });
      989 |
    > 990 |       expect(response.status).toBe(200);
          |                               ^
      991 |       const data = await response.json();
      992 |       expect(data.edits).toHaveLength(2); // 2 successful, 1 failed
      993 |     });

      at Object.toBe (__tests__/api/frames/edit.test.ts:990:31)

  ● POST /api/frames/[frameId]/edit › Error Handling › should handle Gemini API errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 403

      1034 |       });
      1035 |
    > 1036 |       expect(response.status).toBe(500);
           |                               ^
      1037 |       const data = await response.json();
      1038 |       expect(data.error).toBe('Internal server error');
      1039 |     });

      at Object.toBe (__tests__/api/frames/edit.test.ts:1036:31)

  ● POST /api/frames/[frameId]/edit › Error Handling › should handle frame fetch errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 403

      1069 |       });
      1070 |
    > 1071 |       expect(response.status).toBe(500);
           |                               ^
      1072 |       const data = await response.json();
      1073 |       expect(data.error).toBe('Internal server error');
      1074 |     });

      at Object.toBe (__tests__/api/frames/edit.test.ts:1071:31)

  ● POST /api/frames/[frameId]/edit › Audit Logging › should log successful completion

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 2
    Received number of calls: 1

      1153 |
      1154 |       // Should be called twice: once for request, once for completion
    > 1155 |       expect(auditLog).toHaveBeenCalledTimes(2);
           |                        ^
      1156 |       expect(auditLog).toHaveBeenNthCalledWith(
      1157 |         2,
      1158 |         expect.objectContaining({

      at Object.toHaveBeenCalledTimes (__tests__/api/frames/edit.test.ts:1155:24)

PASS __tests__/api/audio/suno-generate.test.ts
PASS __tests__/api/admin/cache.test.ts
PASS __tests__/api/projects/create.test.ts
PASS __tests__/api/auth/signout.test.ts
PASS __tests__/api/audio/elevenlabs/generate.test.ts
PASS __tests__/api/assets/get.test.ts
PASS __tests__/api/admin/change-tier.test.ts
FAIL __tests__/api/video/generate-audio-status.test.ts
  ● GET /api/video/generate-audio-status › API Key Configuration › should return 500 when FAL_API_KEY is not configured

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:115:24)

  ● GET /api/video/generate-audio-status › Status Check › should check status with FAL.ai API

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:129:7)

  ● GET /api/video/generate-audio-status › Status Check › should handle status check errors

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:154:24)

  ● GET /api/video/generate-audio-status › Status Check › should handle status check timeout

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:170:24)

  ● GET /api/video/generate-audio-status › Processing Status › should return processing status when job is in progress

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:189:24)

  ● GET /api/video/generate-audio-status › Failed Status › should handle FAILED status

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:213:24)

  ● GET /api/video/generate-audio-status › Failed Status › should handle ERROR status

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:235:24)

  ● GET /api/video/generate-audio-status › Completed Status - Download and Storage › should download and upload audio on completion

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:292:24)

  ● GET /api/video/generate-audio-status › Completed Status - Download and Storage › should handle missing audio URL in result

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:317:24)

  ● GET /api/video/generate-audio-status › Completed Status - Download and Storage › should handle audio download failure

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:345:24)

  ● GET /api/video/generate-audio-status › Completed Status - Download and Storage › should handle storage upload failure

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:376:24)

  ● GET /api/video/generate-audio-status › Completed Status - Download and Storage › should handle database asset creation failure

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:422:24)

  ● GET /api/video/generate-audio-status › Alternative Audio URL Formats › should handle audio_url field

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:472:24)

  ● GET /api/video/generate-audio-status › Alternative Audio URL Formats › should handle output.url field

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:520:24)

Summary of all failing tests
FAIL __tests__/api/export/export.test.ts
  ● POST /api/export › Feature Flag › should return 503 when export is disabled

    expect(received).toBe(expected) // Object.is equality

    Expected: 503
    Received: 500

      105 |
      106 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 107 |       expect(response.status).toBe(503);
          |                               ^
      108 |     });
      109 |   });
      110 |

      at Object.toBe (__tests__/api/export/export.test.ts:107:31)

  ● POST /api/export › Input Validation - Required Fields › should return 400 when projectId is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      128 |
      129 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 130 |       expect(response.status).toBe(400);
          |                               ^
      131 |     });
      132 |
      133 |     it('should return 400 when timeline is missing', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:130:31)

  ● POST /api/export › Input Validation - Required Fields › should return 400 when timeline is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      149 |
      150 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 151 |       expect(response.status).toBe(400);
          |                               ^
      152 |     });
      153 |
      154 |     it('should return 400 when outputSpec is missing', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:151:31)

  ● POST /api/export › Input Validation - Required Fields › should return 400 when outputSpec is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      163 |
      164 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 165 |       expect(response.status).toBe(400);
          |                               ^
      166 |     });
      167 |
      168 |     it('should return 400 when all fields are missing', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:165:31)

  ● POST /api/export › Input Validation - Required Fields › should return 400 when all fields are missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      174 |
      175 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 176 |       expect(response.status).toBe(400);
          |                               ^
      177 |     });
      178 |   });
      179 |

      at Object.toBe (__tests__/api/export/export.test.ts:176:31)

  ● POST /api/export › Timeline Validation › should return 400 when timeline.clips is not an array

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      198 |
      199 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 200 |       expect(response.status).toBe(400);
          |                               ^
      201 |     });
      202 |
      203 |     it('should return 400 when clips is missing', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:200:31)

  ● POST /api/export › Timeline Validation › should return 400 when clips is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      220 |
      221 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 222 |       expect(response.status).toBe(400);
          |                               ^
      223 |     });
      224 |   });
      225 |

      at Object.toBe (__tests__/api/export/export.test.ts:222:31)

  ● POST /api/export › ProjectId Validation › should return 400 for invalid projectId UUID

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      244 |
      245 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 246 |       expect(response.status).toBe(400);
          |                               ^
      247 |     });
      248 |   });
      249 |

      at Object.toBe (__tests__/api/export/export.test.ts:246:31)

  ● POST /api/export › OutputSpec Validation - Format › should return 400 for invalid format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      268 |
      269 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 270 |       expect(response.status).toBe(400);
          |                               ^
      271 |     });
      272 |   });
      273 |

      at Object.toBe (__tests__/api/export/export.test.ts:270:31)

  ● POST /api/export › OutputSpec Validation - Dimensions › should return 400 for width below minimum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      292 |
      293 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 294 |       expect(response.status).toBe(400);
          |                               ^
      295 |     });
      296 |
      297 |     it('should return 400 for width above maximum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:294:31)

  ● POST /api/export › OutputSpec Validation - Dimensions › should return 400 for width above maximum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      314 |
      315 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 316 |       expect(response.status).toBe(400);
          |                               ^
      317 |     });
      318 |
      319 |     it('should return 400 for height below minimum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:316:31)

  ● POST /api/export › OutputSpec Validation - Dimensions › should return 400 for height below minimum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      336 |
      337 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 338 |       expect(response.status).toBe(400);
          |                               ^
      339 |     });
      340 |
      341 |     it('should return 400 for height above maximum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:338:31)

  ● POST /api/export › OutputSpec Validation - Dimensions › should return 400 for height above maximum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      358 |
      359 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 360 |       expect(response.status).toBe(400);
          |                               ^
      361 |     });
      362 |
      363 |     it('should return 400 for negative width', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:360:31)

  ● POST /api/export › OutputSpec Validation - Dimensions › should return 400 for negative width

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      380 |
      381 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 382 |       expect(response.status).toBe(400);
          |                               ^
      383 |     });
      384 |
      385 |     it('should return 400 for negative height', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:382:31)

  ● POST /api/export › OutputSpec Validation - Dimensions › should return 400 for negative height

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      402 |
      403 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 404 |       expect(response.status).toBe(400);
          |                               ^
      405 |     });
      406 |   });
      407 |

      at Object.toBe (__tests__/api/export/export.test.ts:404:31)

  ● POST /api/export › OutputSpec Validation - FPS › should return 400 for fps below minimum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      426 |
      427 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 428 |       expect(response.status).toBe(400);
          |                               ^
      429 |     });
      430 |
      431 |     it('should return 400 for fps above maximum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:428:31)

  ● POST /api/export › OutputSpec Validation - FPS › should return 400 for fps above maximum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      448 |
      449 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 450 |       expect(response.status).toBe(400);
          |                               ^
      451 |     });
      452 |   });
      453 |

      at Object.toBe (__tests__/api/export/export.test.ts:450:31)

  ● POST /api/export › OutputSpec Validation - Bitrates › should return 400 for vBitrateK below minimum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      472 |
      473 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 474 |       expect(response.status).toBe(400);
          |                               ^
      475 |     });
      476 |
      477 |     it('should return 400 for vBitrateK above maximum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:474:31)

  ● POST /api/export › OutputSpec Validation - Bitrates › should return 400 for vBitrateK above maximum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      494 |
      495 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 496 |       expect(response.status).toBe(400);
          |                               ^
      497 |     });
      498 |
      499 |     it('should return 400 for aBitrateK below minimum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:496:31)

  ● POST /api/export › OutputSpec Validation - Bitrates › should return 400 for aBitrateK below minimum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      516 |
      517 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 518 |       expect(response.status).toBe(400);
          |                               ^
      519 |     });
      520 |
      521 |     it('should return 400 for aBitrateK above maximum', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:518:31)

  ● POST /api/export › OutputSpec Validation - Bitrates › should return 400 for aBitrateK above maximum

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      538 |
      539 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 540 |       expect(response.status).toBe(400);
          |                               ^
      541 |     });
      542 |   });
      543 |

      at Object.toBe (__tests__/api/export/export.test.ts:540:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with invalid id UUID

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      573 |
      574 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 575 |       expect(response.status).toBe(400);
          |                               ^
      576 |     });
      577 |
      578 |     it('should return 400 for clip with invalid assetId UUID', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:575:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with invalid assetId UUID

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      606 |
      607 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 608 |       expect(response.status).toBe(400);
          |                               ^
      609 |     });
      610 |
      611 |     it('should return 400 for clip with negative start time', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:608:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with negative start time

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      639 |
      640 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 641 |       expect(response.status).toBe(400);
          |                               ^
      642 |     });
      643 |
      644 |     it('should return 400 for clip with end <= start', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:641:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with end <= start

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      672 |
      673 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 674 |       expect(response.status).toBe(400);
          |                               ^
      675 |     });
      676 |
      677 |     it('should return 400 for clip with end < start', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:674:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with end < start

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      705 |
      706 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 707 |       expect(response.status).toBe(400);
          |                               ^
      708 |     });
      709 |
      710 |     it('should return 400 for clip with negative timelinePosition', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:707:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with negative timelinePosition

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      738 |
      739 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 740 |       expect(response.status).toBe(400);
          |                               ^
      741 |     });
      742 |
      743 |     it('should return 400 for clip with negative trackIndex', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:740:31)

  ● POST /api/export › Clip Validation › should return 400 for clip with negative trackIndex

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      771 |
      772 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 773 |       expect(response.status).toBe(400);
          |                               ^
      774 |     });
      775 |   });
      776 |

      at Object.toBe (__tests__/api/export/export.test.ts:773:31)

  ● POST /api/export › Clip Optional Fields Validation › should return 400 for invalid volume (above max)

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      807 |
      808 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 809 |       expect(response.status).toBe(400);
          |                               ^
      810 |     });
      811 |
      812 |     it('should return 400 for invalid volume (negative)', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:809:31)

  ● POST /api/export › Clip Optional Fields Validation › should return 400 for invalid volume (negative)

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      841 |
      842 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 843 |       expect(response.status).toBe(400);
          |                               ^
      844 |     });
      845 |
      846 |     it('should return 400 for invalid opacity (above max)', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:843:31)

  ● POST /api/export › Clip Optional Fields Validation › should return 400 for invalid opacity (above max)

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      875 |
      876 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 877 |       expect(response.status).toBe(400);
          |                               ^
      878 |     });
      879 |
      880 |     it('should return 400 for invalid opacity (negative)', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:877:31)

  ● POST /api/export › Clip Optional Fields Validation › should return 400 for invalid opacity (negative)

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      909 |
      910 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 911 |       expect(response.status).toBe(400);
          |                               ^
      912 |     });
      913 |
      914 |     it('should return 400 for invalid speed (below min)', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:911:31)

  ● POST /api/export › Clip Optional Fields Validation › should return 400 for invalid speed (below min)

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      943 |
      944 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 945 |       expect(response.status).toBe(400);
          |                               ^
      946 |     });
      947 |
      948 |     it('should return 400 for invalid speed (above max)', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:945:31)

  ● POST /api/export › Clip Optional Fields Validation › should return 400 for invalid speed (above max)

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      977 |
      978 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 979 |       expect(response.status).toBe(400);
          |                               ^
      980 |     });
      981 |   });
      982 |

      at Object.toBe (__tests__/api/export/export.test.ts:979:31)

  ● POST /api/export › Transition Validation › should return 400 for invalid transition type

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      1016 |
      1017 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1018 |       expect(response.status).toBe(400);
           |                               ^
      1019 |     });
      1020 |
      1021 |     it('should return 400 for negative transition duration', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:1018:31)

  ● POST /api/export › Transition Validation › should return 400 for negative transition duration

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 429

      1053 |
      1054 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1055 |       expect(response.status).toBe(400);
           |                               ^
      1056 |     });
      1057 |   });
      1058 |

      at Object.toBe (__tests__/api/export/export.test.ts:1055:31)

  ● POST /api/export › Project Ownership Verification › should return error when user does not own project

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 429

      1095 |
      1096 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1097 |       expect(response.status).toBe(404);
           |                               ^
      1098 |     });
      1099 |
      1100 |     it('should return 403 when user lacks permission', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:1097:31)

  ● POST /api/export › Project Ownership Verification › should return 403 when user lacks permission

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 429

      1135 |
      1136 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1137 |       expect(response.status).toBe(403);
           |                               ^
      1138 |     });
      1139 |   });
      1140 |

      at Object.toBe (__tests__/api/export/export.test.ts:1137:31)

  ● POST /api/export › Database Errors › should return 500 when job creation fails

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 429

      1175 |
      1176 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1177 |       expect(response.status).toBe(500);
           |                               ^
      1178 |     });
      1179 |   });
      1180 |

      at Object.toBe (__tests__/api/export/export.test.ts:1177:31)

  ● POST /api/export › Success Cases › should create export job successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 202
    Received: 429

      1219 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      1220 |
    > 1221 |       expect(response.status).toBe(202);
           |                               ^
      1222 |       const data = await response.json();
      1223 |       expect(data.jobId).toBe('550e8400-e29b-41d4-a716-446655440000');
      1224 |       expect(data.status).toBe('queued');

      at Object.toBe (__tests__/api/export/export.test.ts:1221:31)

  ● POST /api/export › Success Cases › should accept empty clips array

    expect(received).toBe(expected) // Object.is equality

    Expected: 202
    Received: 429

      1252 |
      1253 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1254 |       expect(response.status).toBe(202);
           |                               ^
      1255 |     });
      1256 |
      1257 |     it('should accept webm format', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:1254:31)

  ● POST /api/export › Success Cases › should accept webm format

    expect(received).toBe(expected) // Object.is equality

    Expected: 202
    Received: 429

      1282 |
      1283 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 1284 |       expect(response.status).toBe(202);
           |                               ^
      1285 |     });
      1286 |   });
      1287 | });

      at Object.toBe (__tests__/api/export/export.test.ts:1284:31)

  ● GET /api/export › Input Validation › should return 400 when jobId is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      1322 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1323 |
    > 1324 |       expect(response.status).toBe(400);
           |                               ^
      1325 |     });
      1326 |
      1327 |     it('should return 400 for invalid jobId UUID', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:1324:31)

  ● GET /api/export › Input Validation › should return 400 for invalid jobId UUID

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      1330 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1331 |
    > 1332 |       expect(response.status).toBe(400);
           |                               ^
      1333 |     });
      1334 |
      1335 |     it('should return 400 for empty jobId', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:1332:31)

  ● GET /api/export › Input Validation › should return 400 for empty jobId

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      1338 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1339 |
    > 1340 |       expect(response.status).toBe(400);
           |                               ^
      1341 |     });
      1342 |   });
      1343 |

      at Object.toBe (__tests__/api/export/export.test.ts:1340:31)

  ● GET /api/export › Job Not Found › should return 404 when job does not exist

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      1355 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1356 |
    > 1357 |       expect(response.status).toBe(404);
           |                               ^
      1358 |     });
      1359 |
      1360 |     it('should return 404 when job belongs to different user', async () => {

      at Object.toBe (__tests__/api/export/export.test.ts:1357:31)

  ● GET /api/export › Job Not Found › should return 404 when job belongs to different user

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      1370 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1371 |
    > 1372 |       expect(response.status).toBe(404);
           |                               ^
      1373 |     });
      1374 |   });
      1375 |

      at Object.toBe (__tests__/api/export/export.test.ts:1372:31)

  ● GET /api/export › Success Cases - Job Status Mapping › should get export job with pending status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1391 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1392 |
    > 1393 |       expect(response.status).toBe(200);
           |                               ^
      1394 |       const data = await response.json();
      1395 |       expect(data.status).toBe('queued');
      1396 |     });

      at Object.toBe (__tests__/api/export/export.test.ts:1393:31)

  ● GET /api/export › Success Cases - Job Status Mapping › should get export job with processing status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1412 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1413 |
    > 1414 |       expect(response.status).toBe(200);
           |                               ^
      1415 |       const data = await response.json();
      1416 |       expect(data.status).toBe('processing');
      1417 |       expect(data.message).toContain('50%');

      at Object.toBe (__tests__/api/export/export.test.ts:1414:31)

  ● GET /api/export › Success Cases - Job Status Mapping › should get export job with completed status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1434 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1435 |
    > 1436 |       expect(response.status).toBe(200);
           |                               ^
      1437 |       const data = await response.json();
      1438 |       expect(data.status).toBe('completed');
      1439 |       expect(data.message).toContain('completed successfully');

      at Object.toBe (__tests__/api/export/export.test.ts:1436:31)

  ● GET /api/export › Success Cases - Job Status Mapping › should get export job with failed status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1457 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1458 |
    > 1459 |       expect(response.status).toBe(200);
           |                               ^
      1460 |       const data = await response.json();
      1461 |       expect(data.status).toBe('failed');
      1462 |       expect(data.message).toContain('Encoding failed');

      at Object.toBe (__tests__/api/export/export.test.ts:1459:31)

  ● GET /api/export › Success Cases - Job Status Mapping › should get export job with cancelled status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1479 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1480 |
    > 1481 |       expect(response.status).toBe(200);
           |                               ^
      1482 |       const data = await response.json();
      1483 |       expect(data.status).toBe('failed'); // Cancelled maps to failed
      1484 |     });

      at Object.toBe (__tests__/api/export/export.test.ts:1481:31)

  ● GET /api/export › Success Cases - Job Status Mapping › should handle failed job without error message

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1501 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1502 |
    > 1503 |       expect(response.status).toBe(200);
           |                               ^
      1504 |       const data = await response.json();
      1505 |       expect(data.message).toContain('Unknown error');
      1506 |     });

      at Object.toBe (__tests__/api/export/export.test.ts:1503:31)

  ● GET /api/export › Edge Cases › should handle job with unknown status

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      1524 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      1525 |
    > 1526 |       expect(response.status).toBe(200);
           |                               ^
      1527 |       const data = await response.json();
      1528 |       expect(data.status).toBe('queued'); // Default mapping
      1529 |     });

      at Object.toBe (__tests__/api/export/export.test.ts:1526:31)

FAIL __tests__/api/payments/checkout.test.ts
  ● POST /api/stripe/checkout › Authentication › should return 401 when user is not authenticated

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      82 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      83 |
    > 84 |       expect(response.status).toBe(401);
         |                               ^
      85 |       const data = await response.json();
      86 |       expect(data.error).toBe('Unauthorized');
      87 |     });

      at Object.toBe (__tests__/api/payments/checkout.test.ts:84:31)

  ● POST /api/stripe/checkout › Authentication › should return 401 when auth error occurs

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

       99 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      100 |
    > 101 |       expect(response.status).toBe(401);
          |                               ^
      102 |     });
      103 |   });
      104 |

      at Object.toBe (__tests__/api/payments/checkout.test.ts:101:31)

  ● POST /api/stripe/checkout › User Profile Validation › should return 500 when user profile not found

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to fetch user profile"
    Received: "`cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context"

      117 |       expect(response.status).toBe(500);
      118 |       const data = await response.json();
    > 119 |       expect(data.error).toBe('Failed to fetch user profile');
          |                          ^
      120 |     });
      121 |
      122 |     it('should return 400 when user already has active subscription', async () => {

      at Object.toBe (__tests__/api/payments/checkout.test.ts:119:26)

  ● POST /api/stripe/checkout › User Profile Validation › should return 400 when user already has active subscription

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      136 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      137 |
    > 138 |       expect(response.status).toBe(400);
          |                               ^
      139 |       const data = await response.json();
      140 |       expect(data.error).toBe('You already have an active subscription');
      141 |     });

      at Object.toBe (__tests__/api/payments/checkout.test.ts:138:31)

  ● POST /api/stripe/checkout › User Profile Validation › should allow checkout for free tier users

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      161 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      162 |
    > 163 |       expect(response.status).toBe(200);
          |                               ^
      164 |     });
      165 |
      166 |     it('should allow checkout for users with canceled subscriptions', async () => {

      at Object.toBe (__tests__/api/payments/checkout.test.ts:163:31)

  ● POST /api/stripe/checkout › User Profile Validation › should allow checkout for users with canceled subscriptions

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      184 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      185 |
    > 186 |       expect(response.status).toBe(200);
          |                               ^
      187 |     });
      188 |   });
      189 |

      at Object.toBe (__tests__/api/payments/checkout.test.ts:186:31)

  ● POST /api/stripe/checkout › Stripe Customer Creation › should create new Stripe customer when not exists

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"email": "test@example.com", "stripeCustomerId": null, "userId": "test-user-id"}

    Number of calls: 0

      216 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      217 |
    > 218 |       expect(getOrCreateStripeCustomer).toHaveBeenCalledWith({
          |                                         ^
      219 |         userId: mockUser.id,
      220 |         email: mockUser.email,
      221 |         stripeCustomerId: null,

      at Object.toHaveBeenCalledWith (__tests__/api/payments/checkout.test.ts:218:41)

  ● POST /api/stripe/checkout › Stripe Customer Creation › should use existing Stripe customer when available

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"email": "test@example.com", "stripeCustomerId": "cus_existing_123", "userId": "test-user-id"}

    Number of calls: 0

      247 |       await POST(mockRequest, { params: Promise.resolve({}) });
      248 |
    > 249 |       expect(getOrCreateStripeCustomer).toHaveBeenCalledWith({
          |                                         ^
      250 |         userId: mockUser.id,
      251 |         email: mockUser.email,
      252 |         stripeCustomerId: 'cus_existing_123',

      at Object.toHaveBeenCalledWith (__tests__/api/payments/checkout.test.ts:249:41)

  ● POST /api/stripe/checkout › Checkout Session Creation › should create checkout session with default price

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"cancelUrl": StringContaining "/settings", "customerId": "cus_test_123", "priceId": "price_test_premium", "successUrl": StringContaining "/settings?session_id=", "userId": "test-user-id"}

    Number of calls: 0

      277 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      278 |
    > 279 |       expect(createCheckoutSession).toHaveBeenCalledWith({
          |                                     ^
      280 |         customerId: 'cus_test_123',
      281 |         priceId: 'price_test_premium',
      282 |         userId: mockUser.id,

      at Object.toHaveBeenCalledWith (__tests__/api/payments/checkout.test.ts:279:37)

  ● POST /api/stripe/checkout › Checkout Session Creation › should create checkout session with custom price

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"priceId": "price_custom_123"}

    Number of calls: 0

      310 |       await POST(mockRequest, { params: Promise.resolve({}) });
      311 |
    > 312 |       expect(createCheckoutSession).toHaveBeenCalledWith(
          |                                     ^
      313 |         expect.objectContaining({
      314 |           priceId: 'price_custom_123',
      315 |         })

      at Object.toHaveBeenCalledWith (__tests__/api/payments/checkout.test.ts:312:37)

  ● POST /api/stripe/checkout › Checkout Session Creation › should return 500 when price ID not configured

    expect(received).toBe(expected) // Object.is equality

    Expected: "Price ID not configured"
    Received: "`cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context"

      339 |       expect(response.status).toBe(500);
      340 |       const data = await response.json();
    > 341 |       expect(data.error).toBe('Price ID not configured');
          |                          ^
      342 |     });
      343 |   });
      344 |

      at Object.toBe (__tests__/api/payments/checkout.test.ts:341:26)

  ● POST /api/stripe/checkout › Error Handling › should return 500 when Stripe API fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to create checkout session"
    Received: "`cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context"

      365 |       expect(response.status).toBe(500);
      366 |       const data = await response.json();
    > 367 |       expect(data.error).toBe('Failed to create checkout session');
          |                          ^
      368 |     });
      369 |
      370 |     it('should handle malformed JSON body', async () => {

      at Object.toBe (__tests__/api/payments/checkout.test.ts:367:26)

  ● POST /api/stripe/checkout › Response Format › should return sessionId and url

    expect(received).toHaveProperty(path, value)

    Expected path: "sessionId"
    Received path: []

    Expected value: "cs_test_456"
    Received value: {"error": "`cookies` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context"}

      409 |       const data = await response.json();
      410 |
    > 411 |       expect(data).toHaveProperty('sessionId', 'cs_test_456');
          |                    ^
      412 |       expect(data).toHaveProperty('url', 'https://checkout.stripe.com/test456');
      413 |     });
      414 |   });

      at Object.toHaveProperty (__tests__/api/payments/checkout.test.ts:411:20)

  ● POST /api/stripe/checkout › URL Configuration › should use NEXT_PUBLIC_BASE_URL when available

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"cancelUrl": "https://example.com/settings", "successUrl": "https://example.com/settings?session_id={CHECKOUT_SESSION_ID}"}

    Number of calls: 0

      436 |       await POST(mockRequest, { params: Promise.resolve({}) });
      437 |
    > 438 |       expect(createCheckoutSession).toHaveBeenCalledWith(
          |                                     ^
      439 |         expect.objectContaining({
      440 |           successUrl: 'https://example.com/settings?session_id={CHECKOUT_SESSION_ID}',
      441 |           cancelUrl: 'https://example.com/settings',

      at Object.toHaveBeenCalledWith (__tests__/api/payments/checkout.test.ts:438:37)

  ● POST /api/stripe/checkout › URL Configuration › should fallback to request origin when BASE_URL not set

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"cancelUrl": StringContaining "http://localhost:3000/settings", "successUrl": StringContaining "http://localhost:3000/settings"}

    Number of calls: 0

      465 |       await POST(mockRequest, { params: Promise.resolve({}) });
      466 |
    > 467 |       expect(createCheckoutSession).toHaveBeenCalledWith(
          |                                     ^
      468 |         expect.objectContaining({
      469 |           successUrl: expect.stringContaining('http://localhost:3000/settings'),
      470 |           cancelUrl: expect.stringContaining('http://localhost:3000/settings'),

      at Object.toHaveBeenCalledWith (__tests__/api/payments/checkout.test.ts:467:37)

FAIL __tests__/api/video/status.test.ts
  ● GET /api/video/status › Authentication › should return 401 when user is not authenticated

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "node" test environment.

    TypeError: fastNowTimeout?.unref is not a function

      at refreshTimeout (node_modules/undici/lib/util/timers.js:205:21)
      at FastTimer.refresh (node_modules/undici/lib/util/timers.js:297:7)
      at new FastTimer (node_modules/undici/lib/util/timers.js:274:10)
      at Object.setFastTimeout (node_modules/undici/lib/util/timers.js:376:12)
      at Object.setupConnectTimeout (node_modules/undici/lib/core/util.js:842:32)
      at Client.connect (node_modules/undici/lib/core/connect.js:107:38)
      at connect (node_modules/undici/lib/dispatcher/client.js:419:21)
      at _resume (node_modules/undici/lib/dispatcher/client.js:594:7)
      at resume (node_modules/undici/lib/dispatcher/client.js:528:3)
      at node_modules/undici/lib/dispatcher/client.js:307:28
      at invokeTheCallbackFunction (node_modules/jsdom/lib/jsdom/living/generated/Function.js:19:26)
      at node_modules/jsdom/lib/jsdom/browser/Window.js:613:9

  ● GET /api/video/status › Veo Video Status › should download Veo video from GCS URI

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      377 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      378 |
    > 379 |       expect(response.status).toBe(200);
          |                               ^
      380 |       const data = await response.json();
      381 |       expect(data.done).toBe(true);
      382 |

      at Object.toBe (__tests__/api/video/status.test.ts:379:31)

FAIL __tests__/api/assets/list.test.ts
  ● GET /api/assets › Successful Retrieval › should return assets for authenticated user

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Successful Retrieval › should filter by project ID

    ReferenceError: createMockRequest is not defined

      130 |       });
      131 |
    > 132 |       const mockRequest = createMockRequest({
          |                           ^
      133 |         url: `/api/assets?projectId=${projectId}`,
      134 |       });
      135 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:132:27)

  ● GET /api/assets › Successful Retrieval › should filter by project ID

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Successful Retrieval › should filter by asset type

    ReferenceError: createMockRequest is not defined

      163 |       });
      164 |
    > 165 |       const mockRequest = createMockRequest({
          |                           ^
      166 |         url: '/api/assets?type=video',
      167 |       });
      168 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:165:27)

  ● GET /api/assets › Successful Retrieval › should filter by asset type

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Pagination › should handle pagination parameters

    ReferenceError: mockUser is not defined

      184 |       const mockAssets = Array.from({ length: 10 }, (_, i) => ({
      185 |         id: `${i + 1}`,
    > 186 |         user_id: mockUser.id,
          |                  ^
      187 |         type: 'image',
      188 |         name: `asset${i + 1}.png`,
      189 |       }));

      at mockUser (__tests__/api/assets/list.test.ts:186:18)
          at Function.from (<anonymous>)
      at Object.from (__tests__/api/assets/list.test.ts:184:32)

  ● GET /api/assets › Pagination › should handle pagination parameters

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Pagination › should handle second page

    ReferenceError: createMockRequest is not defined

      243 |       });
      244 |
    > 245 |       const mockRequest = createMockRequest({
          |                           ^
      246 |         url: '/api/assets?page=1&pageSize=10',
      247 |       });
      248 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:245:27)

  ● GET /api/assets › Pagination › should handle second page

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Pagination › should handle last page

    ReferenceError: createMockRequest is not defined

      282 |       });
      283 |
    > 284 |       const mockRequest = createMockRequest({
          |                           ^
      285 |         url: '/api/assets?page=2&pageSize=10',
      286 |       });
      287 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:284:27)

  ● GET /api/assets › Pagination › should handle last page

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Validation › should reject invalid project ID

    ReferenceError: createMockRequest is not defined

      305 |     it('should reject invalid project ID', async () => {
      306 |       // Arrange
    > 307 |       const mockRequest = createMockRequest({
          |                           ^
      308 |         url: '/api/assets?projectId=invalid-uuid',
      309 |       });
      310 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:307:27)

  ● GET /api/assets › Validation › should reject invalid project ID

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Validation › should reject invalid asset type

    ReferenceError: createMockRequest is not defined

      322 |     it('should reject invalid asset type', async () => {
      323 |       // Arrange
    > 324 |       const mockRequest = createMockRequest({
          |                           ^
      325 |         url: '/api/assets?type=invalid-type',
      326 |       });
      327 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:324:27)

  ● GET /api/assets › Validation › should reject invalid asset type

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Validation › should reject negative page number

    ReferenceError: createMockRequest is not defined

      339 |     it('should reject negative page number', async () => {
      340 |       // Arrange
    > 341 |       const mockRequest = createMockRequest({
          |                           ^
      342 |         url: '/api/assets?page=-1',
      343 |       });
      344 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:341:27)

  ● GET /api/assets › Validation › should reject negative page number

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Validation › should reject invalid page size

    ReferenceError: createMockRequest is not defined

      358 |     it('should reject invalid page size', async () => {
      359 |       // Arrange
    > 360 |       const mockRequest = createMockRequest({
          |                           ^
      361 |         url: '/api/assets?pageSize=0',
      362 |       });
      363 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:360:27)

  ● GET /api/assets › Validation › should reject invalid page size

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Validation › should reject page size over limit

    ReferenceError: createMockRequest is not defined

      375 |     it('should reject page size over limit', async () => {
      376 |       // Arrange
    > 377 |       const mockRequest = createMockRequest({
          |                           ^
      378 |         url: '/api/assets?pageSize=200',
      379 |       });
      380 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:377:27)

  ● GET /api/assets › Validation › should reject page size over limit

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Validation › should reject non-integer page number

    ReferenceError: createMockRequest is not defined

      392 |     it('should reject non-integer page number', async () => {
      393 |       // Arrange
    > 394 |       const mockRequest = createMockRequest({
          |                           ^
      395 |         url: '/api/assets?page=1.5',
      396 |       });
      397 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:394:27)

  ● GET /api/assets › Validation › should reject non-integer page number

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Error Handling › should handle database errors

    ReferenceError: createMockRequest is not defined

      425 |       });
      426 |
    > 427 |       const mockRequest = createMockRequest({ url: '/api/assets' });
          |                           ^
      428 |
      429 |       // Act
      430 |       const response = await GET(mockRequest, {

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:427:27)

  ● GET /api/assets › Error Handling › should handle database errors

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Error Handling › should handle zero count

    ReferenceError: createMockRequest is not defined

      454 |       });
      455 |
    > 456 |       const mockRequest = createMockRequest({ url: '/api/assets' });
          |                           ^
      457 |
      458 |       // Act
      459 |       const response = await GET(mockRequest, {

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:456:27)

  ● GET /api/assets › Error Handling › should handle zero count

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Edge Cases › should handle empty asset list

    ReferenceError: createMockRequest is not defined

      488 |       });
      489 |
    > 490 |       const mockRequest = createMockRequest({ url: '/api/assets' });
          |                           ^
      491 |
      492 |       // Act
      493 |       const response = await GET(mockRequest, {

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:490:27)

  ● GET /api/assets › Edge Cases › should handle empty asset list

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Edge Cases › should handle null count from database

    ReferenceError: createMockRequest is not defined

      519 |       });
      520 |
    > 521 |       const mockRequest = createMockRequest({ url: '/api/assets' });
          |                           ^
      522 |
      523 |       // Act
      524 |       const response = await GET(mockRequest, {

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:521:27)

  ● GET /api/assets › Edge Cases › should handle null count from database

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

  ● GET /api/assets › Edge Cases › should accept all valid asset types

    ReferenceError: createMockRequest is not defined

      555 |         });
      556 |
    > 557 |         const mockRequest = createMockRequest({
          |                             ^
      558 |           url: `/api/assets?type=${type}`,
      559 |         });
      560 |

      at Object.createMockRequest (__tests__/api/assets/list.test.ts:557:29)

  ● GET /api/assets › Edge Cases › should accept all valid asset types

    TypeError: Cannot convert undefined or null to object
        at Function.values (<anonymous>)

      427 |   };
      428 |
    > 429 |   Object.values(mockClient).forEach((value) => {
          |          ^
      430 |     if (typeof value === 'object' && value !== null) {
      431 |       Object.values(value).forEach(reset);
      432 |     } else {

      at values (test-utils/mockSupabase.ts:429:10)
      at Object.<anonymous> (__tests__/api/assets/list.test.ts:68:18)

FAIL __tests__/api/projects/project-delete.test.ts
  ● DELETE /api/projects/[projectId] › Input Validation › should return 400 for invalid UUID format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      122 |       });
      123 |
    > 124 |       expect(response.status).toBe(400);
          |                               ^
      125 |       const data = await response.json();
      126 |       expect(data.error).toContain('UUID');
      127 |     });

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:124:31)

  ● DELETE /api/projects/[projectId] › Input Validation › should return 400 for empty projectId

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      135 |       });
      136 |
    > 137 |       expect(response.status).toBe(400);
          |                               ^
      138 |       const data = await response.json();
      139 |       expect(data.error).toContain('UUID');
      140 |     });

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:137:31)

  ● DELETE /api/projects/[projectId] › Input Validation › should return 400 for malformed UUID

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      151 |       });
      152 |
    > 153 |       expect(response.status).toBe(400);
          |                               ^
      154 |     });
      155 |   });
      156 |

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:153:31)

  ● DELETE /api/projects/[projectId] › Success Cases › should delete project successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      171 |       });
      172 |
    > 173 |       expect(response.status).toBe(200);
          |                               ^
      174 |       const data = await response.json();
      175 |       expect(data.success).toBe(true);
      176 |       expect(mockSupabase.from).toHaveBeenCalledWith('projects');

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:173:31)

  ● DELETE /api/projects/[projectId] › Success Cases › should call database methods in correct order

    expect(received).toBeLessThan(expected)

    Matcher error: received value must be a number or bigint

    Received has value: undefined

      198 |       const eqCall = mockSupabase.eq.mock.invocationCallOrder[0];
      199 |
    > 200 |       expect(fromCall).toBeLessThan(deleteCall);
          |                        ^
      201 |       expect(deleteCall).toBeLessThan(eqCall);
      202 |     });
      203 |

      at Object.toBeLessThan (__tests__/api/projects/project-delete.test.ts:200:24)

  ● DELETE /api/projects/[projectId] › Success Cases › should enforce RLS through ownership check

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      222 |
      223 |       // RLS enforcement happens at database level
    > 224 |       expect(mockSupabase.delete).toHaveBeenCalled();
          |                                   ^
      225 |     });
      226 |   });
      227 |

      at Object.toHaveBeenCalled (__tests__/api/projects/project-delete.test.ts:224:35)

  ● DELETE /api/projects/[projectId] › Error Handling › should return 500 when database delete fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to delete project"
    Received: "_serverLogger.serverLogger.child is not a function"

      244 |       expect(response.status).toBe(500);
      245 |       const data = await response.json();
    > 246 |       expect(data.error).toBe('Failed to delete project');
          |                          ^
      247 |     });
      248 |
      249 |     it('should return 500 when unexpected error occurs', async () => {

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:246:26)

  ● DELETE /api/projects/[projectId] › Error Handling › should return 500 when unexpected error occurs

    expect(received).toBe(expected) // Object.is equality

    Expected: "Internal server error"
    Received: "_serverLogger.serverLogger.child is not a function"

      263 |       expect(response.status).toBe(500);
      264 |       const data = await response.json();
    > 265 |       expect(data.error).toBe('Internal server error');
          |                          ^
      266 |     });
      267 |
      268 |     it('should handle database connection errors', async () => {

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:265:26)

  ● DELETE /api/projects/[projectId] › Cascading Deletes › should rely on database CASCADE to delete related resources

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      302 |
      303 |       // Only one delete operation - CASCADE handles related data
    > 304 |       expect(mockSupabase.from).toHaveBeenCalledTimes(1);
          |                                 ^
      305 |       expect(mockSupabase.from).toHaveBeenCalledWith('projects');
      306 |       expect(mockSupabase.delete).toHaveBeenCalledTimes(1);
      307 |     });

      at Object.toHaveBeenCalledTimes (__tests__/api/projects/project-delete.test.ts:304:33)

  ● DELETE /api/projects/[projectId] › Edge Cases › should handle deletion of non-existent project gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 429

      326 |
      327 |       // Should succeed (idempotent operation)
    > 328 |       expect(response.status).toBe(200);
          |                               ^
      329 |       const data = await response.json();
      330 |       expect(data.success).toBe(true);
      331 |     });

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:328:31)

  ● DELETE /api/projects/[projectId] › Edge Cases › should handle concurrent delete requests

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 429

      350 |       });
      351 |
    > 352 |       expect(response1.status).toBe(200);
          |                                ^
      353 |       expect(response2.status).toBe(200);
      354 |     });
      355 |   });

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:352:32)

  ● DELETE /api/projects/[projectId] › Security › should not allow deletion of projects owned by other users

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 429

      375 |
      376 |       // RLS ensures user can't delete other users' projects
    > 377 |       expect(response.status).toBe(200); // Success even if nothing deleted (idempotent)
          |                               ^
      378 |     });
      379 |   });
      380 | });

      at Object.toBe (__tests__/api/projects/project-delete.test.ts:377:31)

FAIL __tests__/api/health.test.ts
  ● GET /api/health › Error Handling › should handle Date constructor errors gracefully

    Date constructor failed

      70 |       (global.Date as any) = class extends originalDate {
      71 |         constructor() {
    > 72 |           throw new Error('Date constructor failed');
         |                 ^
      73 |         }
      74 |       };
      75 |

      at new global.Date (__tests__/api/health.test.ts:72:17)
      at GET (app/api/health/route.ts:25:20)
      at Object.<anonymous> (__tests__/api/health.test.ts:77:35)

  ● GET /api/health › Non-Error Type Handling › should handle non-Error thrown values

    thrown: "String error"

      314 |
      315 |   describe('Non-Error Type Handling', () => {
    > 316 |     it('should handle non-Error thrown values', async () => {
          |     ^
      317 |       const originalDate = global.Date;
      318 |       (global.Date as any) = class {
      319 |         constructor() {

      at it (__tests__/api/health.test.ts:316:5)
      at describe (__tests__/api/health.test.ts:315:3)
      at Object.describe (__tests__/api/health.test.ts:7:1)

  ● GET /api/health › Non-Error Type Handling › should handle null thrown value

    thrown: null

      333 |     });
      334 |
    > 335 |     it('should handle null thrown value', async () => {
          |     ^
      336 |       const originalDate = global.Date;
      337 |       (global.Date as any) = class {
      338 |         constructor() {

      at it (__tests__/api/health.test.ts:335:5)
      at describe (__tests__/api/health.test.ts:315:3)
      at Object.describe (__tests__/api/health.test.ts:7:1)

  ● GET /api/health › Non-Error Type Handling › should handle undefined thrown value

    thrown: undefined

      351 |     });
      352 |
    > 353 |     it('should handle undefined thrown value', async () => {
          |     ^
      354 |       const originalDate = global.Date;
      355 |       (global.Date as any) = class {
      356 |         constructor() {

      at it (__tests__/api/health.test.ts:353:5)
      at describe (__tests__/api/health.test.ts:315:3)
      at Object.describe (__tests__/api/health.test.ts:7:1)

  ● GET /api/health › Non-Error Type Handling › should handle number thrown value

    thrown: 42

      369 |     });
      370 |
    > 371 |     it('should handle number thrown value', async () => {
          |     ^
      372 |       const originalDate = global.Date;
      373 |       (global.Date as any) = class {
      374 |         constructor() {

      at it (__tests__/api/health.test.ts:371:5)
      at describe (__tests__/api/health.test.ts:315:3)
      at Object.describe (__tests__/api/health.test.ts:7:1)

  ● GET /api/health › Non-Error Type Handling › should handle object thrown value

    thrown: Object {
      "code": 500,
      "msg": "Server error",
    }

      387 |     });
      388 |
    > 389 |     it('should handle object thrown value', async () => {
          |     ^
      390 |       const originalDate = global.Date;
      391 |       (global.Date as any) = class {
      392 |         constructor() {

      at it (__tests__/api/health.test.ts:389:5)
      at describe (__tests__/api/health.test.ts:315:3)
      at Object.describe (__tests__/api/health.test.ts:7:1)

FAIL __tests__/api/logs/logs.test.ts
  ● POST /api/logs › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:90:34)

  ● POST /api/logs › Authentication › should proceed when user is authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:115:34)

  ● POST /api/logs › Rate Limiting › should enforce tier4 rate limiting (60/min)

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:146:34)

  ● POST /api/logs › Input Validation › should reject non-array logs

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:165:34)

  ● POST /api/logs › Input Validation › should reject empty logs array

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:183:34)

  ● POST /api/logs › Input Validation › should reject more than 100 logs per request

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:206:34)

  ● POST /api/logs › Input Validation › should accept 1 to 100 logs

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:234:36)

  ● POST /api/logs › Size Limits › should reject log entry exceeding 10KB

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:259:34)

  ● POST /api/logs › Size Limits › should reject total request exceeding 100KB

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:285:34)

  ● POST /api/logs › Size Limits › should accept logs under size limits

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:313:34)

  ● POST /api/logs › Axiom Integration › should send logs to Axiom when configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:339:17)

  ● POST /api/logs › Axiom Integration › should enrich logs with userId

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:371:17)

  ● POST /api/logs › Axiom Integration › should add _time field for Axiom

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:403:17)

  ● POST /api/logs › Axiom Integration › should handle Axiom API failure gracefully

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:434:34)

  ● POST /api/logs › Axiom Integration › should return success when Axiom succeeds

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:460:34)

  ● POST /api/logs › Development Mode › should log to server logger in development when Axiom not configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:507:17)

  ● POST /api/logs › Development Mode › should return success in development mode without Axiom

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:561:34)

  ● POST /api/logs › Development Mode › should not call fetch when Axiom not configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:587:17)

  ● POST /api/logs › Log Fields › should accept logs with all optional fields

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:615:34)

  ● POST /api/logs › Log Fields › should handle different log levels

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:649:34)

  ● POST /api/logs › Error Handling › should return 500 on unexpected errors

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/logs/logs.test.ts:664:34)

FAIL __tests__/api/audio/elevenlabs-voices.test.ts
  ● GET /api/audio/elevenlabs/voices › API Key Configuration › should return 500 when ELEVENLABS_API_KEY is not configured

    expect(received).toContain(expected) // indexOf

    Expected substring: "API key"
    Received string:    "_serverLogger.serverLogger.child is not a function"

       98 |       expect(response.status).toBe(500);
       99 |       const data = await response.json();
    > 100 |       expect(data.error).toContain('API key');
          |                          ^
      101 |     });
      102 |   });
      103 |

      at Object.toContain (__tests__/api/audio/elevenlabs-voices.test.ts:100:26)

  ● GET /api/audio/elevenlabs/voices › ElevenLabs API Integration › should call ElevenLabs API with correct headers

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "https://api.elevenlabs.io/v1/voices", ObjectContaining {"headers": ObjectContaining {"xi-api-key": "test-elevenlabs-key"}, "method": "GET"}

    Number of calls: 0

      112 |       } as any);
      113 |
    > 114 |       expect(global.fetch).toHaveBeenCalledWith(
          |                            ^
      115 |         'https://api.elevenlabs.io/v1/voices',
      116 |         expect.objectContaining({
      117 |           method: 'GET',

      at Object.toHaveBeenCalledWith (__tests__/api/audio/elevenlabs-voices.test.ts:114:28)

  ● GET /api/audio/elevenlabs/voices › ElevenLabs API Integration › should handle ElevenLabs API errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      138 |       } as any);
      139 |
    > 140 |       expect(response.status).toBe(401);
          |                               ^
      141 |       const data = await response.json();
      142 |       expect(data.error).toContain('Failed to fetch voices');
      143 |     });

      at Object.toBe (__tests__/api/audio/elevenlabs-voices.test.ts:140:31)

  ● GET /api/audio/elevenlabs/voices › ElevenLabs API Integration › should handle API timeout

    expect(received).toBe(expected) // Object.is equality

    Expected: 504
    Received: 500

      158 |       } as any);
      159 |
    > 160 |       expect(response.status).toBe(504);
          |                               ^
      161 |       const data = await response.json();
      162 |       expect(data.error).toContain('timeout');
      163 |     });

      at Object.toBe (__tests__/api/audio/elevenlabs-voices.test.ts:160:31)

  ● GET /api/audio/elevenlabs/voices › ElevenLabs API Integration › should handle network errors

    expect(received).toBe(expected) // Object.is equality

    Expected: "Internal server error"
    Received: "_serverLogger.serverLogger.child is not a function"

      176 |       expect(response.status).toBe(500);
      177 |       const data = await response.json();
    > 178 |       expect(data.error).toBe('Internal server error');
          |                          ^
      179 |     });
      180 |   });
      181 |

      at Object.toBe (__tests__/api/audio/elevenlabs-voices.test.ts:178:26)

  ● GET /api/audio/elevenlabs/voices › Success Cases › should return list of voices successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      190 |       } as any);
      191 |
    > 192 |       expect(response.status).toBe(200);
          |                               ^
      193 |       const data = await response.json();
      194 |       expect(data.voices).toBeDefined();
      195 |       expect(data.voices).toHaveLength(2);

      at Object.toBe (__tests__/api/audio/elevenlabs-voices.test.ts:192:31)

  ● GET /api/audio/elevenlabs/voices › Success Cases › should handle voices with optional fields

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      222 |       } as any);
      223 |
    > 224 |       expect(response.status).toBe(200);
          |                               ^
      225 |       const data = await response.json();
      226 |       expect(data.voices).toHaveLength(1);
      227 |       expect(data.voices[0].description).toBeUndefined();

      at Object.toBe (__tests__/api/audio/elevenlabs-voices.test.ts:224:31)

  ● GET /api/audio/elevenlabs/voices › Success Cases › should handle empty voices array

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      245 |       } as any);
      246 |
    > 247 |       expect(response.status).toBe(200);
          |                               ^
      248 |       const data = await response.json();
      249 |       expect(data.voices).toEqual([]);
      250 |     });

      at Object.toBe (__tests__/api/audio/elevenlabs-voices.test.ts:247:31)

  ● GET /api/audio/elevenlabs/voices › Response Format › should include all voice fields

    TypeError: Cannot read properties of undefined (reading '0')

      262 |
      263 |       const data = await response.json();
    > 264 |       const voice = data.voices[0];
          |                                ^
      265 |
      266 |       expect(voice).toHaveProperty('voice_id');
      267 |       expect(voice).toHaveProperty('name');

      at Object.<anonymous> (__tests__/api/audio/elevenlabs-voices.test.ts:264:32)

FAIL __tests__/api/projects/chat-messages.test.ts
  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 for invalid UUID format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      117 |       });
      118 |
    > 119 |       expect(response.status).toBe(400);
          |                               ^
      120 |       const data = await response.json();
      121 |       expect(data.error).toContain('UUID');
      122 |     });

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:119:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 when role is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      136 |       });
      137 |
    > 138 |       expect(response.status).toBe(400);
          |                               ^
      139 |       const data = await response.json();
      140 |       expect(data.error).toContain('Missing required fields');
      141 |     });

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:138:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 when content is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      155 |       });
      156 |
    > 157 |       expect(response.status).toBe(400);
          |                               ^
      158 |       const data = await response.json();
      159 |       expect(data.error).toContain('Missing required fields');
      160 |     });

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:157:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 when role is empty string

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      174 |       });
      175 |
    > 176 |       expect(response.status).toBe(400);
          |                               ^
      177 |       const data = await response.json();
      178 |       expect(data.error).toContain('Missing required fields');
      179 |     });

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:176:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 when content is empty string

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      193 |       });
      194 |
    > 195 |       expect(response.status).toBe(400);
          |                               ^
      196 |       const data = await response.json();
      197 |       expect(data.error).toContain('Missing required fields');
      198 |     });

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:195:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 for invalid role value

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      212 |       });
      213 |
    > 214 |       expect(response.status).toBe(400);
          |                               ^
      215 |       const data = await response.json();
      216 |       expect(data.error).toContain('Invalid role');
      217 |       expect(data.error).toContain('user');

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:214:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 when role is not a string

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      233 |       });
      234 |
    > 235 |       expect(response.status).toBe(400);
          |                               ^
      236 |     });
      237 |
      238 |     it('should return 400 when content is not a string', async () => {

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:235:31)

  ● POST /api/projects/[projectId]/chat/messages › Input Validation › should return 400 when content is not a string

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      250 |       });
      251 |
    > 252 |       expect(response.status).toBe(400);
          |                               ^
      253 |     });
      254 |   });
      255 |

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:252:31)

  ● POST /api/projects/[projectId]/chat/messages › Success Cases › should create a user message successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      284 |       });
      285 |
    > 286 |       expect(response.status).toBe(201);
          |                               ^
      287 |       const data = await response.json();
      288 |       expect(data.message).toEqual(mockMessage);
      289 |       expect(mockSupabase.from).toHaveBeenCalledWith('chat_messages');

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:286:31)

  ● POST /api/projects/[projectId]/chat/messages › Success Cases › should create an assistant message successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      330 |       });
      331 |
    > 332 |       expect(response.status).toBe(201);
          |                               ^
      333 |       const data = await response.json();
      334 |       expect(data.message.role).toBe('assistant');
      335 |       expect(data.message.model).toBe('gemini-pro');

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:332:31)

  ● POST /api/projects/[projectId]/chat/messages › Success Cases › should handle optional model field

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      362 |       });
      363 |
    > 364 |       expect(response.status).toBe(201);
          |                               ^
      365 |       expect(mockSupabase.insert).toHaveBeenCalledWith(
      366 |         expect.objectContaining({
      367 |           model: null,

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:364:31)

  ● POST /api/projects/[projectId]/chat/messages › Success Cases › should handle optional attachments field

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      390 |       });
      391 |
    > 392 |       expect(response.status).toBe(201);
          |                               ^
      393 |       expect(mockSupabase.insert).toHaveBeenCalledWith(
      394 |         expect.objectContaining({
      395 |           attachments,

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:392:31)

  ● POST /api/projects/[projectId]/chat/messages › Success Cases › should use select().single() chain

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      417 |       });
      418 |
    > 419 |       expect(mockSupabase.select).toHaveBeenCalled();
          |                                   ^
      420 |       expect(mockSupabase.single).toHaveBeenCalled();
      421 |     });
      422 |   });

      at Object.toHaveBeenCalled (__tests__/api/projects/chat-messages.test.ts:419:35)

  ● POST /api/projects/[projectId]/chat/messages › Error Handling › should return 500 when database insert fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to save chat message"
    Received: "_serverLogger.serverLogger.child is not a function"

      444 |       expect(response.status).toBe(500);
      445 |       const data = await response.json();
    > 446 |       expect(data.error).toBe('Failed to save chat message');
          |                          ^
      447 |     });
      448 |
      449 |     it('should return 500 when unexpected error occurs', async () => {

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:446:26)

  ● POST /api/projects/[projectId]/chat/messages › Error Handling › should return 500 when unexpected error occurs

    expect(received).toBe(expected) // Object.is equality

    Expected: "Internal server error"
    Received: "_serverLogger.serverLogger.child is not a function"

      467 |       expect(response.status).toBe(500);
      468 |       const data = await response.json();
    > 469 |       expect(data.error).toBe('Internal server error');
          |                          ^
      470 |     });
      471 |
      472 |     it('should handle malformed JSON body', async () => {

      at Object.toBe (__tests__/api/projects/chat-messages.test.ts:469:26)

  ● POST /api/projects/[projectId]/chat/messages › Error Handling › should handle malformed JSON body

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {Symbol(internal response): {"cookies": {"_headers": {}, "_parsed": Map {}}, "url": undefined}}

      481 |       );
      482 |
    > 483 |       await expect(
          |             ^
      484 |         POST(mockRequest, {
      485 |           params: Promise.resolve({ projectId: validProjectId }),
      486 |         })

      at expect (node_modules/expect/build/index.js:2116:15)
      at Object.expect (__tests__/api/projects/chat-messages.test.ts:483:13)

  ● POST /api/projects/[projectId]/chat/messages › RLS Enforcement › should rely on RLS to prevent unauthorized access

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"project_id": "550e8400-e29b-41d4-a716-446655440000"}

    Number of calls: 0

      514 |
      515 |       // RLS enforcement happens at database level via insert operation
    > 516 |       expect(mockSupabase.insert).toHaveBeenCalledWith(
          |                                   ^
      517 |         expect.objectContaining({
      518 |           project_id: validProjectId,
      519 |         })

      at Object.toHaveBeenCalledWith (__tests__/api/projects/chat-messages.test.ts:516:35)

FAIL __tests__/api/projects/delete.test.ts
  ● DELETE /api/projects/[projectId] › Validation › should return 400 for invalid UUID format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      106 |       });
      107 |
    > 108 |       expect(response.status).toBe(400);
          |                               ^
      109 |       const data = await response.json();
      110 |       expect(data.error).toContain('Invalid UUID');
      111 |     });

      at Object.toBe (__tests__/api/projects/delete.test.ts:108:31)

  ● DELETE /api/projects/[projectId] › Validation › should return 400 for empty projectId

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      121 |       });
      122 |
    > 123 |       expect(response.status).toBe(400);
          |                               ^
      124 |     });
      125 |   });
      126 |

      at Object.toBe (__tests__/api/projects/delete.test.ts:123:31)

  ● DELETE /api/projects/[projectId] › Success Cases › should delete project successfully with valid ID

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      142 |       });
      143 |
    > 144 |       expect(response.status).toBe(200);
          |                               ^
      145 |       const data = await response.json();
      146 |       expect(data.success).toBe(true);
      147 |       expect(mockSupabase.from).toHaveBeenCalledWith('projects');

      at Object.toBe (__tests__/api/projects/delete.test.ts:144:31)

  ● DELETE /api/projects/[projectId] › Success Cases › should delete project and cascade delete related resources

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      165 |       });
      166 |
    > 167 |       expect(response.status).toBe(200);
          |                               ^
      168 |       const data = await response.json();
      169 |       expect(data.success).toBe(true);
      170 |     });

      at Object.toBe (__tests__/api/projects/delete.test.ts:167:31)

  ● DELETE /api/projects/[projectId] › Error Handling › should return 500 when database delete fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to delete project"
    Received: "_serverLogger.serverLogger.child is not a function"

      189 |       expect(response.status).toBe(500);
      190 |       const data = await response.json();
    > 191 |       expect(data.error).toBe('Failed to delete project');
          |                          ^
      192 |     });
      193 |
      194 |     it('should return 500 when unexpected error occurs', async () => {

      at Object.toBe (__tests__/api/projects/delete.test.ts:191:26)

  ● DELETE /api/projects/[projectId] › Error Handling › should return 500 when unexpected error occurs

    expect(received).toBe(expected) // Object.is equality

    Expected: "Internal server error"
    Received: "_serverLogger.serverLogger.child is not a function"

      208 |       expect(response.status).toBe(500);
      209 |       const data = await response.json();
    > 210 |       expect(data.error).toBe('Internal server error');
          |                          ^
      211 |     });
      212 |   });
      213 |

      at Object.toBe (__tests__/api/projects/delete.test.ts:210:26)

  ● DELETE /api/projects/[projectId] › Authorization › should respect RLS and only delete projects owned by user

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      228 |       });
      229 |
    > 230 |       expect(response.status).toBe(200);
          |                               ^
      231 |       expect(mockSupabase.from).toHaveBeenCalledWith('projects');
      232 |     });
      233 |   });

      at Object.toBe (__tests__/api/projects/delete.test.ts:230:31)

  ● DELETE /api/projects/[projectId] › Database Interactions › should call database methods in correct order

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "projects"

    Number of calls: 0

      249 |       });
      250 |
    > 251 |       expect(mockSupabase.from).toHaveBeenCalledWith('projects');
          |                                 ^
      252 |       expect(mockSupabase.delete).toHaveBeenCalled();
      253 |       expect(mockSupabase.eq).toHaveBeenCalledWith('id', 'test-project-id');
      254 |     });

      at Object.toHaveBeenCalledWith (__tests__/api/projects/delete.test.ts:251:33)

  ● DELETE /api/projects/[projectId] › Response Format › should return success boolean on successful deletion

    expect(received).toHaveProperty(path)

    Expected path: "success"
    Received path: []

    Received value: {"error": "_serverLogger.serverLogger.child is not a function"}

      272 |       const data = await response.json();
      273 |
    > 274 |       expect(data).toHaveProperty('success');
          |                    ^
      275 |       expect(data.success).toBe(true);
      276 |     });
      277 |

      at Object.toHaveProperty (__tests__/api/projects/delete.test.ts:274:20)

FAIL __tests__/api/admin/delete-user.test.ts
  ● POST /api/admin/delete-user › Input Validation › should return 400 for invalid UUID format

    expect(received).toContain(expected) // indexOf

    Expected substring: "UUID"
    Received string:    "Invalid userId format"

      88 |       expect(response.status).toBe(400);
      89 |       const data = await response.json();
    > 90 |       expect(data.error).toContain('UUID');
         |                          ^
      91 |     });
      92 |
      93 |     it('should return 400 when admin tries to delete themselves', async () => {

      at Object.toContain (__tests__/api/admin/delete-user.test.ts:90:26)

  ● POST /api/admin/delete-user › Input Validation › should return 400 when admin tries to delete themselves

    expect(received).toContain(expected) // indexOf

    Expected substring: "Cannot delete your own account"
    Received string:    "Invalid userId format"

      101 |       expect(response.status).toBe(400);
      102 |       const data = await response.json();
    > 103 |       expect(data.error).toContain('Cannot delete your own account');
          |                          ^
      104 |     });
      105 |   });
      106 |

      at Object.toContain (__tests__/api/admin/delete-user.test.ts:103:26)

  ● POST /api/admin/delete-user › Success Cases › should delete user successfully

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      108 |     it('should delete user successfully', async () => {
      109 |       // Mock getUserById response
    > 110 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      111 |         data: {
      112 |           user: {
      113 |             id: validUserId,

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:110:42)

  ● POST /api/admin/delete-user › Success Cases › should log admin action after successful deletion

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      141 |       const { logAdminAction } = require('@/lib/api/withAuth');
      142 |
    > 143 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      144 |         data: {
      145 |           user: {
      146 |             id: validUserId,

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:143:42)

  ● POST /api/admin/delete-user › Success Cases › should get user info before deletion for audit

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      176 |
      177 |     it('should get user info before deletion for audit', async () => {
    > 178 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      179 |         data: {
      180 |           user: {
      181 |             id: validUserId,

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:178:42)

  ● POST /api/admin/delete-user › Error Handling › should return 500 when deletion fails

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      206 |   describe('Error Handling', () => {
      207 |     it('should return 500 when deletion fails', async () => {
    > 208 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      209 |         data: {
      210 |           user: {
      211 |             id: validUserId,

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:208:42)

  ● POST /api/admin/delete-user › Error Handling › should handle unexpected errors gracefully

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      234 |
      235 |     it('should handle unexpected errors gracefully', async () => {
    > 236 |       mockSupabase.auth.admin.getUserById = jest
          |                                          ^
      237 |         .fn()
      238 |         .mockRejectedValue(new Error('Unexpected error'));
      239 |

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:236:42)

  ● POST /api/admin/delete-user › Error Handling › should handle malformed JSON body

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {Symbol(internal response): {"cookies": {"_headers": {}, "_parsed": Map {}}, "url": undefined}}

      255 |       });
      256 |
    > 257 |       await expect(POST(mockRequest, { params: Promise.resolve({}) })).rejects.toThrow();
          |             ^
      258 |     });
      259 |   });
      260 |

      at expect (node_modules/expect/build/index.js:2116:15)
      at Object.expect (__tests__/api/admin/delete-user.test.ts:257:13)

  ● POST /api/admin/delete-user › Security › should prevent self-deletion

    TypeError: Cannot read properties of undefined (reading 'deleteUser')

      269 |
      270 |       expect(response.status).toBe(400);
    > 271 |       expect(mockSupabase.auth.admin.deleteUser).not.toHaveBeenCalled();
          |                                      ^
      272 |     });
      273 |
      274 |     it('should use service role client for admin operations', async () => {

      at Object.deleteUser (__tests__/api/admin/delete-user.test.ts:271:38)

  ● POST /api/admin/delete-user › Security › should use service role client for admin operations

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      275 |       const { createServiceSupabaseClient } = require('@/lib/supabase');
      276 |
    > 277 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      278 |         data: { user: { id: validUserId } },
      279 |         error: null,
      280 |       });

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:277:42)

  ● POST /api/admin/delete-user › Cascading Deletes › should cascade delete user_profiles and related data

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      299 |     it('should cascade delete user_profiles and related data', async () => {
      300 |       // This is handled at the database level, but we verify the deletion happens
    > 301 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      302 |         data: {
      303 |           user: {
      304 |             id: validUserId,

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:301:42)

  ● POST /api/admin/delete-user › Edge Cases › should handle deletion of non-existent user

    TypeError: Cannot set properties of undefined (setting 'getUserById')

      329 |   describe('Edge Cases', () => {
      330 |     it('should handle deletion of non-existent user', async () => {
    > 331 |       mockSupabase.auth.admin.getUserById = jest.fn().mockResolvedValue({
          |                                          ^
      332 |         data: { user: null },
      333 |         error: null,
      334 |       });

      at Object.<anonymous> (__tests__/api/admin/delete-user.test.ts:331:42)

FAIL __tests__/api/history/history.test.ts
  ● GET /api/history › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:75:33)

  ● GET /api/history › Authentication › should proceed when user is authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:89:33)

  ● GET /api/history › Rate Limiting › should enforce tier3 rate limiting (30/min)

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:107:33)

  ● GET /api/history › Rate Limiting › should use user-specific rate limit identifier

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:123:16)

  ● GET /api/history › Pagination › should use default pagination (limit: 50, offset: 0)

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:137:16)

  ● GET /api/history › Pagination › should accept custom limit parameter

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:153:16)

  ● GET /api/history › Pagination › should accept custom offset parameter

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:169:16)

  ● GET /api/history › Pagination › should accept both limit and offset parameters

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:185:16)

  ● GET /api/history › Pagination › should enforce maximum limit of 100

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:201:33)

  ● GET /api/history › Pagination › should enforce minimum limit of 1

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:215:33)

  ● GET /api/history › Pagination › should enforce minimum offset of 0

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:229:33)

  ● GET /api/history › Pagination › should reject invalid limit format

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:246:33)

  ● GET /api/history › Query Execution › should query user_activity_history table

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:260:16)

  ● GET /api/history › Query Execution › should order results by created_at descending

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:274:16)

  ● GET /api/history › Query Execution › should return history data with count

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:304:33)

  ● GET /api/history › Error Handling › should return 500 when database query fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:322:33)

  ● GET /api/history › Error Handling › should handle empty results gracefully

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:337:33)

  ● DELETE /api/history › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:370:36)

  ● DELETE /api/history › Authentication › should proceed when user is authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:381:36)

  ● DELETE /api/history › Deletion › should delete all activity history for the user

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:392:19)

  ● DELETE /api/history › Deletion › should return success message

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:403:36)

  ● DELETE /api/history › Error Handling › should return 500 when deletion fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:419:36)

  ● POST /api/history › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:455:34)

  ● POST /api/history › Authentication › should proceed when user is authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:483:34)

  ● POST /api/history › Input Validation › should validate activity_type is required

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:500:34)

  ● POST /api/history › Input Validation › should validate activity_type is a valid enum value

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:518:34)

  ● POST /api/history › Input Validation › should accept valid activity types

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:557:36)

  ● POST /api/history › Activity Entry Creation › should insert activity with all fields

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:591:17)

  ● POST /api/history › Activity Entry Creation › should use empty object for metadata if not provided

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:629:17)

  ● POST /api/history › Activity Entry Creation › should return created activity in response

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:662:34)

  ● POST /api/history › Error Handling › should return 500 when database insert fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/history/history.test.ts:688:34)

FAIL __tests__/api/video/upscale.test.ts
  ● POST /api/video/upscale › Validation › should return 400 for invalid assetId

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      124 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      125 |
    > 126 |       expect(response.status).toBe(400);
          |                               ^
      127 |     });
      128 |
      129 |     it('should return 400 for invalid projectId', async () => {

      at Object.toBe (__tests__/api/video/upscale.test.ts:126:31)

  ● POST /api/video/upscale › Validation › should return 400 for invalid projectId

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      139 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      140 |
    > 141 |       expect(response.status).toBe(400);
          |                               ^
      142 |     });
      143 |   });
      144 |

      at Object.toBe (__tests__/api/video/upscale.test.ts:141:31)

  ● POST /api/video/upscale › Success Cases › should submit upscale request successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      188 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      189 |
    > 190 |       expect(response.status).toBe(200);
          |                               ^
      191 |       const data = await response.json();
      192 |       expect(data.requestId).toBe('upscale-request-123');
      193 |       expect(data.message).toContain('successfully');

      at Object.toBe (__tests__/api/video/upscale.test.ts:190:31)

  ● POST /api/video/upscale › Error Handling › should handle timeout errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 504
    Received: 500

      250 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      251 |
    > 252 |       expect(response.status).toBe(504);
          |                               ^
      253 |     });
      254 |   });
      255 | });

      at Object.toBe (__tests__/api/video/upscale.test.ts:252:31)

FAIL __tests__/api/video/generate-audio.test.ts
  ● POST /api/video/generate-audio › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:78:34)

  ● POST /api/video/generate-audio › Authentication › should return 401 when auth error occurs

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:98:34)

  ● POST /api/video/generate-audio › Input Validation - Required Fields › should return 400 when assetId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:113:34)

  ● POST /api/video/generate-audio › Input Validation - Required Fields › should return 400 when projectId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:128:34)

  ● POST /api/video/generate-audio › Input Validation - Required Fields › should return 400 when both assetId and projectId are missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:141:34)

  ● POST /api/video/generate-audio › Model Validation › should return 400 for invalid model

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:158:34)

  ● POST /api/video/generate-audio › Model Validation › should accept minimax model

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:190:34)

  ● POST /api/video/generate-audio › Model Validation › should accept mureka-1.5 model

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:219:34)

  ● POST /api/video/generate-audio › Model Validation › should accept kling-turbo-2.5 model

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:248:34)

  ● POST /api/video/generate-audio › Model Validation › should default to minimax model when not specified

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:276:34)

  ● POST /api/video/generate-audio › Asset Verification › should return 404 when asset not found

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:299:34)

  ● POST /api/video/generate-audio › Asset Verification › should verify asset belongs to user

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:324:17)

  ● POST /api/video/generate-audio › API Key Configuration › should return 500 when FAL_API_KEY is not configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:352:34)

  ● POST /api/video/generate-audio › Storage URL Handling › should convert storage URL to public URL

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:391:34)

  ● POST /api/video/generate-audio › Storage URL Handling › should return 500 when video URL cannot be obtained

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:415:34)

  ● POST /api/video/generate-audio › FAL.ai API Integration › should call FAL.ai API with correct parameters

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:449:17)

  ● POST /api/video/generate-audio › FAL.ai API Integration › should handle FAL.ai API errors

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:488:34)

  ● POST /api/video/generate-audio › FAL.ai API Integration › should handle API timeout

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:519:34)

  ● POST /api/video/generate-audio › FAL.ai API Integration › should return 500 when request_id is missing from response

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:549:34)

  ● POST /api/video/generate-audio › Database Job Tracking › should create job record in database

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:583:17)

  ● POST /api/video/generate-audio › Database Job Tracking › should continue when job database insert fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:622:34)

  ● POST /api/video/generate-audio › Success Cases › should successfully start video-to-audio generation

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:654:34)

  ● POST /api/video/generate-audio › Success Cases › should accept optional prompt parameter

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/generate-audio.test.ts:688:34)

FAIL __tests__/api/audio/elevenlabs-sfx.test.ts
  ● POST /api/audio/elevenlabs/sfx › Input Validation › should return 400 for duration less than 0.5 seconds

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      219 |       const response = await POST(mockRequest);
      220 |
    > 221 |       expect(response.status).toBe(400);
          |                               ^
      222 |       const data = await response.json();
      223 |       expect(data.error).toContain('between 0.5 and 22 seconds');
      224 |     });

      at Object.toBe (__tests__/api/audio/elevenlabs-sfx.test.ts:221:31)

  ● POST /api/audio/elevenlabs/sfx › Input Validation › should return 400 for duration greater than 22 seconds

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      238 |       const response = await POST(mockRequest);
      239 |
    > 240 |       expect(response.status).toBe(400);
          |                               ^
      241 |     });
      242 |
      243 |     it('should use default duration of 5.0 when not provided', async () => {

      at Object.toBe (__tests__/api/audio/elevenlabs-sfx.test.ts:240:31)

  ● POST /api/audio/elevenlabs/sfx › Success Cases › should generate SFX successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      375 |       expect(response.status).toBe(200);
      376 |       const data = await response.json();
    > 377 |       expect(data.success).toBe(true);
          |                            ^
      378 |       expect(data.asset).toBeTruthy();
      379 |       expect(data.url).toBe('https://example.com/sfx.mp3');
      380 |     });

      at Object.toBe (__tests__/api/audio/elevenlabs-sfx.test.ts:377:28)

  ● POST /api/audio/elevenlabs/sfx › Error Handling › should return error when ElevenLabs API fails

    expect(received).toBe(expected) // Object.is equality

    Expected: 402
    Received: 500

      523 |       const response = await POST(mockRequest);
      524 |
    > 525 |       expect(response.status).toBe(402);
          |                               ^
      526 |     });
      527 |
      528 |     it('should return 504 when API times out', async () => {

      at Object.toBe (__tests__/api/audio/elevenlabs-sfx.test.ts:525:31)

  ● POST /api/audio/elevenlabs/sfx › Error Handling › should return 504 when API times out

    expect(received).toBe(expected) // Object.is equality

    Expected: 504
    Received: 500

      542 |       const response = await POST(mockRequest);
      543 |
    > 544 |       expect(response.status).toBe(504);
          |                               ^
      545 |       const data = await response.json();
      546 |       expect(data.error).toContain('timeout');
      547 |     });

      at Object.toBe (__tests__/api/audio/elevenlabs-sfx.test.ts:544:31)

FAIL __tests__/api/stripe/portal.test.ts
  ● POST /api/stripe/portal › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/stripe/portal.test.ts:83:34)

  ● POST /api/stripe/portal › Authentication › should proceed when user is authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/stripe/portal.test.ts:108:34)

  ● POST /api/stripe/portal › Rate Limiting › should enforce tier1 rate limiting (5/min)

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/stripe/portal.test.ts:126:34)

  ● POST /api/stripe/portal › Rate Limiting › should use correct rate limit tier for payment operations

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      137 |       const mockUserService = new UserService(mockSupabase);
      138 |
    > 139 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      140 |         createMockUserProfile({
      141 |           id: mockUser.id,
      142 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:139:38)

  ● POST /api/stripe/portal › User Profile Verification › should retrieve user profile using UserService

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      165 |       const mockUserService = new UserService(mockSupabase);
      166 |
    > 167 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      168 |         createMockUserProfile({
      169 |           id: mockUser.id,
      170 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:167:38)

  ● POST /api/stripe/portal › User Profile Verification › should return 400 when user profile not found

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      188 |       const mockUserService = new UserService(mockSupabase);
      189 |
    > 190 |       mockUserService.getUserProfile.mockResolvedValue(null);
          |                                      ^
      191 |
      192 |       const response = await POST(mockRequest);
      193 |

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:190:38)

  ● POST /api/stripe/portal › User Profile Verification › should return 400 when Stripe customer ID not found

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      203 |       const mockUserService = new UserService(mockSupabase);
      204 |
    > 205 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      206 |         createMockUserProfile({
      207 |           id: mockUser.id,
      208 |           stripe_customer_id: null,

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:205:38)

  ● POST /api/stripe/portal › Billing Portal Session Creation › should create billing portal session with Stripe

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      230 |       });
      231 |
    > 232 |       mockUserService.getUserProfile.mockResolvedValue(mockProfile);
          |                                      ^
      233 |
      234 |       const { createBillingPortalSession } = require('@/lib/stripe');
      235 |       createBillingPortalSession.mockResolvedValue({

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:232:38)

  ● POST /api/stripe/portal › Billing Portal Session Creation › should use NEXT_PUBLIC_BASE_URL for return URL

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      251 |       const mockUserService = new UserService(mockSupabase);
      252 |
    > 253 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      254 |         createMockUserProfile({
      255 |           id: mockUser.id,
      256 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:253:38)

  ● POST /api/stripe/portal › Billing Portal Session Creation › should fall back to request origin if NEXT_PUBLIC_BASE_URL not set

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      280 |       const mockUserService = new UserService(mockSupabase);
      281 |
    > 282 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      283 |         createMockUserProfile({
      284 |           id: mockUser.id,
      285 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:282:38)

  ● POST /api/stripe/portal › Billing Portal Session Creation › should return portal URL in response

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      309 |       const mockUserService = new UserService(mockSupabase);
      310 |
    > 311 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      312 |         createMockUserProfile({
      313 |           id: mockUser.id,
      314 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:311:38)

  ● POST /api/stripe/portal › Error Handling › should return 500 when Stripe API fails

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      338 |       const mockUserService = new UserService(mockSupabase);
      339 |
    > 340 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      341 |         createMockUserProfile({
      342 |           id: mockUser.id,
      343 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:340:38)

  ● POST /api/stripe/portal › Error Handling › should log error when portal creation fails

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      361 |       const { serverLogger } = require('@/lib/serverLogger');
      362 |
    > 363 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      364 |         createMockUserProfile({
      365 |           id: mockUser.id,
      366 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:363:38)

  ● POST /api/stripe/portal › Error Handling › should handle unexpected errors gracefully

    TypeError: Cannot read properties of undefined (reading 'mockImplementation')

      388 |       const mockUserService = new UserService(mockSupabase);
      389 |
    > 390 |       mockUserService.getUserProfile.mockImplementation(() => {
          |                                      ^
      391 |         throw new Error('Unexpected error');
      392 |       });
      393 |

      at Object.mockImplementation (__tests__/api/stripe/portal.test.ts:390:38)

  ● POST /api/stripe/portal › Logging › should log request start

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      407 |       const { serverLogger } = require('@/lib/serverLogger');
      408 |
    > 409 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      410 |         createMockUserProfile({
      411 |           id: mockUser.id,
      412 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:409:38)

  ● POST /api/stripe/portal › Logging › should log when customer is found

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      443 |       });
      444 |
    > 445 |       mockUserService.getUserProfile.mockResolvedValue(mockProfile);
          |                                      ^
      446 |
      447 |       const { createBillingPortalSession } = require('@/lib/stripe');
      448 |       createBillingPortalSession.mockResolvedValue({

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:445:38)

  ● POST /api/stripe/portal › Logging › should log session creation success with duration

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      470 |       const { serverLogger } = require('@/lib/serverLogger');
      471 |
    > 472 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      473 |         createMockUserProfile({
      474 |           id: mockUser.id,
      475 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:472:38)

  ● POST /api/stripe/portal › Logging › should log warning when no profile found

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      503 |       const { serverLogger } = require('@/lib/serverLogger');
      504 |
    > 505 |       mockUserService.getUserProfile.mockResolvedValue(null);
          |                                      ^
      506 |
      507 |       await POST(mockRequest);
      508 |

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:505:38)

  ● POST /api/stripe/portal › Logging › should log warning when no customer ID found

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      521 |       const { serverLogger } = require('@/lib/serverLogger');
      522 |
    > 523 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      524 |         createMockUserProfile({
      525 |           id: mockUser.id,
      526 |           stripe_customer_id: null,

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:523:38)

  ● POST /api/stripe/portal › Security › should verify user owns the profile being accessed

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      553 |       const mockUserService = new UserService(mockSupabase);
      554 |
    > 555 |       mockUserService.getUserProfile.mockResolvedValue(
          |                                      ^
      556 |         createMockUserProfile({
      557 |           id: mockUser.id,
      558 |           stripe_customer_id: 'cus_test123',

      at Object.mockResolvedValue (__tests__/api/stripe/portal.test.ts:555:38)

FAIL __tests__/api/payments/webhook.test.ts
  ● POST /api/stripe/webhook › Webhook Verification › should return 400 when signature is missing

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › Webhook Verification › should return 503 when webhook secret not configured

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › Webhook Verification › should return 400 when signature verification fails

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › Webhook Verification › should verify webhook signature correctly

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › checkout.session.completed Event › should upgrade user to premium on successful checkout

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › checkout.session.completed Event › should preserve admin tier on checkout

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › checkout.session.completed Event › should return 500 when userId missing in metadata

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › checkout.session.completed Event › should return 500 when user profile not found

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › checkout.session.completed Event › should return 500 when database update fails

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › customer.subscription.updated Event › should update subscription status

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › customer.subscription.updated Event › should downgrade to free when subscription becomes inactive

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › customer.subscription.updated Event › should preserve admin tier on subscription update

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › customer.subscription.deleted Event › should downgrade user to free tier

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › customer.subscription.deleted Event › should preserve admin tier on subscription deletion

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › Unhandled Events › should log warning for unhandled event types

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

  ● POST /api/stripe/webhook › Error Recovery › should return 400 on signature verification error

    TypeError: Cannot read properties of undefined (reading 'from')

      84 |     // Reset the chainable methods to return mockSupabase
      85 |     // This ensures the query builder chain works correctly
    > 86 |     if (mockSupabase.from) {
         |                      ^
      87 |       mockSupabase.from.mockClear();
      88 |       mockSupabase.from.mockImplementation(() => mockSupabase);
      89 |     }

      at Object.from (__tests__/api/payments/webhook.test.ts:86:22)

FAIL __tests__/api/frames/frameId-edit.test.ts
  ● POST /api/frames/[frameId]/edit › Frame ID Validation › should return 400 when frameId is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      106 |         params: Promise.resolve({ frameId: undefined as unknown as string }),
      107 |       });
    > 108 |       expect(response.status).toBe(400);
          |                               ^
      109 |     });
      110 |   });
      111 |

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:108:31)

  ● POST /api/frames/[frameId]/edit › Input Validation › should return 400 when prompt is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      124 |         params: Promise.resolve({ frameId: validFrameId }),
      125 |       });
    > 126 |       expect(response.status).toBe(400);
          |                               ^
      127 |     });
      128 |
      129 |     it('should return 400 when prompt is not a string', async () => {

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:126:31)

  ● POST /api/frames/[frameId]/edit › Input Validation › should return 400 when prompt is not a string

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      140 |         params: Promise.resolve({ frameId: validFrameId }),
      141 |       });
    > 142 |       expect(response.status).toBe(400);
          |                               ^
      143 |     });
      144 |
      145 |     it('should limit numVariations between 1 and 8', async () => {

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:142:31)

  ● POST /api/frames/[frameId]/edit › Input Validation › should limit numVariations between 1 and 8

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      179 |         params: Promise.resolve({ frameId: validFrameId }),
      180 |       });
    > 181 |       expect(response.status).toBe(200);
          |                               ^
      182 |       const data = await response.json();
      183 |       expect(data.count).toBeLessThanOrEqual(8);
      184 |     });

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:181:31)

  ● POST /api/frames/[frameId]/edit › Frame Ownership Verification › should return 404 when frame not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      204 |         params: Promise.resolve({ frameId: validFrameId }),
      205 |       });
    > 206 |       expect(response.status).toBe(404);
          |                               ^
      207 |     });
      208 |
      209 |     it('should return 403 when user does not own project', async () => {

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:206:31)

  ● POST /api/frames/[frameId]/edit › Frame Ownership Verification › should return 403 when user does not own project

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      230 |         params: Promise.resolve({ frameId: validFrameId }),
      231 |       });
    > 232 |       expect(response.status).toBe(403);
          |                               ^
      233 |     });
      234 |
      235 |     it('should return 403 when user does not own asset', async () => {

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:232:31)

  ● POST /api/frames/[frameId]/edit › Frame Ownership Verification › should return 403 when user does not own asset

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      257 |         params: Promise.resolve({ frameId: validFrameId }),
      258 |       });
    > 259 |       expect(response.status).toBe(403);
          |                               ^
      260 |     });
      261 |   });
      262 |

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:259:31)

  ● POST /api/frames/[frameId]/edit › API Key Configuration › should return 503 when API key not configured

    expect(received).toBe(expected) // Object.is equality

    Expected: 503
    Received: 500

      289 |         params: Promise.resolve({ frameId: validFrameId }),
      290 |       });
    > 291 |       expect(response.status).toBe(503);
          |                               ^
      292 |     });
      293 |
      294 |     it('should accept GEMINI_API_KEY as alternative', async () => {

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:291:31)

  ● POST /api/frames/[frameId]/edit › API Key Configuration › should accept GEMINI_API_KEY as alternative

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      331 |         params: Promise.resolve({ frameId: validFrameId }),
      332 |       });
    > 333 |       expect(response.status).toBe(200);
          |                               ^
      334 |     });
      335 |   });
      336 |

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:333:31)

  ● POST /api/frames/[frameId]/edit › Edit Modes › should support global mode (default)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      373 |         params: Promise.resolve({ frameId: validFrameId }),
      374 |       });
    > 375 |       expect(response.status).toBe(200);
          |                               ^
      376 |     });
      377 |
      378 |     it('should support crop mode with parameters', async () => {

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:375:31)

  ● POST /api/frames/[frameId]/edit › Edit Modes › should support crop mode with parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      420 |         params: Promise.resolve({ frameId: validFrameId }),
      421 |       });
    > 422 |       expect(response.status).toBe(200);
          |                               ^
      423 |     });
      424 |   });
      425 |

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:422:31)

  ● POST /api/frames/[frameId]/edit › Success Cases › should successfully create frame edits

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      467 |         params: Promise.resolve({ frameId: validFrameId }),
      468 |       });
    > 469 |       expect(response.status).toBe(200);
          |                               ^
      470 |       const data = await response.json();
      471 |       expect(data.success).toBe(true);
      472 |       expect(data.edits).toBeDefined();

      at Object.toBe (__tests__/api/frames/frameId-edit.test.ts:469:31)

FAIL __tests__/api/assets/sign.test.ts
  ● GET /api/assets/sign › Input Validation › should return 400 when neither storageUrl nor assetId provided

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      81 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      82 |
    > 83 |       expect(response.status).toBe(400);
         |                               ^
      84 |       const data = await response.json();
      85 |       expect(data.error).toContain('required');
      86 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:83:31)

  ● GET /api/assets/sign › Input Validation › should return 400 when storageUrl is invalid

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      92 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      93 |
    > 94 |       expect(response.status).toBe(400);
         |                               ^
      95 |       const data = await response.json();
      96 |       expect(data.error).toBe('Invalid storage URL format. Must start with supabase://');
      97 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:94:31)

  ● GET /api/assets/sign › Input Validation › should accept valid supabase:// storage URLs

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      105 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      106 |
    > 107 |       expect(response.status).toBe(200);
          |                               ^
      108 |     });
      109 |   });
      110 |

      at Object.toBe (__tests__/api/assets/sign.test.ts:107:31)

  ● GET /api/assets/sign › Asset Lookup by assetId › should fetch storageUrl from database when assetId provided

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      127 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      128 |
    > 129 |       expect(response.status).toBe(200);
          |                               ^
      130 |       expect(mockSupabase.select).toHaveBeenCalledWith('storage_url, user_id');
      131 |       expect(mockSupabase.eq).toHaveBeenCalledWith('id', VALID_ASSET_ID);
      132 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:129:31)

  ● GET /api/assets/sign › Asset Lookup by assetId › should return 404 when asset not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      145 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      146 |
    > 147 |       expect(response.status).toBe(404);
          |                               ^
      148 |       const data = await response.json();
      149 |       expect(data.error).toBe('Asset not found');
      150 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:147:31)

  ● GET /api/assets/sign › Asset Lookup by assetId › should return 403 when asset belongs to different user

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      166 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      167 |
    > 168 |       expect(response.status).toBe(403);
          |                               ^
      169 |       const data = await response.json();
      170 |       expect(data.error).toBe('Asset does not belong to user');
      171 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:168:31)

  ● GET /api/assets/sign › Asset Authorization by storageUrl › should verify user owns asset by checking folder structure

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      181 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      182 |
    > 183 |       expect(response.status).toBe(200);
          |                               ^
      184 |     });
      185 |
      186 |     it('should return 403 when storageUrl does not match user', async () => {

      at Object.toBe (__tests__/api/assets/sign.test.ts:183:31)

  ● GET /api/assets/sign › Asset Authorization by storageUrl › should return 403 when storageUrl does not match user

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      192 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      193 |
    > 194 |       expect(response.status).toBe(403);
          |                               ^
      195 |       const data = await response.json();
      196 |       expect(data.error).toContain('does not belong to user');
      197 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:194:31)

  ● GET /api/assets/sign › Asset Authorization by storageUrl › should skip folder check when assetId was used for lookup

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      214 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      215 |
    > 216 |       expect(response.status).toBe(200);
          |                               ^
      217 |     });
      218 |   });
      219 |

      at Object.toBe (__tests__/api/assets/sign.test.ts:216:31)

  ● GET /api/assets/sign › Signed URL Generation › should create signed URL with default TTL

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      227 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      228 |
    > 229 |       expect(response.status).toBe(200);
          |                               ^
      230 |       expect(mockSupabase.storage.createSignedUrl).toHaveBeenCalledWith(
      231 |         expect.stringContaining('test.jpg'),
      232 |         3600

      at Object.toBe (__tests__/api/assets/sign.test.ts:229:31)

  ● GET /api/assets/sign › Signed URL Generation › should create signed URL with custom TTL

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      242 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      243 |
    > 244 |       expect(response.status).toBe(200);
          |                               ^
      245 |       expect(mockSupabase.storage.createSignedUrl).toHaveBeenCalledWith(expect.any(String), 7200);
      246 |     });
      247 |

      at Object.toBe (__tests__/api/assets/sign.test.ts:244:31)

  ● GET /api/assets/sign › Signed URL Generation › should parse storage URL correctly

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "assets"

    Number of calls: 0

      254 |       await GET(mockRequest, { params: Promise.resolve({}) });
      255 |
    > 256 |       expect(mockSupabase.storage.from).toHaveBeenCalledWith('assets');
          |                                         ^
      257 |       expect(mockSupabase.storage.createSignedUrl).toHaveBeenCalledWith(
      258 |         `${mockUser.id}/project-id/image/test.jpg`,
      259 |         expect.any(Number)

      at Object.toHaveBeenCalledWith (__tests__/api/assets/sign.test.ts:256:41)

  ● GET /api/assets/sign › Signed URL Generation › should return signed URL and expiration

    expect(received).toHaveProperty(path, value)

    Expected path: "signedUrl"
    Received path: []

    Expected value: "https://example.com/signed-url-12345"
    Received value: {"error": "_serverLogger.serverLogger.child is not a function"}

      275 |       const data = await response.json();
      276 |
    > 277 |       expect(data).toHaveProperty('signedUrl', 'https://example.com/signed-url-12345');
          |                    ^
      278 |       expect(data).toHaveProperty('expiresIn', 1800);
      279 |     });
      280 |   });

      at Object.toHaveProperty (__tests__/api/assets/sign.test.ts:277:20)

  ● GET /api/assets/sign › Storage Bucket Handling › should handle different storage buckets

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "custom-bucket"

    Number of calls: 0

      297 |       await GET(mockRequest, { params: Promise.resolve({}) });
      298 |
    > 299 |       expect(mockSupabase.storage.from).toHaveBeenCalledWith('custom-bucket');
          |                                         ^
      300 |     });
      301 |
      302 |     it('should handle paths with multiple slashes', async () => {

      at Object.toHaveBeenCalledWith (__tests__/api/assets/sign.test.ts:299:41)

  ● GET /api/assets/sign › Storage Bucket Handling › should handle paths with multiple slashes

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-user-id/a/b/c/test.jpg", Any<Number>

    Number of calls: 0

      308 |       await GET(mockRequest, { params: Promise.resolve({}) });
      309 |
    > 310 |       expect(mockSupabase.storage.createSignedUrl).toHaveBeenCalledWith(
          |                                                    ^
      311 |         `${mockUser.id}/a/b/c/test.jpg`,
      312 |         expect.any(Number)
      313 |       );

      at Object.toHaveBeenCalledWith (__tests__/api/assets/sign.test.ts:310:52)

  ● GET /api/assets/sign › Error Handling › should return 500 when storage signing fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Storage error"
    Received: "_serverLogger.serverLogger.child is not a function"

      331 |       expect(response.status).toBe(500);
      332 |       const data = await response.json();
    > 333 |       expect(data.error).toBe('Storage error');
          |                          ^
      334 |     });
      335 |
      336 |     it('should return 500 when database query fails', async () => {

      at Object.toBe (__tests__/api/assets/sign.test.ts:333:26)

  ● GET /api/assets/sign › Error Handling › should return 500 when database query fails

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      345 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      346 |
    > 347 |       expect(response.status).toBe(404);
          |                               ^
      348 |     });
      349 |
      350 |     it('should handle unexpected errors gracefully', async () => {

      at Object.toBe (__tests__/api/assets/sign.test.ts:347:31)

  ● GET /api/assets/sign › Error Handling › should handle unexpected errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Unexpected error"
    Received: "_serverLogger.serverLogger.child is not a function"

      362 |       expect(response.status).toBe(500);
      363 |       const data = await response.json();
    > 364 |       expect(data.error).toBe('Unexpected error');
          |                          ^
      365 |     });
      366 |   });
      367 |

      at Object.toBe (__tests__/api/assets/sign.test.ts:364:26)

  ● GET /api/assets/sign › URL Format Handling › should strip supabase:// protocol

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "assets"

    Number of calls: 0

      376 |
      377 |       // Verify protocol was stripped
    > 378 |       expect(mockSupabase.storage.from).toHaveBeenCalledWith('assets');
          |                                         ^
      379 |       expect(mockSupabase.storage.createSignedUrl).not.toHaveBeenCalledWith(
      380 |         expect.stringContaining('supabase://'),
      381 |         expect.any(Number)

      at Object.toHaveBeenCalledWith (__tests__/api/assets/sign.test.ts:378:41)

  ● GET /api/assets/sign › URL Format Handling › should handle URLs with special characters

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      391 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      392 |
    > 393 |       expect(response.status).toBe(200);
          |                               ^
      394 |     });
      395 |
      396 |     it('should validate bucket name is not empty', async () => {

      at Object.toBe (__tests__/api/assets/sign.test.ts:393:31)

  ● GET /api/assets/sign › URL Format Handling › should validate bucket name is not empty

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      402 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      403 |
    > 404 |       expect(response.status).toBe(400);
          |                               ^
      405 |       const data = await response.json();
      406 |       expect(data.error).toBe('Invalid storage URL');
      407 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:404:31)

  ● GET /api/assets/sign › URL Format Handling › should validate path is not empty

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      415 |       const response = await GET(mockRequest, { params: Promise.resolve({}) });
      416 |
    > 417 |       expect(response.status).toBe(400);
          |                               ^
      418 |       const data = await response.json();
      419 |       expect(data.error).toBe('Invalid storage URL');
      420 |     });

      at Object.toBe (__tests__/api/assets/sign.test.ts:417:31)

FAIL __tests__/api/assets/upload.test.ts
  ● POST /api/assets/upload › Input Validation › should return 400 when no file provided

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      124 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      125 |
    > 126 |       expect(response.status).toBe(400);
          |                               ^
      127 |       const data = await response.json();
      128 |       expect(data.error).toBe('No file provided');
      129 |     });

      at Object.toBe (__tests__/api/assets/upload.test.ts:126:31)

  ● POST /api/assets/upload › Input Validation › should return 400 when no projectId provided

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      142 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      143 |
    > 144 |       expect(response.status).toBe(400);
          |                               ^
      145 |       const data = await response.json();
      146 |       expect(data.error).toBe('Project ID required');
      147 |     });

      at Object.toBe (__tests__/api/assets/upload.test.ts:144:31)

  ● POST /api/assets/upload › Input Validation › should return 400 when file exceeds size limit

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      171 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      172 |
    > 173 |       expect(response.status).toBe(400);
          |                               ^
      174 |       const data = await response.json();
      175 |       expect(data.error).toBe('File too large');
      176 |       expect(data.details).toContain('100MB');

      at Object.toBe (__tests__/api/assets/upload.test.ts:173:31)

  ● POST /api/assets/upload › Input Validation › should return 400 for invalid image MIME type

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      193 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      194 |
    > 195 |       expect(response.status).toBe(400);
          |                               ^
      196 |       const data = await response.json();
      197 |       expect(data.error).toBe('Invalid file type');
      198 |     });

      at Object.toBe (__tests__/api/assets/upload.test.ts:195:31)

  ● POST /api/assets/upload › Input Validation › should accept valid image MIME types

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      224 |
      225 |         const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 226 |         expect(response.status).toBe(200);
          |                                 ^
      227 |       }
      228 |     });
      229 |

      at Object.toBe (__tests__/api/assets/upload.test.ts:226:33)

  ● POST /api/assets/upload › Input Validation › should accept valid video MIME types

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      255 |
      256 |         const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 257 |         expect(response.status).toBe(200);
          |                                 ^
      258 |       }
      259 |     });
      260 |   });

      at Object.toBe (__tests__/api/assets/upload.test.ts:257:33)

  ● POST /api/assets/upload › Project Authorization › should return 404 when project not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      290 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      291 |
    > 292 |       expect(response.status).toBe(404);
          |                               ^
      293 |       const data = await response.json();
      294 |       expect(data.error).toContain('not found');
      295 |     });

      at Object.toBe (__tests__/api/assets/upload.test.ts:292:31)

  ● POST /api/assets/upload › Project Authorization › should return 404 when user does not own project

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      327 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      328 |
    > 329 |       expect(response.status).toBe(404);
          |                               ^
      330 |     });
      331 |
      332 |     it('should verify project ownership with user_id', async () => {

      at Object.toBe (__tests__/api/assets/upload.test.ts:329:31)

  ● POST /api/assets/upload › Project Authorization › should verify project ownership with user_id

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "id", "123e4567-e89b-12d3-a456-426614174000"

    Number of calls: 0

      354 |       await POST(mockRequest, { params: Promise.resolve({}) });
      355 |
    > 356 |       expect(mockSupabase.eq).toHaveBeenCalledWith('id', '123e4567-e89b-12d3-a456-426614174000');
          |                               ^
      357 |       expect(mockSupabase.eq).toHaveBeenCalledWith('user_id', mockUser.id);
      358 |     });
      359 |   });

      at Object.toHaveBeenCalledWith (__tests__/api/assets/upload.test.ts:356:31)

  ● POST /api/assets/upload › File Upload Success › should upload file and create asset record

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      384 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      385 |
    > 386 |       expect(response.status).toBe(200);
          |                               ^
      387 |       expect(mockSupabase.storage.upload).toHaveBeenCalled();
      388 |       expect(mockSupabase.insert).toHaveBeenCalledWith(
      389 |         expect.objectContaining({

      at Object.toBe (__tests__/api/assets/upload.test.ts:386:31)

  ● POST /api/assets/upload › File Upload Success › should generate unique filename with UUID

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringMatching /mock-uuid-123\./, Any<Buffer>, Any<Object>

    Number of calls: 0

      421 |       await POST(mockRequest, { params: Promise.resolve({}) });
      422 |
    > 423 |       expect(mockSupabase.storage.upload).toHaveBeenCalledWith(
          |                                           ^
      424 |         expect.stringMatching(/mock-uuid-123\./),
      425 |         expect.any(Buffer),
      426 |         expect.any(Object)

      at Object.toHaveBeenCalledWith (__tests__/api/assets/upload.test.ts:423:43)

  ● POST /api/assets/upload › File Upload Success › should organize files in correct folder structure

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "test-user-id/test-project-id/image/", Any<Buffer>, Any<Object>

    Number of calls: 0

      453 |       await POST(mockRequest, { params: Promise.resolve({}) });
      454 |
    > 455 |       expect(mockSupabase.storage.upload).toHaveBeenCalledWith(
          |                                           ^
      456 |         expect.stringContaining(`${mockUser.id}/test-project-id/image/`),
      457 |         expect.any(Buffer),
      458 |         expect.any(Object)

      at Object.toHaveBeenCalledWith (__tests__/api/assets/upload.test.ts:455:43)

  ● POST /api/assets/upload › File Upload Success › should return asset information in response

    expect(received).toHaveProperty(path)

    Expected path: "assetId"
    Received path: []

    Received value: {"error": "Cannot read properties of undefined (reading 'success')"}

      485 |       const data = await response.json();
      486 |
    > 487 |       expect(data).toHaveProperty('assetId');
          |                    ^
      488 |       expect(data).toHaveProperty('storageUrl');
      489 |       expect(data).toHaveProperty('publicUrl');
      490 |       expect(data).toHaveProperty('success', true);

      at Object.toHaveProperty (__tests__/api/assets/upload.test.ts:487:20)

  ● POST /api/assets/upload › Error Handling › should return 500 when storage upload fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Storage quota exceeded"
    Received: "Cannot read properties of undefined (reading 'success')"

      517 |       expect(response.status).toBe(500);
      518 |       const data = await response.json();
    > 519 |       expect(data.error).toBe('Storage quota exceeded');
          |                          ^
      520 |     });
      521 |
      522 |     it('should delete uploaded file when database insert fails', async () => {

      at Object.toBe (__tests__/api/assets/upload.test.ts:519:26)

  ● POST /api/assets/upload › Error Handling › should delete uploaded file when database insert fails

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      551 |
      552 |       expect(response.status).toBe(500);
    > 553 |       expect(mockSupabase.storage.remove).toHaveBeenCalled();
          |                                           ^
      554 |     });
      555 |
      556 |     it('should handle unexpected errors', async () => {

      at Object.toHaveBeenCalled (__tests__/api/assets/upload.test.ts:553:43)

  ● POST /api/assets/upload › Error Handling › should handle unexpected errors

    expect(received).toBe(expected) // Object.is equality

    Expected: "Internal server error"
    Received: "Cannot read properties of undefined (reading 'success')"

      579 |       expect(response.status).toBe(500);
      580 |       const data = await response.json();
    > 581 |       expect(data.error).toBe('Internal server error');
          |                          ^
      582 |     });
      583 |   });
      584 |

      at Object.toBe (__tests__/api/assets/upload.test.ts:581:26)

  ● POST /api/assets/upload › Activity History › should log upload to activity history

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"activity_type": "image_upload", "project_id": "123e4567-e89b-12d3-a456-426614174000", "user_id": "test-user-id"}

    Number of calls: 0

      608 |       await POST(mockRequest, { params: Promise.resolve({}) });
      609 |
    > 610 |       expect(mockSupabase.insert).toHaveBeenCalledWith(
          |                                   ^
      611 |         expect.objectContaining({
      612 |           activity_type: 'image_upload',
      613 |           user_id: mockUser.id,

      at Object.toHaveBeenCalledWith (__tests__/api/assets/upload.test.ts:610:35)

FAIL __tests__/api/docs/docs.test.ts
  ● GET /api/docs › JSON Format › should set cache-control header for JSON

    The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.
    Consider using the "node" test environment.

    TypeError: fastNowTimeout?.unref is not a function

      at refreshTimeout (node_modules/undici/lib/util/timers.js:205:21)
      at FastTimer.refresh (node_modules/undici/lib/util/timers.js:297:7)
      at new FastTimer (node_modules/undici/lib/util/timers.js:274:10)
      at Object.setFastTimeout (node_modules/undici/lib/util/timers.js:376:12)
      at Object.setupConnectTimeout (node_modules/undici/lib/core/util.js:842:32)
      at Client.connect (node_modules/undici/lib/core/connect.js:107:38)
      at connect (node_modules/undici/lib/dispatcher/client.js:419:21)
      at _resume (node_modules/undici/lib/dispatcher/client.js:594:7)
      at resume (node_modules/undici/lib/dispatcher/client.js:528:3)
      at node_modules/undici/lib/dispatcher/client.js:307:28
      at invokeTheCallbackFunction (node_modules/jsdom/lib/jsdom/living/generated/Function.js:19:26)
      at node_modules/jsdom/lib/jsdom/browser/Window.js:613:9

  ● GET /api/docs › Error Handling › should return 500 when file read fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "File not found"
    Received: undefined

      182 |       const data = await response.json();
      183 |       expect(data.error).toBe('Failed to load API documentation');
    > 184 |       expect(data.message).toBe('File not found');
          |                            ^
      185 |     });
      186 |
      187 |     it('should return 500 when YAML parsing fails', async () => {

      at Object.toBe (__tests__/api/docs/docs.test.ts:184:28)

  ● GET /api/docs › Error Handling › should return 500 when YAML parsing fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "Failed to load API documentation"
    Received: "Failed to parse API documentation"

      196 |       expect(response.status).toBe(500);
      197 |       const data = await response.json();
    > 198 |       expect(data.error).toBe('Failed to load API documentation');
          |                          ^
      199 |       expect(data.message).toBe('Invalid YAML');
      200 |     });
      201 |

      at Object.toBe (__tests__/api/docs/docs.test.ts:198:26)

  ● GET /api/docs › Error Handling › should handle unknown errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Unknown error"
    Received: undefined

      211 |       const data = await response.json();
      212 |       expect(data.error).toBe('Failed to load API documentation');
    > 213 |       expect(data.message).toBe('Unknown error');
          |                            ^
      214 |     });
      215 |   });
      216 |

      at Object.toBe (__tests__/api/docs/docs.test.ts:213:28)

  ● GET /api/docs › Response Structure › should return valid error structure on failure

    expect(received).toHaveProperty(path)

    Expected path: "message"
    Received path: []

    Received value: {"details": {"error": "Test error"}, "error": "Failed to load API documentation"}

      304 |       const data = await response.json();
      305 |       expect(data).toHaveProperty('error');
    > 306 |       expect(data).toHaveProperty('message');
          |                    ^
      307 |       expect(data.error).toBe('Failed to load API documentation');
      308 |       expect(data.message).toBe('Test error');
      309 |     });

      at Object.toHaveProperty (__tests__/api/docs/docs.test.ts:306:20)

FAIL __tests__/api/user/delete-account.test.ts
  ● DELETE /api/user/delete-account › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:105:36)

  ● DELETE /api/user/delete-account › Authentication › should proceed when user is authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:126:36)

  ● DELETE /api/user/delete-account › Rate Limiting › should enforce tier1 rate limiting (5/min)

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:144:36)

  ● DELETE /api/user/delete-account › Rate Limiting › should use user ID for rate limit identifier when authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:166:19)

  ● DELETE /api/user/delete-account › Data Deletion Flow › should delete user projects first (cascade deletion)

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:189:19)

  ● DELETE /api/user/delete-account › Data Deletion Flow › should delete user subscription data

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:209:19)

  ● DELETE /api/user/delete-account › Data Deletion Flow › should delete user activity history

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:229:19)

  ● DELETE /api/user/delete-account › Data Deletion Flow › should delete user roles

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:247:19)

  ● DELETE /api/user/delete-account › Data Deletion Flow › should delete user account using service role client

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:265:19)

  ● DELETE /api/user/delete-account › Storage Cleanup › should delete assets from storage bucket

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:296:19)

  ● DELETE /api/user/delete-account › Storage Cleanup › should delete frames from storage bucket

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:330:19)

  ● DELETE /api/user/delete-account › Storage Cleanup › should continue deletion even if storage cleanup fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:352:36)

  ● DELETE /api/user/delete-account › Error Handling › should return 500 when project deletion fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:368:36)

  ● DELETE /api/user/delete-account › Error Handling › should return 500 when user account deletion fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:390:36)

  ● DELETE /api/user/delete-account › Error Handling › should continue if subscription deletion fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:416:36)

  ● DELETE /api/user/delete-account › Error Handling › should continue if activity history deletion fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:443:36)

  ● DELETE /api/user/delete-account › Error Handling › should continue if roles deletion fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:469:36)

  ● DELETE /api/user/delete-account › Error Handling › should handle unexpected errors gracefully

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:481:36)

  ● DELETE /api/user/delete-account › Success Response › should return 200 with success message on complete deletion

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:503:36)

  ● DELETE /api/user/delete-account › Audit Logging › should log account deletion to activity history

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:526:19)

  ● DELETE /api/user/delete-account › GDPR Compliance › should delete all personal data in correct order

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:558:19)

  ● DELETE /api/user/delete-account › GDPR Compliance › should use service role client for privileged operations

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/user/delete-account.test.ts:584:19)

FAIL __tests__/api/video/upscale-status.test.ts
  ● GET /api/video/upscale-status › API Key Configuration › should return 500 when FAL_API_KEY not configured

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:102:24)

  ● GET /api/video/upscale-status › Status Polling › should return in progress status

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:119:24)

  ● GET /api/video/upscale-status › Status Polling › should return in queue status

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:137:24)

  ● GET /api/video/upscale-status › Status Polling › should return failed status

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:153:24)

  ● GET /api/video/upscale-status › Completed Status › should download and save upscaled video

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:196:24)

  ● GET /api/video/upscale-status › Completed Status › should handle missing video URL

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:220:24)

  ● GET /api/video/upscale-status › Completed Status › should handle upload errors with cleanup

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:249:24)

  ● GET /api/video/upscale-status › Completed Status › should cleanup storage on database error

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/upscale-status.test.ts:288:24)

FAIL __tests__/api/audio/suno-status.test.ts
  ● GET /api/audio/suno/status › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:69:33)

  ● GET /api/audio/suno/status › Input Validation › should return 400 when taskId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:86:33)

  ● GET /api/audio/suno/status › Input Validation › should return 400 when projectId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:101:33)

  ● GET /api/audio/suno/status › Input Validation › should return 400 when both parameters are missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:115:33)

  ● GET /api/audio/suno/status › Project Ownership › should return 403 when user does not own project

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:136:33)

  ● GET /api/audio/suno/status › Success Cases › should return status for a pending task

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:166:33)

  ● GET /api/audio/suno/status › Success Cases › should return status for a completed task with audio URL

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:204:33)

  ● GET /api/audio/suno/status › Success Cases › should call Comet API with correct parameters

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:232:16)

  ● GET /api/audio/suno/status › Success Cases › should handle multiple tasks in response

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:266:33)

  ● GET /api/audio/suno/status › Error Handling › should return 500 when API key is not configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:284:33)

  ● GET /api/audio/suno/status › Error Handling › should return error when Comet API fails

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:305:33)

  ● GET /api/audio/suno/status › Error Handling › should handle API response with error code

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:330:33)

  ● GET /api/audio/suno/status › Error Handling › should handle network errors

    expect(received).rejects.toThrow(expected)

    Expected substring: "Network error"
    Received message:   "Cannot read properties of undefined (reading 'params')"

           97 |     // Handle Next.js 16's async params
           98 |     let params: TParams = {} as TParams;
        >  99 |     const rawParams = context.params;
              |                               ^
          100 |
          101 |     try {
          102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:347:23)
      at Object.toThrow (node_modules/expect/build/index.js:2155:20)
      at Object.toThrow (__tests__/api/audio/suno-status.test.ts:347:46)

  ● GET /api/audio/suno/status › Task Status Values › should handle pending status

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:373:35)

  ● GET /api/audio/suno/status › Task Status Values › should handle processing status

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:373:35)

  ● GET /api/audio/suno/status › Task Status Values › should handle completed status

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:373:35)

  ● GET /api/audio/suno/status › Task Status Values › should handle failed status

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/audio/suno-status.test.ts:373:35)

FAIL __tests__/api/video/split-audio.test.ts
  ● POST /api/video/split-audio › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:62:34)

  ● POST /api/video/split-audio › Authentication › should return 401 when auth error occurs

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:82:34)

  ● POST /api/video/split-audio › Input Validation › should return 400 when assetId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:97:34)

  ● POST /api/video/split-audio › Input Validation › should return 400 when projectId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:112:34)

  ● POST /api/video/split-audio › Input Validation › should return 400 when both fields are missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:125:34)

  ● POST /api/video/split-audio › Asset Verification › should return 403 when asset not found

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:146:34)

  ● POST /api/video/split-audio › Asset Verification › should verify asset belongs to authenticated user

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:172:17)

  ● POST /api/video/split-audio › Asset Verification › should return 400 when asset type is not video

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:197:34)

  ● POST /api/video/split-audio › Storage Download › should handle storage download errors

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:232:34)

  ● POST /api/video/split-audio › Success Cases › should return client-side processing recommendation

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:268:34)

  ● POST /api/video/split-audio › Success Cases › should include video URL in response

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:305:34)

  ● POST /api/video/split-audio › Success Cases › should fallback to storage_url when sourceUrl not in metadata

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:339:34)

  ● POST /api/video/split-audio › Logging › should log processing events

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:374:17)

  ● POST /api/video/split-audio › Logging › should log warnings for missing fields

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:398:17)

  ● POST /api/video/split-audio › Logging › should log errors for asset not found

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-audio.test.ts:419:17)

FAIL __tests__/api/video/split-scenes.test.ts
  ● POST /api/video/split-scenes › Authentication › should return 401 when user is not authenticated

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:107:34)

  ● POST /api/video/split-scenes › Input Validation › should return 400 when assetId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:120:34)

  ● POST /api/video/split-scenes › Input Validation › should return 400 when projectId is missing

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:131:34)

  ● POST /api/video/split-scenes › Input Validation › should return 400 for invalid assetId UUID format

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:142:34)

  ● POST /api/video/split-scenes › Input Validation › should return 400 for invalid projectId UUID format

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:153:34)

  ● POST /api/video/split-scenes › Configuration Validation › should return 503 when GOOGLE_SERVICE_ACCOUNT is not configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:179:34)

  ● POST /api/video/split-scenes › Configuration Validation › should return 503 when GCS_BUCKET_NAME is not configured

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:205:34)

  ● POST /api/video/split-scenes › Configuration Validation › should return 503 when GCS bucket does not exist

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:237:34)

  ● POST /api/video/split-scenes › Asset Verification › should return 403 when asset not found

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:252:34)

  ● POST /api/video/split-scenes › Asset Verification › should return 400 when asset type is not video

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:268:34)

  ● POST /api/video/split-scenes › Existing Scenes › should return existing scenes if already detected

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:296:34)

  ● POST /api/video/split-scenes › Success Cases › should successfully detect scenes

    TypeError: Cannot read properties of undefined (reading 'params')

       97 |     // Handle Next.js 16's async params
       98 |     let params: TParams = {} as TParams;
    >  99 |     const rawParams = context.params;
          |                               ^
      100 |
      101 |     try {
      102 |       params = ((await rawParams) ?? {}) as TParams;

      at params (lib/api/withAuth.ts:99:31)
      at Object.<anonymous> (__tests__/api/video/split-scenes.test.ts:368:34)

FAIL __tests__/api/image/generate.test.ts
  ● POST /api/image/generate › Success Cases › should generate images successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      143 |
      144 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
    > 145 |       expect(response.status).toBe(200);
          |                               ^
      146 |       const data = await response.json();
      147 |       expect(data.assets).toHaveLength(1);
      148 |       expect(data.message).toContain('Generated 1 image(s) successfully');

      at Object.toBe (__tests__/api/image/generate.test.ts:145:31)

FAIL __tests__/api/video/generate.test.ts
  ● POST /api/video/generate › Rate Limiting › should apply expensive rate limit for video generation

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - "video-gen:550e8400-e29b-41d4-a716-446655440000",
    + "user:550e8400-e29b-41d4-a716-446655440000",
      {"max": 10, "windowMs": 60000},

    Number of calls: 1

      174 |       await POST(mockRequest, { params: Promise.resolve({}) });
      175 |
    > 176 |       expect(checkRateLimit).toHaveBeenCalledWith(
          |                              ^
      177 |         `video-gen:${mockUser.id}`,
      178 |         RATE_LIMITS.tier2_resource_creation
      179 |       );

      at Object.toHaveBeenCalledWith (__tests__/api/video/generate.test.ts:176:30)

  ● POST /api/video/generate › Input Validation › should return 400 when validation fails

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      200 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      201 |
    > 202 |       expect(response.status).toBe(400);
          |                               ^
      203 |     });
      204 |
      205 |     it('should validate all required fields', async () => {

      at Object.toBe (__tests__/api/video/generate.test.ts:202:31)

  ● POST /api/video/generate › Input Validation › should validate all required fields

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      225 |       await POST(mockRequest, { params: Promise.resolve({}) });
      226 |
    > 227 |       expect(validateAll).toHaveBeenCalled();
          |                           ^
      228 |     });
      229 |   });
      230 |

      at Object.toHaveBeenCalled (__tests__/api/video/generate.test.ts:227:27)

  ● POST /api/video/generate › Project Ownership Verification › should return 404 when project not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      249 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      250 |
    > 251 |       expect(response.status).toBe(404);
          |                               ^
      252 |     });
      253 |
      254 |     it('should return 403 when user does not own project', async () => {

      at Object.toBe (__tests__/api/video/generate.test.ts:251:31)

  ● POST /api/video/generate › Project Ownership Verification › should return 403 when user does not own project

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      271 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      272 |
    > 273 |       expect(response.status).toBe(403);
          |                               ^
      274 |     });
      275 |   });
      276 |

      at Object.toBe (__tests__/api/video/generate.test.ts:273:31)

  ● POST /api/video/generate › Video Generation - Google Veo › should generate video with Veo for Google models

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      297 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      298 |
    > 299 |       expect(response.status).toBe(200);
          |                               ^
      300 |       const data = await response.json();
      301 |       expect(data.operationName).toBe('operations/veo-123');
      302 |       expect(data.status).toBe('processing');

      at Object.toBe (__tests__/api/video/generate.test.ts:299:31)

  ● POST /api/video/generate › Video Generation - Google Veo › should pass all Veo parameters correctly

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ObjectContaining {"compressionQuality": "high", "enhancePrompt": true, "generateAudio": true, "model": "veo-3.1-generate-preview", "negativePrompt": "blurry, low quality", "personGeneration": true, "prompt": "Test video", "sampleCount": 2, "seed": 12345}

    Number of calls: 0

      340 |       await POST(mockRequest, { params: Promise.resolve({}) });
      341 |
    > 342 |       expect(generateVideo).toHaveBeenCalledWith(
          |                             ^
      343 |         expect.objectContaining({
      344 |           prompt: 'Test video',
      345 |           model: 'veo-3.1-generate-preview',

      at Object.toHaveBeenCalledWith (__tests__/api/video/generate.test.ts:342:29)

  ● POST /api/video/generate › Video Generation - FAL Models › should use FAL for Seedance model

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      379 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      380 |
    > 381 |       expect(response.status).toBe(200);
          |                               ^
      382 |       const data = await response.json();
      383 |       expect(data.operationName).toBe('fal:seedance-1.0-pro:fal-request-123');
      384 |       expect(generateFalVideo).toHaveBeenCalled();

      at Object.toBe (__tests__/api/video/generate.test.ts:381:31)

  ● POST /api/video/generate › Video Generation - FAL Models › should use FAL for MiniMax model

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      407 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      408 |
    > 409 |       expect(response.status).toBe(200);
          |                               ^
      410 |       const data = await response.json();
      411 |       expect(data.operationName).toContain('minimax-hailuo-02-pro');
      412 |     });

      at Object.toBe (__tests__/api/video/generate.test.ts:409:31)

  ● POST /api/video/generate › Image-to-Video Generation › should generate video from image asset

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"auth": {"getSession": [Function mockConstructor], "getUser": [Function mockConstructor], "resetPasswordForEmail": [Function mockConstructor], "signInWithPassword": [Function mockConstructor], "signOut": [Function mockConstructor], "signUp": [Function mockConstructor], "updateUser": [Function mockConstructor]}, "channel": [Function mockConstructor], "delete": [Function mockConstructor], "eq": [Function mockConstructor], "from": [Function mockConstructor], "gt": [Function mockConstructor], "gte": [Function mockConstructor], "ilike": [Function mockConstructor], "in": [Function mockConstructor], "insert": [Function mockConstructor], "is": [Function mockConstructor], "like": [Function mockConstructor], "limit": [Function mockConstructor], "lt": [Function mockConstructor], "lte": [Function mockConstructor], "maybeSingle": [Function mockConstructor], "mockRejectedValue": [Function anonymous], "mockResolvedValue": [Function anonymous], "neq": [Function mockConstructor], "order": [Function mockConstructor], "range": [Function mockConstructor], "removeChannel": [Function mockConstructor], "select": [Function mockConstructor], "single": [Function mockConstructor], "storage": {"copy": [Function mockConstructor], "createSignedUrl": [Function mockConstructor], "createSignedUrls": [Function mockConstructor], "from": [Function mockConstructor], "getPublicUrl": [Function mockConstructor], "list": [Function mockConstructor], "move": [Function mockConstructor], "remove": [Function mockConstructor], "upload": [Function mockConstructor]}, "update": [Function mockConstructor], "upsert": [Function mockConstructor]}, "image-asset-id", Any<String>

    Number of calls: 0

      452 |       await POST(mockRequest, { params: Promise.resolve({}) });
      453 |
    > 454 |       expect(verifyAssetOwnership).toHaveBeenCalledWith(
          |                                    ^
      455 |         mockSupabase,
      456 |         'image-asset-id',
      457 |         expect.any(String)

      at Object.toHaveBeenCalledWith (__tests__/api/video/generate.test.ts:454:36)

  ● POST /api/video/generate › Image-to-Video Generation › should return 404 when image asset not found

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      488 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      489 |
    > 490 |       expect(response.status).toBe(404);
          |                               ^
      491 |     });
      492 |   });
      493 |

      at Object.toBe (__tests__/api/video/generate.test.ts:490:31)

  ● POST /api/video/generate › Error Handling › should return 500 when video generation fails

    expect(received).toBe(expected) // Object.is equality

    Expected: "API error"
    Received: "_serverLogger.serverLogger.child is not a function"

      514 |       expect(response.status).toBe(500);
      515 |       const data = await response.json();
    > 516 |       expect(data.error).toBe('API error');
          |                          ^
      517 |     });
      518 |
      519 |     it('should handle malformed JSON body', async () => {

      at Object.toBe (__tests__/api/video/generate.test.ts:516:26)

  ● POST /api/video/generate › Error Handling › should handle malformed JSON body

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      527 |       const response = await POST(mockRequest, { params: Promise.resolve({}) });
      528 |
    > 529 |       expect(response.status).toBe(400);
          |                               ^
      530 |       const data = await response.json();
      531 |       expect(data.error).toBe('Invalid JSON body');
      532 |     });

      at Object.toBe (__tests__/api/video/generate.test.ts:529:31)

  ● POST /api/video/generate › Response Format › should return operationName and status

    expect(received).toHaveProperty(path)

    Expected path: "operationName"
    Received path: []

    Received value: {"error": "_serverLogger.serverLogger.child is not a function"}

      554 |       const data = await response.json();
      555 |
    > 556 |       expect(data).toHaveProperty('operationName');
          |                    ^
      557 |       expect(data).toHaveProperty('status', 'processing');
      558 |       expect(data).toHaveProperty('message');
      559 |     });

      at Object.toHaveProperty (__tests__/api/video/generate.test.ts:556:20)

FAIL __tests__/api/ai/chat.test.ts
  ● POST /api/ai/chat › Input Validation › should return 400 when projectId is missing

    expect(received).toBe(expected) // Object.is equality

    Expected: "projectId is required"
    Received: "projectId must be a string"

      203 |       expect(response.status).toBe(400);
      204 |       const data = await response.json();
    > 205 |       expect(data.error).toBe('projectId is required');
          |                          ^
      206 |       expect(data.field).toBe('projectId');
      207 |     });
      208 |

      at Object.toBe (__tests__/api/ai/chat.test.ts:205:26)

FAIL __tests__/api/projects/chat.test.ts
  ● GET /api/projects/[projectId]/chat › Input Validation › should return 400 for invalid UUID format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 200

      126 |       });
      127 |
    > 128 |       expect(response.status).toBe(400);
          |                               ^
      129 |       const data = await response.json();
      130 |       expect(data.error).toContain('UUID');
      131 |     });

      at Object.toBe (__tests__/api/projects/chat.test.ts:128:31)

  ● GET /api/projects/[projectId]/chat › Input Validation › should return 400 for empty projectId

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 200

      139 |       });
      140 |
    > 141 |       expect(response.status).toBe(400);
          |                               ^
      142 |     });
      143 |   });
      144 |

      at Object.toBe (__tests__/api/projects/chat.test.ts:141:31)

  ● DELETE /api/projects/[projectId]/chat › Input Validation › should return 400 for invalid UUID format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 200

      332 |       });
      333 |
    > 334 |       expect(response.status).toBe(400);
          |                               ^
      335 |       const data = await response.json();
      336 |       expect(data.error).toContain('UUID');
      337 |     });

      at Object.toBe (__tests__/api/projects/chat.test.ts:334:31)

FAIL __tests__/api/frames/edit.test.ts
  ● POST /api/frames/[frameId]/edit › Authorization › should return 403 when user does not own the asset

    expect(received).toContain(expected) // indexOf

    Expected substring: "do not own this asset"
    Received string:    "Unauthorized - you do not own this project"

      420 |       expect(response.status).toBe(403);
      421 |       const data = await response.json();
    > 422 |       expect(data.error).toContain('do not own this asset');
          |                          ^
      423 |       expect(auditSecurityEvent).toHaveBeenCalled();
      424 |     });
      425 |   });

      at Object.toContain (__tests__/api/frames/edit.test.ts:422:26)

  ● POST /api/frames/[frameId]/edit › API Configuration › should return 503 when API key is not configured

    expect(received).toBe(expected) // Object.is equality

    Expected: 503
    Received: 403

      449 |       });
      450 |
    > 451 |       expect(response.status).toBe(503);
          |                               ^
      452 |       const data = await response.json();
      453 |       expect(data.error).toContain('API key not configured');
      454 |     });

      at Object.toBe (__tests__/api/frames/edit.test.ts:451:31)

  ● POST /api/frames/[frameId]/edit › API Configuration › should accept GEMINI_API_KEY as fallback

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      507 |       });
      508 |
    > 509 |       expect(response.status).toBe(200);
          |                               ^
      510 |     });
      511 |   });
      512 |

      at Object.toBe (__tests__/api/frames/edit.test.ts:509:31)

  ● POST /api/frames/[frameId]/edit › Success Cases - Global Mode › should successfully edit frame in global mode

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      567 |       });
      568 |
    > 569 |       expect(response.status).toBe(200);
          |                               ^
      570 |       const data = await response.json();
      571 |       expect(data.success).toBe(true);
      572 |       expect(data.edits).toHaveLength(4); // Default numVariations

      at Object.toBe (__tests__/api/frames/edit.test.ts:569:31)

  ● POST /api/frames/[frameId]/edit › Success Cases - Global Mode › should generate single variation when numVariations is 1

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      587 |       });
      588 |
    > 589 |       expect(response.status).toBe(200);
          |                               ^
      590 |       const data = await response.json();
      591 |       expect(data.edits).toHaveLength(1);
      592 |       expect(mockGenerateContent).toHaveBeenCalledTimes(1);

      at Object.toBe (__tests__/api/frames/edit.test.ts:589:31)

  ● POST /api/frames/[frameId]/edit › Success Cases - Global Mode › should increment version numbers correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      667 |       });
      668 |
    > 669 |       expect(response.status).toBe(200);
          |                               ^
      670 |       const data = await response.json();
      671 |       expect(data.edits).toHaveLength(2);
      672 |       expect(data.edits[0].version).toBe(6);

      at Object.toBe (__tests__/api/frames/edit.test.ts:669:31)

  ● POST /api/frames/[frameId]/edit › Success Cases - Crop Mode › should edit with crop parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      740 |       });
      741 |
    > 742 |       expect(response.status).toBe(200);
          |                               ^
      743 |       expect(insertData).toMatchObject({
      744 |         mode: 'crop',
      745 |         crop_x: 100,

      at Object.toBe (__tests__/api/frames/edit.test.ts:742:31)

  ● POST /api/frames/[frameId]/edit › Success Cases - Crop Mode › should include crop coordinates in prompt

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: ArrayContaining [ObjectContaining {"text": StringContaining "coordinates (50, 75)"}]

    Number of calls: 0

      802 |       await POST(mockRequest, { params: Promise.resolve({ frameId: validFrameId }) });
      803 |
    > 804 |       expect(mockGenerateContent).toHaveBeenCalledWith(
          |                                   ^
      805 |         expect.arrayContaining([
      806 |           expect.objectContaining({
      807 |             text: expect.stringContaining('coordinates (50, 75)'),

      at Object.toHaveBeenCalledWith (__tests__/api/frames/edit.test.ts:804:35)

  ● POST /api/frames/[frameId]/edit › Reference Images › should fetch and include reference images

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "https://example.com/ref1.jpg"

    Number of calls: 0

      866 |       await POST(mockRequest, { params: Promise.resolve({ frameId: validFrameId }) });
      867 |
    > 868 |       expect(global.fetch).toHaveBeenCalledWith('https://example.com/ref1.jpg');
          |                            ^
      869 |       expect(global.fetch).toHaveBeenCalledWith('https://example.com/ref2.jpg');
      870 |       expect(mockGenerateContent).toHaveBeenCalledWith(
      871 |         expect.arrayContaining([

      at Object.toHaveBeenCalledWith (__tests__/api/frames/edit.test.ts:868:28)

  ● POST /api/frames/[frameId]/edit › Reference Images › should include reference image count in metadata

    expect(received).toMatchObject(expected)

    Matcher error: received value must be a non-null object

    Received has value: null

      931 |       await POST(mockRequest, { params: Promise.resolve({ frameId: validFrameId }) });
      932 |
    > 933 |       expect(insertData).toMatchObject({
          |                          ^
      934 |         metadata: expect.objectContaining({
      935 |           referenceImages: 1,
      936 |         }),

      at Object.toMatchObject (__tests__/api/frames/edit.test.ts:933:26)

  ● POST /api/frames/[frameId]/edit › Error Handling › should continue with other variations if one fails

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      988 |       });
      989 |
    > 990 |       expect(response.status).toBe(200);
          |                               ^
      991 |       const data = await response.json();
      992 |       expect(data.edits).toHaveLength(2); // 2 successful, 1 failed
      993 |     });

      at Object.toBe (__tests__/api/frames/edit.test.ts:990:31)

  ● POST /api/frames/[frameId]/edit › Error Handling › should handle Gemini API errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 403

      1034 |       });
      1035 |
    > 1036 |       expect(response.status).toBe(500);
           |                               ^
      1037 |       const data = await response.json();
      1038 |       expect(data.error).toBe('Internal server error');
      1039 |     });

      at Object.toBe (__tests__/api/frames/edit.test.ts:1036:31)

  ● POST /api/frames/[frameId]/edit › Error Handling › should handle frame fetch errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 403

      1069 |       });
      1070 |
    > 1071 |       expect(response.status).toBe(500);
           |                               ^
      1072 |       const data = await response.json();
      1073 |       expect(data.error).toBe('Internal server error');
      1074 |     });

      at Object.toBe (__tests__/api/frames/edit.test.ts:1071:31)

  ● POST /api/frames/[frameId]/edit › Audit Logging › should log successful completion

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 2
    Received number of calls: 1

      1153 |
      1154 |       // Should be called twice: once for request, once for completion
    > 1155 |       expect(auditLog).toHaveBeenCalledTimes(2);
           |                        ^
      1156 |       expect(auditLog).toHaveBeenNthCalledWith(
      1157 |         2,
      1158 |         expect.objectContaining({

      at Object.toHaveBeenCalledTimes (__tests__/api/frames/edit.test.ts:1155:24)

FAIL __tests__/api/video/generate-audio-status.test.ts
  ● GET /api/video/generate-audio-status › API Key Configuration › should return 500 when FAL_API_KEY is not configured

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:115:24)

  ● GET /api/video/generate-audio-status › Status Check › should check status with FAL.ai API

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:129:7)

  ● GET /api/video/generate-audio-status › Status Check › should handle status check errors

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:154:24)

  ● GET /api/video/generate-audio-status › Status Check › should handle status check timeout

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:170:24)

  ● GET /api/video/generate-audio-status › Processing Status › should return processing status when job is in progress

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:189:24)

  ● GET /api/video/generate-audio-status › Failed Status › should handle FAILED status

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:213:24)

  ● GET /api/video/generate-audio-status › Failed Status › should handle ERROR status

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:235:24)

  ● GET /api/video/generate-audio-status › Completed Status - Download and Storage › should download and upload audio on completion

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:292:24)

  ● GET /api/video/generate-audio-status › Completed Status - Download and Storage › should handle missing audio URL in result

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:317:24)

  ● GET /api/video/generate-audio-status › Completed Status - Download and Storage › should handle audio download failure

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:345:24)

  ● GET /api/video/generate-audio-status › Completed Status - Download and Storage › should handle storage upload failure

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:376:24)

  ● GET /api/video/generate-audio-status › Completed Status - Download and Storage › should handle database asset creation failure

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:422:24)

  ● GET /api/video/generate-audio-status › Alternative Audio URL Formats › should handle audio_url field

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:472:24)

  ● GET /api/video/generate-audio-status › Alternative Audio URL Formats › should handle output.url field

    TypeError: _serverLogger.serverLogger.debug is not a function

      189 |     }
      190 |
    > 191 |     serverLogger.debug(
          |                  ^
      192 |       {
      193 |         event: 'status_check.processing',
      194 |         route,

      at debug (lib/api/statusCheckHandler.ts:191:18)
      at Object.<anonymous> (__tests__/api/video/generate-audio-status.test.ts:520:24)


Test Suites: 32 failed, 7 passed, 39 total
Tests:       450 failed, 6 skipped, 232 passed, 688 total
Snapshots:   0 total
Time:        3.688 s
Ran all test suites matching __tests__/api/.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
