name: Test Quality Gates

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  schedule:
    # Run nightly flaky test detection at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_flaky_detection:
        description: 'Run flaky test detection'
        required: false
        type: boolean
        default: false

# Cancel in-progress runs when a new workflow is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Run tests and check pass rate
  test-pass-rate:
    name: Test Pass Rate Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage -- --json --outputFile=/tmp/test-results.json
        continue-on-error: true

      - name: Check pass rate threshold
        run: node scripts/check-pass-rate.js 75 /tmp/test-results.json

      - name: Collect test metrics
        if: always()
        run: node scripts/collect-test-metrics.js /tmp/test-results.json

      - name: Generate test health dashboard
        if: always()
        run: node scripts/generate-dashboard.js
        continue-on-error: true

      - name: Run health checks
        if: always()
        run: node scripts/check-test-health.js
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.sha }}
          path: |
            /tmp/test-results.json
            coverage/
            test-metrics-history.json
            test-health-dashboard.html
          retention-days: 30

      - name: Generate test health report
        if: always()
        run: node scripts/generate-test-report.js /tmp/test-results.json

      - name: Upload test health report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-health-report-${{ github.sha }}
          path: TEST_HEALTH_DASHBOARD.md
          retention-days: 30

      - name: Comment PR with test summary
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read test health report
            let report = '';
            try {
              report = fs.readFileSync('TEST_HEALTH_DASHBOARD.md', 'utf8');
            } catch (error) {
              report = '⚠️ Test health report could not be generated';
            }

            // Create comment body
            const body = `## Test Quality Report

            ${report}

            ---
            *Full results available in workflow artifacts*`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Test Quality Report')
            );

            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Check coverage thresholds
  coverage-threshold:
    name: Coverage Threshold Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Check coverage thresholds
        run: |
          echo "Coverage thresholds are enforced by Jest configuration"
          echo "See jest.config.js for current thresholds"

          # If tests passed, coverage meets thresholds
          if [ $? -eq 0 ]; then
            echo "✅ Coverage meets minimum thresholds"
          else
            echo "❌ Coverage below minimum thresholds"
            exit 1
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Flaky test detection (runs on schedule or manual trigger)
  flaky-test-detection:
    name: Flaky Test Detection
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.run_flaky_detection == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run flaky test detection
        run: npm run test:detect-flaky
        continue-on-error: true

      - name: Upload flaky test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: flaky-test-report-${{ github.run_number }}
          path: flaky-tests-report.json
          retention-days: 90

      - name: Create issue for flaky tests
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read flaky test report
            let report;
            try {
              const content = fs.readFileSync('flaky-tests-report.json', 'utf8');
              report = JSON.parse(content);
            } catch (error) {
              console.log('No flaky test report found');
              return;
            }

            if (report.totalFlakyTests === 0) {
              return;
            }

            // Create issue body
            let body = `## Flaky Tests Detected\n\n`;
            body += `**Detection Date:** ${report.timestamp}\n`;
            body += `**Iterations:** ${report.iterations}\n`;
            body += `**Total Flaky Tests:** ${report.totalFlakyTests}\n\n`;
            body += `### Flaky Tests\n\n`;

            report.flakyTests.slice(0, 10).forEach((test, i) => {
              body += `${i + 1}. **${test.suite}**\n`;
              body += `   - ${test.name}\n`;
              body += `   - Pass Rate: ${test.passRate.toFixed(1)}% (${test.passCount}/${test.totalRuns})\n`;
              body += `   - Avg Duration: ${test.avgDuration.toFixed(0)}ms\n\n`;
            });

            if (report.totalFlakyTests > 10) {
              body += `\n*... and ${report.totalFlakyTests - 10} more flaky tests*\n`;
            }

            body += `\n### Recommendations\n\n`;
            body += `Common causes of flaky tests:\n`;
            body += `1. Race conditions in async code\n`;
            body += `2. Missing await/Promise.resolve()\n`;
            body += `3. Shared mutable state between tests\n`;
            body += `4. Timing-dependent assertions\n`;
            body += `5. External dependencies (network, file system)\n`;
            body += `6. Insufficient test cleanup\n\n`;
            body += `---\n*Auto-generated by nightly flaky test detection*`;

            // Create issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `⚠️ Flaky Tests Detected: ${report.totalFlakyTests} tests`,
              body: body,
              labels: ['test', 'flaky-test', 'ci']
            });

  # Test execution time monitoring
  test-performance:
    name: Test Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests and measure performance
        run: |
          START_TIME=$(date +%s)
          npm test -- --json --outputFile=/tmp/test-results.json || true
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          echo "Test suite execution time: ${DURATION}s"
          echo "EXECUTION_TIME=${DURATION}" >> $GITHUB_ENV

          # Warn if tests take too long (>10 minutes)
          if [ $DURATION -gt 600 ]; then
            echo "⚠️ Warning: Test suite took longer than 10 minutes"
            echo "TEST_SLOW=true" >> $GITHUB_ENV
          fi

      - name: Comment on slow tests
        if: env.TEST_SLOW == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const duration = process.env.EXECUTION_TIME;
            const minutes = Math.floor(duration / 60);
            const seconds = duration % 60;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `⚠️ **Test Performance Warning**\n\nThe test suite took ${minutes}m ${seconds}s to execute, which is longer than the 10-minute target.\n\nConsider:\n- Optimizing slow tests\n- Using parallel execution\n- Mocking expensive operations\n- Reducing test timeout values`
            });

  # All quality gates must pass
  all-quality-gates:
    name: All Quality Gates Passed
    runs-on: ubuntu-latest
    needs: [test-pass-rate, coverage-threshold, test-performance]
    if: always() && (github.event_name == 'pull_request' || github.event_name == 'push')

    steps:
      - name: Check all gates
        run: |
          if [[ "${{ needs.test-pass-rate.result }}" != "success" ]] || \
             [[ "${{ needs.coverage-threshold.result }}" != "success" ]] || \
             [[ "${{ needs.test-performance.result }}" != "success" ]]; then
            echo "❌ One or more quality gates failed"
            echo "Test Pass Rate: ${{ needs.test-pass-rate.result }}"
            echo "Coverage Threshold: ${{ needs.coverage-threshold.result }}"
            echo "Test Performance: ${{ needs.test-performance.result }}"
            exit 1
          fi

          echo "✅ All quality gates passed successfully!"
